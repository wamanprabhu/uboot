
build/wtmi.elf:     file format elf32-littlearm


Disassembly of section .ro:

1fff0000 <_start>:
1fff0000:	1fff007c 	svcne	0x00ff007c
1fff0004:	1fff008c 	svcne	0x00ff008c
1fff0008:	1fff0092 	svcne	0x00ff0092
1fff000c:	1fff0098 	svcne	0x00ff0098
1fff0010:	1fff009e 	svcne	0x00ff009e
1fff0014:	1fff00a4 	svcne	0x00ff00a4
1fff0018:	1fff00aa 	svcne	0x00ff00aa
1fff001c:	1fff00aa 	svcne	0x00ff00aa
1fff0020:	1fff00aa 	svcne	0x00ff00aa
1fff0024:	1fff00aa 	svcne	0x00ff00aa
1fff0028:	1fff00b0 	svcne	0x00ff00b0
1fff002c:	1fff00b6 	svcne	0x00ff00b6
1fff0030:	1fff00aa 	svcne	0x00ff00aa
1fff0034:	1fff00bc 	svcne	0x00ff00bc
1fff0038:	1fff00c2 	svcne	0x00ff00c2
1fff003c:	1fff00c8 	svcne	0x00ff00c8
1fff0040:	1fff00c8 	svcne	0x00ff00c8
1fff0044:	1fff00c8 	svcne	0x00ff00c8
1fff0048:	1fff00c8 	svcne	0x00ff00c8
1fff004c:	1fff00c8 	svcne	0x00ff00c8
1fff0050:	1fff00c8 	svcne	0x00ff00c8
1fff0054:	1fff00c8 	svcne	0x00ff00c8
1fff0058:	1fff00c8 	svcne	0x00ff00c8
1fff005c:	1fff00c8 	svcne	0x00ff00c8
1fff0060:	1fff00c8 	svcne	0x00ff00c8
1fff0064:	1fff00c8 	svcne	0x00ff00c8
1fff0068:	1fff00c8 	svcne	0x00ff00c8
1fff006c:	1fff00c8 	svcne	0x00ff00c8
1fff0070:	1fff00c8 	svcne	0x00ff00c8
1fff0074:	1fff00c8 	svcne	0x00ff00c8
1fff0078:	1fff00c8 	svcne	0x00ff00c8

1fff007c <reset>:
	.word	external_interrupt		/* 31 */

/***********************************************************/
.global reset
reset:
	ldr	r2, =stack_top
1fff007c:	4a14      	ldr	r2, [pc, #80]	; (1fff00d0 <external_interrupt+0x8>)
	msr	psp, r2				/* Init Process stack pointer */
1fff007e:	f382 8809 	msr	PSP, r2
	msr	msp, r2				/* Init main stack pointer */
1fff0082:	f382 8808 	msr	MSP, r2
	ldr	r0, =0x0
1fff0086:	2000      	movs	r0, #0
	ldr	r1, =main
1fff0088:	4912      	ldr	r1, [pc, #72]	; (1fff00d4 <external_interrupt+0xc>)
	bx	r1
1fff008a:	4708      	bx	r1

1fff008c <nmi_exception>:


/***********************************************************/
.global nmi_exception
nmi_exception:
	ldr	r0, =0x2
1fff008c:	2002      	movs	r0, #2
	ldr	r1, =main
1fff008e:	4911      	ldr	r1, [pc, #68]	; (1fff00d4 <external_interrupt+0xc>)
	bx	r1
1fff0090:	4708      	bx	r1

1fff0092 <hard_fault_exception>:

.global hard_fault_exception
hard_fault_exception:
	ldr	r0, =0x3
1fff0092:	2003      	movs	r0, #3
	ldr	r1, =main
1fff0094:	490f      	ldr	r1, [pc, #60]	; (1fff00d4 <external_interrupt+0xc>)
	bx	r1
1fff0096:	4708      	bx	r1

1fff0098 <mem_manage_exception>:

.global mem_manage_exception
mem_manage_exception:
	ldr	r0, =0x4
1fff0098:	2004      	movs	r0, #4
	ldr	r1, =main
1fff009a:	490e      	ldr	r1, [pc, #56]	; (1fff00d4 <external_interrupt+0xc>)
	bx	r1
1fff009c:	4708      	bx	r1

1fff009e <bus_fault_exception>:

.global bus_fault_exception
bus_fault_exception:
	ldr	r0, =0x5
1fff009e:	2005      	movs	r0, #5
	ldr	r1, =main
1fff00a0:	490c      	ldr	r1, [pc, #48]	; (1fff00d4 <external_interrupt+0xc>)
	bx	r1
1fff00a2:	4708      	bx	r1

1fff00a4 <usage_fault_exception>:

.global usage_fault_exception
usage_fault_exception:
	ldr	r0, =0x6
1fff00a4:	2006      	movs	r0, #6
	ldr	r1, =main
1fff00a6:	490b      	ldr	r1, [pc, #44]	; (1fff00d4 <external_interrupt+0xc>)
	bx	r1
1fff00a8:	4708      	bx	r1

1fff00aa <reserved>:

.global reserved
reserved:
	ldr	r0, =0x7
1fff00aa:	2007      	movs	r0, #7
	ldr	r1, =main
1fff00ac:	4909      	ldr	r1, [pc, #36]	; (1fff00d4 <external_interrupt+0xc>)
	bx	r1
1fff00ae:	4708      	bx	r1

1fff00b0 <svc>:

.global svc
svc:
	ldr	r0, =0xB
1fff00b0:	200b      	movs	r0, #11
	ldr	r1, =main
1fff00b2:	4908      	ldr	r1, [pc, #32]	; (1fff00d4 <external_interrupt+0xc>)
	bx	r1
1fff00b4:	4708      	bx	r1

1fff00b6 <debug_monitor>:

.global debug_monitor
debug_monitor:
	ldr	r0, =0xC
1fff00b6:	200c      	movs	r0, #12
	ldr	r1, =main
1fff00b8:	4906      	ldr	r1, [pc, #24]	; (1fff00d4 <external_interrupt+0xc>)
	bx	r1
1fff00ba:	4708      	bx	r1

1fff00bc <pendable_service_request>:

.global pendable_service_request
pendable_service_request:
	ldr	r0, =0xE
1fff00bc:	200e      	movs	r0, #14
	ldr	r1, =main
1fff00be:	4905      	ldr	r1, [pc, #20]	; (1fff00d4 <external_interrupt+0xc>)
	bx	r1
1fff00c0:	4708      	bx	r1

1fff00c2 <sys_tick_handler>:

.global sys_tick_handler
sys_tick_handler:
	ldr	r0, =0xF
1fff00c2:	200f      	movs	r0, #15
	ldr	r1, =main
1fff00c4:	4903      	ldr	r1, [pc, #12]	; (1fff00d4 <external_interrupt+0xc>)
	bx	r1
1fff00c6:	4708      	bx	r1

1fff00c8 <external_interrupt>:

.global external_interrupt
external_interrupt:
	ldr	r0, =0x10
1fff00c8:	2010      	movs	r0, #16
	ldr	r1, =main
1fff00ca:	4902      	ldr	r1, [pc, #8]	; (1fff00d4 <external_interrupt+0xc>)
	bx	r1
1fff00cc:	4708      	bx	r1
1fff00ce:	17100000 	ldrne	r0, [r0, -r0]
	.word	external_interrupt		/* 31 */

/***********************************************************/
.global reset
reset:
	ldr	r2, =stack_top
1fff00d2:	06cd1fff 			; <UNDEFINED> instruction: 0x06cd1fff
	msr	psp, r2				/* Init Process stack pointer */
	msr	msp, r2				/* Init main stack pointer */
	ldr	r0, =0x0
	ldr	r1, =main
1fff00d6:	4b031fff 	blmi	200b80da <stack_top+0xc69ca>

1fff00d8 <get_ref_clk>:
 ***************************************************************************************************/
u32 get_ref_clk(void)
{
	u32 regval;

	regval = (readl(MVEBU_TEST_PIN_LATCH_N) & MVEBU_XTAL_MODE_MASK) >> MVEBU_XTAL_MODE_OFFS;
1fff00d8:	4b03      	ldr	r3, [pc, #12]	; (1fff00e8 <get_ref_clk+0x10>)
1fff00da:	681b      	ldr	r3, [r3, #0]

	if (regval == MVEBU_XTAL_CLOCK_25MHZ)
1fff00dc:	f413 7f00 	tst.w	r3, #512	; 0x200
		return 25;
	else
		return 40;
}
1fff00e0:	bf14      	ite	ne
1fff00e2:	2028      	movne	r0, #40	; 0x28
1fff00e4:	2019      	moveq	r0, #25
1fff00e6:	4770      	bx	lr
1fff00e8:	c0013808 	andgt	r3, r1, r8, lsl #16

1fff00ec <get_cm3_clk>:
{
	u32 tbg, cm3_pre_scl1, cm3_pre_scl2;
	enum clock_line tbg_typ;

	/* 1. check CM3 clock select */
	if (!((readl(MVEBU_NORTH_CLOCK_SELECT_REG) >> 4) & 0x1))
1fff00ec:	4b2e      	ldr	r3, [pc, #184]	; (1fff01a8 <get_cm3_clk+0xbc>)
  * get_cm3_clk
  *
  * return: CM3 CPU clock in MHz
 ***************************************************************************************************/
u32 get_cm3_clk(void)
{
1fff00ee:	b510      	push	{r4, lr}
	u32 tbg, cm3_pre_scl1, cm3_pre_scl2;
	enum clock_line tbg_typ;

	/* 1. check CM3 clock select */
	if (!((readl(MVEBU_NORTH_CLOCK_SELECT_REG) >> 4) & 0x1))
1fff00f0:	681b      	ldr	r3, [r3, #0]
1fff00f2:	06db      	lsls	r3, r3, #27
1fff00f4:	d403      	bmi.n	1fff00fe <get_cm3_clk+0x12>
	cm3_pre_scl2 = (readl(MVEBU_NORTH_CLOCK_DIVIDER_SELECT1_REG) >> 12) & 0x7;
	if (cm3_pre_scl2 == 7 || cm3_pre_scl2 == 0)
		return 0; /* divider value error */

	return tbg/(cm3_pre_scl1 * cm3_pre_scl2);
}
1fff00f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	u32 tbg, cm3_pre_scl1, cm3_pre_scl2;
	enum clock_line tbg_typ;

	/* 1. check CM3 clock select */
	if (!((readl(MVEBU_NORTH_CLOCK_SELECT_REG) >> 4) & 0x1))
		return get_ref_clk(); /* CPU clock is using XTAL output*/
1fff00fa:	f7ff bfed 	b.w	1fff00d8 <get_ref_clk>

	/* 2. get TSECM TBG select */
	tbg_typ = (readl(MVEBU_NORTH_CLOCK_TBG_SELECT_REG) >> 8) & 0x3;
1fff00fe:	4b2b      	ldr	r3, [pc, #172]	; (1fff01ac <get_cm3_clk+0xc0>)
1fff0100:	681c      	ldr	r4, [r3, #0]
	   vco_div - TBG_A_VCODIV_SEL or TBG_B_VCODIV_SEL
	   Fref - reference clock 25MHz or 40 MHz
	*/

	/* get ref clock */
	ref = get_ref_clk();
1fff0102:	f7ff ffe9 	bl	1fff00d8 <get_ref_clk>
	/* 1. check CM3 clock select */
	if (!((readl(MVEBU_NORTH_CLOCK_SELECT_REG) >> 4) & 0x1))
		return get_ref_clk(); /* CPU clock is using XTAL output*/

	/* 2. get TSECM TBG select */
	tbg_typ = (readl(MVEBU_NORTH_CLOCK_TBG_SELECT_REG) >> 8) & 0x3;
1fff0106:	f3c4 2401 	ubfx	r4, r4, #8, #2

	/* get ref clock */
	ref = get_ref_clk();

	/* get M, N */
	reg_val = readl(MVEBU_NORTH_BRG_TBG_CTRL7);
1fff010a:	4b29      	ldr	r3, [pc, #164]	; (1fff01b0 <get_cm3_clk+0xc4>)
	tbg_M = ((tbg_typ == TBG_A_S) || (tbg_typ == TBG_A_P)) ?
1fff010c:	2c02      	cmp	r4, #2

	/* get ref clock */
	ref = get_ref_clk();

	/* get M, N */
	reg_val = readl(MVEBU_NORTH_BRG_TBG_CTRL7);
1fff010e:	681b      	ldr	r3, [r3, #0]
	tbg_M = ((tbg_typ == TBG_A_S) || (tbg_typ == TBG_A_P)) ?
1fff0110:	d000      	beq.n	1fff0114 <get_cm3_clk+0x28>
1fff0112:	b914      	cbnz	r4, 1fff011a <get_cm3_clk+0x2e>
1fff0114:	05db      	lsls	r3, r3, #23
1fff0116:	0ddb      	lsrs	r3, r3, #23
1fff0118:	e001      	b.n	1fff011e <get_cm3_clk+0x32>
1fff011a:	f3c3 4308 	ubfx	r3, r3, #16, #9
		(reg_val & 0x1FFUL) : ((reg_val >> 16) & 0x1FFUL);
	tbg_M = (tbg_M == 0) ? 1 : tbg_M;

	reg_val = readl(MVEBU_NORTH_BRG_TBG_CTRL0);
1fff011e:	4a25      	ldr	r2, [pc, #148]	; (1fff01b4 <get_cm3_clk+0xc8>)

	/* get M, N */
	reg_val = readl(MVEBU_NORTH_BRG_TBG_CTRL7);
	tbg_M = ((tbg_typ == TBG_A_S) || (tbg_typ == TBG_A_P)) ?
		(reg_val & 0x1FFUL) : ((reg_val >> 16) & 0x1FFUL);
	tbg_M = (tbg_M == 0) ? 1 : tbg_M;
1fff0120:	2b00      	cmp	r3, #0
1fff0122:	bf08      	it	eq
1fff0124:	2301      	moveq	r3, #1

	reg_val = readl(MVEBU_NORTH_BRG_TBG_CTRL0);
	tbg_N = ((tbg_typ == TBG_A_S) || (tbg_typ == TBG_A_P)) ?
1fff0126:	2c02      	cmp	r4, #2
	reg_val = readl(MVEBU_NORTH_BRG_TBG_CTRL7);
	tbg_M = ((tbg_typ == TBG_A_S) || (tbg_typ == TBG_A_P)) ?
		(reg_val & 0x1FFUL) : ((reg_val >> 16) & 0x1FFUL);
	tbg_M = (tbg_M == 0) ? 1 : tbg_M;

	reg_val = readl(MVEBU_NORTH_BRG_TBG_CTRL0);
1fff0128:	6811      	ldr	r1, [r2, #0]
	tbg_N = ((tbg_typ == TBG_A_S) || (tbg_typ == TBG_A_P)) ?
1fff012a:	d000      	beq.n	1fff012e <get_cm3_clk+0x42>
1fff012c:	b914      	cbnz	r4, 1fff0134 <get_cm3_clk+0x48>
1fff012e:	f3c1 0188 	ubfx	r1, r1, #2, #9
1fff0132:	e001      	b.n	1fff0138 <get_cm3_clk+0x4c>
1fff0134:	f3c1 4188 	ubfx	r1, r1, #18, #9
		((reg_val >> 2) & 0x1FFUL) : ((reg_val >> 18) & 0x1FFUL);

	if ((tbg_typ == TBG_A_S) || (tbg_typ == TBG_B_S)) {
1fff0138:	1ea2      	subs	r2, r4, #2
1fff013a:	2a01      	cmp	r2, #1
1fff013c:	d809      	bhi.n	1fff0152 <get_cm3_clk+0x66>
		/* get SE VCODIV */
		reg_val = readl(MVEBU_NORTH_BRG_TBG_CTRL1);
1fff013e:	4a1e      	ldr	r2, [pc, #120]	; (1fff01b8 <get_cm3_clk+0xcc>)
		reg_val = (tbg_typ == TBG_A_S) ?
1fff0140:	2c02      	cmp	r4, #2
	tbg_N = ((tbg_typ == TBG_A_S) || (tbg_typ == TBG_A_P)) ?
		((reg_val >> 2) & 0x1FFUL) : ((reg_val >> 18) & 0x1FFUL);

	if ((tbg_typ == TBG_A_S) || (tbg_typ == TBG_B_S)) {
		/* get SE VCODIV */
		reg_val = readl(MVEBU_NORTH_BRG_TBG_CTRL1);
1fff0142:	6812      	ldr	r2, [r2, #0]
		reg_val = (tbg_typ == TBG_A_S) ?
1fff0144:	d102      	bne.n	1fff014c <get_cm3_clk+0x60>
1fff0146:	05d2      	lsls	r2, r2, #23
1fff0148:	0dd2      	lsrs	r2, r2, #23
1fff014a:	e00a      	b.n	1fff0162 <get_cm3_clk+0x76>
1fff014c:	f3c2 4208 	ubfx	r2, r2, #16, #9
1fff0150:	e007      	b.n	1fff0162 <get_cm3_clk+0x76>
			  (reg_val & 0x1FFUL) : ((reg_val >> 16) & 0x1FFUL);
	} else {
		/* get DIFF VCODIV */
		reg_val = readl(MVEBU_NORTH_BRG_TBG_CTRL8);
1fff0152:	4a1a      	ldr	r2, [pc, #104]	; (1fff01bc <get_cm3_clk+0xd0>)
1fff0154:	6812      	ldr	r2, [r2, #0]
		reg_val = (tbg_typ == TBG_A_P) ?
1fff0156:	b914      	cbnz	r4, 1fff015e <get_cm3_clk+0x72>
1fff0158:	f3c2 0248 	ubfx	r2, r2, #1, #9
1fff015c:	e001      	b.n	1fff0162 <get_cm3_clk+0x76>
1fff015e:	f3c2 4248 	ubfx	r2, r2, #17, #9
			  ((reg_val >> 1) & 0x1FFUL) : ((reg_val >> 17) & 0x1FFUL);
	}
	if (reg_val > 7)
1fff0162:	2a07      	cmp	r2, #7
1fff0164:	d81b      	bhi.n	1fff019e <get_cm3_clk+0xb2>
		return 0;

	vco_div = 0x1 << reg_val;

	return ((tbg_N * ref) << 2)/(tbg_M * vco_div);
1fff0166:	4348      	muls	r0, r1
			  ((reg_val >> 1) & 0x1FFUL) : ((reg_val >> 17) & 0x1FFUL);
	}
	if (reg_val > 7)
		return 0;

	vco_div = 0x1 << reg_val;
1fff0168:	2101      	movs	r1, #1
1fff016a:	fa01 f202 	lsl.w	r2, r1, r2

	return ((tbg_N * ref) << 2)/(tbg_M * vco_div);
1fff016e:	4353      	muls	r3, r2
1fff0170:	0080      	lsls	r0, r0, #2
1fff0172:	fbb0 f0f3 	udiv	r0, r0, r3
	/* 2. get TSECM TBG select */
	tbg_typ = (readl(MVEBU_NORTH_CLOCK_TBG_SELECT_REG) >> 8) & 0x3;

	/* 3. get TBG clock */
	tbg = get_tbg_clk(tbg_typ);
	if (tbg == 0)
1fff0176:	b1a8      	cbz	r0, 1fff01a4 <get_cm3_clk+0xb8>
		return 0;

	/* 4. get CM3 clk dividers */
	cm3_pre_scl1 = (readl(MVEBU_NORTH_CLOCK_DIVIDER_SELECT1_REG) >> 15) & 0x7;
1fff0178:	4b11      	ldr	r3, [pc, #68]	; (1fff01c0 <get_cm3_clk+0xd4>)
1fff017a:	681c      	ldr	r4, [r3, #0]
1fff017c:	f3c4 34c2 	ubfx	r4, r4, #15, #3
	if (cm3_pre_scl1 == 7 || cm3_pre_scl1 == 0)
1fff0180:	2c07      	cmp	r4, #7
1fff0182:	d00c      	beq.n	1fff019e <get_cm3_clk+0xb2>
1fff0184:	b14c      	cbz	r4, 1fff019a <get_cm3_clk+0xae>
		return 0; /* divider value error */

	cm3_pre_scl2 = (readl(MVEBU_NORTH_CLOCK_DIVIDER_SELECT1_REG) >> 12) & 0x7;
1fff0186:	6819      	ldr	r1, [r3, #0]
1fff0188:	f3c1 3102 	ubfx	r1, r1, #12, #3
	if (cm3_pre_scl2 == 7 || cm3_pre_scl2 == 0)
1fff018c:	2907      	cmp	r1, #7
1fff018e:	d006      	beq.n	1fff019e <get_cm3_clk+0xb2>
1fff0190:	b139      	cbz	r1, 1fff01a2 <get_cm3_clk+0xb6>
		return 0; /* divider value error */

	return tbg/(cm3_pre_scl1 * cm3_pre_scl2);
1fff0192:	4361      	muls	r1, r4
1fff0194:	fbb0 f0f1 	udiv	r0, r0, r1
1fff0198:	bd10      	pop	{r4, pc}
		return 0;

	/* 4. get CM3 clk dividers */
	cm3_pre_scl1 = (readl(MVEBU_NORTH_CLOCK_DIVIDER_SELECT1_REG) >> 15) & 0x7;
	if (cm3_pre_scl1 == 7 || cm3_pre_scl1 == 0)
		return 0; /* divider value error */
1fff019a:	4620      	mov	r0, r4
1fff019c:	bd10      	pop	{r4, pc}

	cm3_pre_scl2 = (readl(MVEBU_NORTH_CLOCK_DIVIDER_SELECT1_REG) >> 12) & 0x7;
	if (cm3_pre_scl2 == 7 || cm3_pre_scl2 == 0)
		return 0; /* divider value error */
1fff019e:	2000      	movs	r0, #0
1fff01a0:	bd10      	pop	{r4, pc}
1fff01a2:	4608      	mov	r0, r1

	return tbg/(cm3_pre_scl1 * cm3_pre_scl2);
}
1fff01a4:	bd10      	pop	{r4, pc}
1fff01a6:	bf00      	nop
1fff01a8:	c0013010 	andgt	r3, r1, r0, lsl r0
1fff01ac:	c0013000 	andgt	r3, r1, r0
1fff01b0:	c0013220 	andgt	r3, r1, r0, lsr #4
1fff01b4:	c0013204 	andgt	r3, r1, r4, lsl #4
1fff01b8:	c0013208 	andgt	r3, r1, r8, lsl #4
1fff01bc:	c0013230 	andgt	r3, r1, r0, lsr r2
1fff01c0:	c0013008 	andgt	r3, r1, r8

1fff01c4 <wait_ns>:
  *
  * return: None
 ***************************************************************************************************/
void wait_ns(u32 wait_ns)
{
	u32 loop = wait_ns / loop_ns;
1fff01c4:	4b03      	ldr	r3, [pc, #12]	; (1fff01d4 <wait_ns+0x10>)
1fff01c6:	681b      	ldr	r3, [r3, #0]
1fff01c8:	fbb0 f3f3 	udiv	r3, r0, r3

	asm volatile("0:" "subs %[count], 1;" "bne 0b;" :[count]"+r"(loop));
1fff01cc:	3b01      	subs	r3, #1
1fff01ce:	d1fd      	bne.n	1fff01cc <wait_ns+0x8>
}
1fff01d0:	4770      	bx	lr
1fff01d2:	bf00      	nop
1fff01d4:	1fff0708 	svcne	0x00ff0708

1fff01d8 <clock_init>:
  * clock_init
  *
  * return: None
 ***************************************************************************************************/
u32 clock_init(void)
{
1fff01d8:	b508      	push	{r3, lr}
	u32 cm3_clk = get_cm3_clk();
1fff01da:	f7ff ff87 	bl	1fff00ec <get_cm3_clk>
	u32 status = ERR_BAD_CONFIGURATION;

	if (cm3_clk != 0) {
1fff01de:	b158      	cbz	r0, 1fff01f8 <clock_init+0x20>
		clk_ns = 1000 / cm3_clk;
1fff01e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1fff01e4:	fbb3 f0f0 	udiv	r0, r3, r0
1fff01e8:	4b04      	ldr	r3, [pc, #16]	; (1fff01fc <clock_init+0x24>)
		loop_ns = clk_ns / CYCLES_PER_LOOP;
1fff01ea:	2203      	movs	r2, #3
{
	u32 cm3_clk = get_cm3_clk();
	u32 status = ERR_BAD_CONFIGURATION;

	if (cm3_clk != 0) {
		clk_ns = 1000 / cm3_clk;
1fff01ec:	6058      	str	r0, [r3, #4]
		loop_ns = clk_ns / CYCLES_PER_LOOP;
1fff01ee:	fbb0 f0f2 	udiv	r0, r0, r2
1fff01f2:	6018      	str	r0, [r3, #0]
		status = NO_ERROR;
1fff01f4:	2000      	movs	r0, #0
1fff01f6:	bd08      	pop	{r3, pc}
  * return: None
 ***************************************************************************************************/
u32 clock_init(void)
{
	u32 cm3_clk = get_cm3_clk();
	u32 status = ERR_BAD_CONFIGURATION;
1fff01f8:	2003      	movs	r0, #3
		loop_ns = clk_ns / CYCLES_PER_LOOP;
		status = NO_ERROR;
	}

	return status;
}
1fff01fa:	bd08      	pop	{r3, pc}
1fff01fc:	1fff0708 	svcne	0x00ff0708

1fff0200 <efuse_read_row_no_ecc>:
 * efuse_read_row_no_ecc
 *
 * return: status
 ***************************************************************************************************/
static u32 efuse_read_row_no_ecc(u32 row, u32 *msb, u32 *lsb)
{
1fff0200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1fff0202:	4604      	mov	r4, r0
1fff0204:	4615      	mov	r5, r2
	u32	regval;
	u32	timeout;
	u32	status;

	if (msb == NULL || lsb == NULL)
1fff0206:	460f      	mov	r7, r1
1fff0208:	2900      	cmp	r1, #0
1fff020a:	d040      	beq.n	1fff028e <efuse_read_row_no_ecc+0x8e>
1fff020c:	2a00      	cmp	r2, #0
1fff020e:	d040      	beq.n	1fff0292 <efuse_read_row_no_ecc+0x92>
		return ERR_INVALID_ARGUMENT;

	/* Set PRDT=0 to clear RD_DONE and any other SD OTP read status */
	regval = EFUSE_CTRL_DEF_VAL | EFUSE_CTR_CSB_BIT;
	writel(regval, EFUSE_CONTROL_REG);
1fff0210:	4e21      	ldr	r6, [pc, #132]	; (1fff0298 <efuse_read_row_no_ecc+0x98>)
1fff0212:	2304      	movs	r3, #4
1fff0214:	6033      	str	r3, [r6, #0]

	wait_ns(EFUSE_POWER_UP_TIME_NS);
1fff0216:	f44f 7096 	mov.w	r0, #300	; 0x12c
1fff021a:	f7ff ffd3 	bl	1fff01c4 <wait_ns>

	/* Set PRDT=1, Enter Access Mode */
	regval = readl(EFUSE_CONTROL_REG);
1fff021e:	6833      	ldr	r3, [r6, #0]
	regval &= ~EFUSE_CTR_CSB_BIT;
	regval |= EFUSE_CTR_PGM_B_BIT | EFUSE_CTR_LOAD_BIT;
	writel(regval, EFUSE_CONTROL_REG);

	/* set ROW & COL address */
	regval = EFUSE_RW_ROW(row) | EFUSE_RW_COL(0);
1fff0220:	f004 043f 	and.w	r4, r4, #63	; 0x3f

	wait_ns(EFUSE_POWER_UP_TIME_NS);

	/* Set PRDT=1, Enter Access Mode */
	regval = readl(EFUSE_CONTROL_REG);
	regval |= EFUSE_CTR_PRDT_BIT;
1fff0224:	f043 0308 	orr.w	r3, r3, #8
	writel(regval, EFUSE_CONTROL_REG);
1fff0228:	6033      	str	r3, [r6, #0]

	/* Set CSB = 0, PGM_B = 1, LOAD = 1, Enter Read Mode */
	regval = readl(EFUSE_CONTROL_REG);
1fff022a:	6833      	ldr	r3, [r6, #0]
	regval &= ~EFUSE_CTR_CSB_BIT;
	regval |= EFUSE_CTR_PGM_B_BIT | EFUSE_CTR_LOAD_BIT;
	writel(regval, EFUSE_CONTROL_REG);

	/* set ROW & COL address */
	regval = EFUSE_RW_ROW(row) | EFUSE_RW_COL(0);
1fff022c:	01e4      	lsls	r4, r4, #7
	regval |= EFUSE_CTR_PRDT_BIT;
	writel(regval, EFUSE_CONTROL_REG);

	/* Set CSB = 0, PGM_B = 1, LOAD = 1, Enter Read Mode */
	regval = readl(EFUSE_CONTROL_REG);
	regval &= ~EFUSE_CTR_CSB_BIT;
1fff022e:	f023 0304 	bic.w	r3, r3, #4
	regval |= EFUSE_CTR_PGM_B_BIT | EFUSE_CTR_LOAD_BIT;
1fff0232:	f043 0303 	orr.w	r3, r3, #3
	writel(regval, EFUSE_CONTROL_REG);
1fff0236:	6033      	str	r3, [r6, #0]

	/* set ROW & COL address */
	regval = EFUSE_RW_ROW(row) | EFUSE_RW_COL(0);
	writel(regval, EFUSE_READ_WRITE_REG);
1fff0238:	4b18      	ldr	r3, [pc, #96]	; (1fff029c <efuse_read_row_no_ecc+0x9c>)

	/* wait minimum 4ns */
	wait_ns(EFUSE_ROW_COL_SET_TIME_NS);
1fff023a:	f44f 7096 	mov.w	r0, #300	; 0x12c
	regval |= EFUSE_CTR_PGM_B_BIT | EFUSE_CTR_LOAD_BIT;
	writel(regval, EFUSE_CONTROL_REG);

	/* set ROW & COL address */
	regval = EFUSE_RW_ROW(row) | EFUSE_RW_COL(0);
	writel(regval, EFUSE_READ_WRITE_REG);
1fff023e:	601c      	str	r4, [r3, #0]

	/* wait minimum 4ns */
	wait_ns(EFUSE_ROW_COL_SET_TIME_NS);
1fff0240:	f7ff ffc0 	bl	1fff01c4 <wait_ns>

	/* Toggle SCLK = 1 for minimum 165ns */
	regval = readl(EFUSE_CONTROL_REG);
1fff0244:	6833      	ldr	r3, [r6, #0]
	regval |= EFUSE_CTRL_SCLK_BIT;
	writel(regval, EFUSE_CONTROL_REG);

	wait_ns(EFUSE_READ_SCLK_PULSE_WIDTH_NS);
1fff0246:	20c8      	movs	r0, #200	; 0xc8
	/* wait minimum 4ns */
	wait_ns(EFUSE_ROW_COL_SET_TIME_NS);

	/* Toggle SCLK = 1 for minimum 165ns */
	regval = readl(EFUSE_CONTROL_REG);
	regval |= EFUSE_CTRL_SCLK_BIT;
1fff0248:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	writel(regval, EFUSE_CONTROL_REG);
1fff024c:	6033      	str	r3, [r6, #0]

	wait_ns(EFUSE_READ_SCLK_PULSE_WIDTH_NS);
1fff024e:	f7ff ffb9 	bl	1fff01c4 <wait_ns>

	regval = readl(EFUSE_CONTROL_REG);
1fff0252:	6833      	ldr	r3, [r6, #0]

	/* Set CSB = 1, LOAD = 0 to finish read cycle */
	regval = readl(EFUSE_CONTROL_REG);
	regval |= EFUSE_CTR_CSB_BIT;
	regval &= ~EFUSE_CTR_LOAD_BIT;
	writel(regval, EFUSE_CONTROL_REG);
1fff0254:	4c12      	ldr	r4, [pc, #72]	; (1fff02a0 <efuse_read_row_no_ecc+0xa0>)
	writel(regval, EFUSE_CONTROL_REG);

	wait_ns(EFUSE_READ_SCLK_PULSE_WIDTH_NS);

	regval = readl(EFUSE_CONTROL_REG);
	regval &= ~EFUSE_CTRL_SCLK_BIT;
1fff0256:	f423 7380 	bic.w	r3, r3, #256	; 0x100
	writel(regval, EFUSE_CONTROL_REG);
1fff025a:	6033      	str	r3, [r6, #0]

	/* Set CSB = 1, LOAD = 0 to finish read cycle */
	regval = readl(EFUSE_CONTROL_REG);
1fff025c:	6833      	ldr	r3, [r6, #0]
	regval |= EFUSE_CTR_CSB_BIT;
1fff025e:	f043 0304 	orr.w	r3, r3, #4
	regval &= ~EFUSE_CTR_LOAD_BIT;
1fff0262:	f023 0302 	bic.w	r3, r3, #2
	writel(regval, EFUSE_CONTROL_REG);
1fff0266:	6033      	str	r3, [r6, #0]

	/* If RD_DONE then OK to read row value */
	for (timeout = 0, status = ERR_TIMEOUT;
	     timeout < EFUSE_READ_TIMEOUT_LOOPS; timeout++) {
		regval = readl(EFUSE_AUXILIARY_REG);
1fff0268:	3610      	adds	r6, #16
1fff026a:	6833      	ldr	r3, [r6, #0]
		regval &= EFUSE_AUX_RD_DONE_BIT;
		if (regval) {
1fff026c:	2b00      	cmp	r3, #0
1fff026e:	da07      	bge.n	1fff0280 <efuse_read_row_no_ecc+0x80>
			status = NO_ERROR;
			*lsb = readl(EFUSE_DATA0_REG);
1fff0270:	4b0c      	ldr	r3, [pc, #48]	; (1fff02a4 <efuse_read_row_no_ecc+0xa4>)
	for (timeout = 0, status = ERR_TIMEOUT;
	     timeout < EFUSE_READ_TIMEOUT_LOOPS; timeout++) {
		regval = readl(EFUSE_AUXILIARY_REG);
		regval &= EFUSE_AUX_RD_DONE_BIT;
		if (regval) {
			status = NO_ERROR;
1fff0272:	2000      	movs	r0, #0
			*lsb = readl(EFUSE_DATA0_REG);
1fff0274:	681b      	ldr	r3, [r3, #0]
1fff0276:	602b      	str	r3, [r5, #0]
			*msb = readl(EFUSE_DATA1_REG);
1fff0278:	4b0b      	ldr	r3, [pc, #44]	; (1fff02a8 <efuse_read_row_no_ecc+0xa8>)
1fff027a:	681b      	ldr	r3, [r3, #0]
1fff027c:	603b      	str	r3, [r7, #0]
			break;
1fff027e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
		wait_ns(EFUSE_READ_LOOP_WAIT_NS);
1fff0280:	2064      	movs	r0, #100	; 0x64
1fff0282:	f7ff ff9f 	bl	1fff01c4 <wait_ns>
	regval |= EFUSE_CTR_CSB_BIT;
	regval &= ~EFUSE_CTR_LOAD_BIT;
	writel(regval, EFUSE_CONTROL_REG);

	/* If RD_DONE then OK to read row value */
	for (timeout = 0, status = ERR_TIMEOUT;
1fff0286:	3c01      	subs	r4, #1
1fff0288:	d1ef      	bne.n	1fff026a <efuse_read_row_no_ecc+0x6a>
1fff028a:	2004      	movs	r0, #4
1fff028c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	u32	regval;
	u32	timeout;
	u32	status;

	if (msb == NULL || lsb == NULL)
		return ERR_INVALID_ARGUMENT;
1fff028e:	2001      	movs	r0, #1
1fff0290:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1fff0292:	2001      	movs	r0, #1
		}
		wait_ns(EFUSE_READ_LOOP_WAIT_NS);
	}

	return status;
}
1fff0294:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1fff0296:	bf00      	nop
1fff0298:	40003430 	andmi	r3, r0, r0, lsr r4
1fff029c:	40003434 	andmi	r3, r0, r4, lsr r4
1fff02a0:	000186a0 	andeq	r8, r1, r0, lsr #13
1fff02a4:	40003438 	andmi	r3, r0, r8, lsr r4
1fff02a8:	4000343c 	andmi	r3, r0, ip, lsr r4

1fff02ac <efuse_read>:
 ***************************************************************************************************/
u32 efuse_read(u32 size, u32 row, u32 offset, u32 *args)
{
	u32	lsb, msb, count;
	u32	status;
	u32	loops = EFUSE_ACCESS_LOOPS(size);
1fff02ac:	2840      	cmp	r0, #64	; 0x40
 * efuse_read
 *
 * return: status
 ***************************************************************************************************/
u32 efuse_read(u32 size, u32 row, u32 offset, u32 *args)
{
1fff02ae:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
1fff02b2:	4604      	mov	r4, r0
1fff02b4:	468a      	mov	sl, r1
1fff02b6:	4615      	mov	r5, r2
1fff02b8:	461e      	mov	r6, r3
	u32	lsb, msb, count;
	u32	status;
	u32	loops = EFUSE_ACCESS_LOOPS(size);
1fff02ba:	bf8c      	ite	hi
1fff02bc:	ea4f 1990 	movhi.w	r9, r0, lsr #6
1fff02c0:	f04f 0901 	movls.w	r9, #1

	if (args == NULL || row >= EFUSE_MAX_ROW || offset > EFUSE_BITS_IN_ROW) {
1fff02c4:	2b00      	cmp	r3, #0
1fff02c6:	d04d      	beq.n	1fff0364 <efuse_read+0xb8>
1fff02c8:	292a      	cmp	r1, #42	; 0x2a
1fff02ca:	d84b      	bhi.n	1fff0364 <efuse_read+0xb8>
1fff02cc:	2a40      	cmp	r2, #64	; 0x40
1fff02ce:	d849      	bhi.n	1fff0364 <efuse_read+0xb8>
1fff02d0:	4698      	mov	r8, r3
1fff02d2:	2700      	movs	r7, #0
		goto rd_error;
	}

	/* read row by row */
	for (count = 0; count < loops; count++) {
		status = efuse_read_row_no_ecc(row + count, &msb, &lsb);
1fff02d4:	eb07 000a 	add.w	r0, r7, sl
1fff02d8:	a901      	add	r1, sp, #4
1fff02da:	466a      	mov	r2, sp
1fff02dc:	f7ff ff90 	bl	1fff0200 <efuse_read_row_no_ecc>
		if (status != NO_ERROR)
1fff02e0:	2800      	cmp	r0, #0
1fff02e2:	d13d      	bne.n	1fff0360 <efuse_read+0xb4>
			goto rd_error;

		args[count * 2]     = lsb;
1fff02e4:	9b00      	ldr	r3, [sp, #0]
		status = ERR_INVALID_ARGUMENT;
		goto rd_error;
	}

	/* read row by row */
	for (count = 0; count < loops; count++) {
1fff02e6:	3701      	adds	r7, #1
		status = efuse_read_row_no_ecc(row + count, &msb, &lsb);
		if (status != NO_ERROR)
			goto rd_error;

		args[count * 2]     = lsb;
1fff02e8:	f8c8 3000 	str.w	r3, [r8]
		args[count * 2 + 1] = msb;
1fff02ec:	9b01      	ldr	r3, [sp, #4]
		status = ERR_INVALID_ARGUMENT;
		goto rd_error;
	}

	/* read row by row */
	for (count = 0; count < loops; count++) {
1fff02ee:	454f      	cmp	r7, r9
		status = efuse_read_row_no_ecc(row + count, &msb, &lsb);
		if (status != NO_ERROR)
			goto rd_error;

		args[count * 2]     = lsb;
		args[count * 2 + 1] = msb;
1fff02f0:	f8c8 3004 	str.w	r3, [r8, #4]
		status = ERR_INVALID_ARGUMENT;
		goto rd_error;
	}

	/* read row by row */
	for (count = 0; count < loops; count++) {
1fff02f4:	f108 0808 	add.w	r8, r8, #8
1fff02f8:	d3ec      	bcc.n	1fff02d4 <efuse_read+0x28>
		args[count * 2]     = lsb;
		args[count * 2 + 1] = msb;
	}

	/* remove noise from filds shorter than full row */
	if (size < EFUSE_BITS_IN_ROW) {
1fff02fa:	2c3f      	cmp	r4, #63	; 0x3f
1fff02fc:	d83c      	bhi.n	1fff0378 <efuse_read+0xcc>
		/* 64-bit right shift */
		if (offset < 32) {
1fff02fe:	2d1f      	cmp	r5, #31
1fff0300:	6873      	ldr	r3, [r6, #4]
1fff0302:	d80c      	bhi.n	1fff031e <efuse_read+0x72>
			args[0] >>= offset;
1fff0304:	6832      	ldr	r2, [r6, #0]
			args[0] |= args[1] << (32 - offset);
1fff0306:	f1c5 0120 	rsb	r1, r5, #32

	/* remove noise from filds shorter than full row */
	if (size < EFUSE_BITS_IN_ROW) {
		/* 64-bit right shift */
		if (offset < 32) {
			args[0] >>= offset;
1fff030a:	fa22 f205 	lsr.w	r2, r2, r5
			args[0] |= args[1] << (32 - offset);
1fff030e:	fa03 f101 	lsl.w	r1, r3, r1
			args[1] >>= offset;
1fff0312:	fa23 f505 	lsr.w	r5, r3, r5
	/* remove noise from filds shorter than full row */
	if (size < EFUSE_BITS_IN_ROW) {
		/* 64-bit right shift */
		if (offset < 32) {
			args[0] >>= offset;
			args[0] |= args[1] << (32 - offset);
1fff0316:	430a      	orrs	r2, r1
1fff0318:	6032      	str	r2, [r6, #0]
			args[1] >>= offset;
1fff031a:	6075      	str	r5, [r6, #4]
1fff031c:	e004      	b.n	1fff0328 <efuse_read+0x7c>
		} else {
			args[0] = args[1] >> (offset - 32);
1fff031e:	3d20      	subs	r5, #32
1fff0320:	fa23 f305 	lsr.w	r3, r3, r5
			args[1] = 0;
1fff0324:	6070      	str	r0, [r6, #4]
		if (offset < 32) {
			args[0] >>= offset;
			args[0] |= args[1] << (32 - offset);
			args[1] >>= offset;
		} else {
			args[0] = args[1] >> (offset - 32);
1fff0326:	6033      	str	r3, [r6, #0]
			args[1] = 0;
		}

		if (size == 1) {
1fff0328:	2c01      	cmp	r4, #1
1fff032a:	d10b      	bne.n	1fff0344 <efuse_read+0x98>
			/* single bit field values are calculated as
			   majority vote between 3 physical bits */
			args[0] &= 0x7;
1fff032c:	6833      	ldr	r3, [r6, #0]
			args[1] = 0;
1fff032e:	2200      	movs	r2, #0
		}

		if (size == 1) {
			/* single bit field values are calculated as
			   majority vote between 3 physical bits */
			args[0] &= 0x7;
1fff0330:	f003 0307 	and.w	r3, r3, #7
			args[1] = 0;
			if (args[0] == 3 || args[0] > 4)
1fff0334:	2b03      	cmp	r3, #3
		}

		if (size == 1) {
			/* single bit field values are calculated as
			   majority vote between 3 physical bits */
			args[0] &= 0x7;
1fff0336:	6033      	str	r3, [r6, #0]
			args[1] = 0;
1fff0338:	6072      	str	r2, [r6, #4]
			if (args[0] == 3 || args[0] > 4)
1fff033a:	d01b      	beq.n	1fff0374 <efuse_read+0xc8>
1fff033c:	2b04      	cmp	r3, #4
1fff033e:	d819      	bhi.n	1fff0374 <efuse_read+0xc8>
				args[0] = 1;
			else
				args[0] = 0;
1fff0340:	6032      	str	r2, [r6, #0]
1fff0342:	e019      	b.n	1fff0378 <efuse_read+0xcc>

		} else if (size <= 32) {
1fff0344:	2c20      	cmp	r4, #32
1fff0346:	d817      	bhi.n	1fff0378 <efuse_read+0xcc>
			args[0] &=  0xFFFFFFFF >> (32 - size);
1fff0348:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1fff034c:	f1c4 0420 	rsb	r4, r4, #32
1fff0350:	fa23 f404 	lsr.w	r4, r3, r4
1fff0354:	6833      	ldr	r3, [r6, #0]
1fff0356:	401c      	ands	r4, r3
			args[1] = 0;
1fff0358:	2300      	movs	r3, #0
				args[0] = 1;
			else
				args[0] = 0;

		} else if (size <= 32) {
			args[0] &=  0xFFFFFFFF >> (32 - size);
1fff035a:	6034      	str	r4, [r6, #0]
			args[1] = 0;
1fff035c:	6073      	str	r3, [r6, #4]
1fff035e:	e00b      	b.n	1fff0378 <efuse_read+0xcc>
		}
	}

rd_error:
	if (status == ERR_INVALID_ARGUMENT)
1fff0360:	2801      	cmp	r0, #1
1fff0362:	d103      	bne.n	1fff036c <efuse_read+0xc0>
		args[0] = MB_STAT_BAD_ARGUMENT;
1fff0364:	2303      	movs	r3, #3
1fff0366:	6033      	str	r3, [r6, #0]
1fff0368:	2001      	movs	r0, #1
1fff036a:	e005      	b.n	1fff0378 <efuse_read+0xcc>
	else if (status == ERR_TIMEOUT)
1fff036c:	2804      	cmp	r0, #4
1fff036e:	d101      	bne.n	1fff0374 <efuse_read+0xc8>
		args[0] = MB_STAT_TIMEOUT;
1fff0370:	2302      	movs	r3, #2
1fff0372:	e000      	b.n	1fff0376 <efuse_read+0xca>
	else if (status != NO_ERROR)
		args[0] = MB_STAT_HW_ERROR;
1fff0374:	2301      	movs	r3, #1
1fff0376:	6033      	str	r3, [r6, #0]

	return status;
}
1fff0378:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}

1fff037c <efuse_write>:
 * efuse_write
 *
 * return: status
 ***************************************************************************************************/
u32 efuse_write(u32 size, u32 row, u32 offset, u32 *args)
{
1fff037c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u32	lsb, msb, count, col;
	u32	status;
	u32	loops = EFUSE_ACCESS_LOOPS(size);
1fff0380:	2840      	cmp	r0, #64	; 0x40
 * efuse_write
 *
 * return: status
 ***************************************************************************************************/
u32 efuse_write(u32 size, u32 row, u32 offset, u32 *args)
{
1fff0382:	b089      	sub	sp, #36	; 0x24
1fff0384:	4604      	mov	r4, r0
1fff0386:	9104      	str	r1, [sp, #16]
1fff0388:	4615      	mov	r5, r2
1fff038a:	461e      	mov	r6, r3
	u32	lsb, msb, count, col;
	u32	status;
	u32	loops = EFUSE_ACCESS_LOOPS(size);
1fff038c:	bf8c      	ite	hi
1fff038e:	ea4f 1b90 	movhi.w	fp, r0, lsr #6
1fff0392:	f04f 0b01 	movls.w	fp, #1
	u32	regval;

	if (args == NULL || row >= EFUSE_MAX_ROW || offset > EFUSE_BITS_IN_ROW) {
1fff0396:	2b00      	cmp	r3, #0
1fff0398:	f000 80f3 	beq.w	1fff0582 <efuse_write+0x206>
1fff039c:	9904      	ldr	r1, [sp, #16]
1fff039e:	292a      	cmp	r1, #42	; 0x2a
1fff03a0:	f200 80ef 	bhi.w	1fff0582 <efuse_write+0x206>
1fff03a4:	2a40      	cmp	r2, #64	; 0x40
1fff03a6:	f200 80ec 	bhi.w	1fff0582 <efuse_write+0x206>
		status = ERR_INVALID_ARGUMENT;
		goto wr_error;
	}

	/* Single bit - requres 2-3 bits programming for majority vote */
	if (size == 1) {
1fff03aa:	2801      	cmp	r0, #1
1fff03ac:	d107      	bne.n	1fff03be <efuse_write+0x42>
		/* expand single bit values to 3 bits for physical efuse field */
		args[0] &= 1;
1fff03ae:	681b      	ldr	r3, [r3, #0]
1fff03b0:	f003 0301 	and.w	r3, r3, #1
		args[0] |= (args[0] << 1) | (args[0] << 2);
1fff03b4:	009a      	lsls	r2, r3, #2
1fff03b6:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
1fff03ba:	4313      	orrs	r3, r2
1fff03bc:	e009      	b.n	1fff03d2 <efuse_write+0x56>
		args[1] = 0;

	} else if (size <= 32) {
1fff03be:	2820      	cmp	r0, #32
1fff03c0:	d80a      	bhi.n	1fff03d8 <efuse_write+0x5c>
		/* cleanup the short field value */
		args[0] &=  0xFFFFFFFF >> (32 - size);
1fff03c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1fff03c6:	f1c0 0320 	rsb	r3, r0, #32
1fff03ca:	fa22 f303 	lsr.w	r3, r2, r3
1fff03ce:	6832      	ldr	r2, [r6, #0]
1fff03d0:	4013      	ands	r3, r2
1fff03d2:	6033      	str	r3, [r6, #0]
		args[1] = 0;
1fff03d4:	2300      	movs	r3, #0
1fff03d6:	6073      	str	r3, [r6, #4]
		 writel(EFUSE_MASTER_OTP_PRG_DIS, EFUSE_MASTER_OTP_CTRL_REG);

	} else {		/* Enable */

		/* Power up SD OTP */
		writel(0x0, EFUSE_CONTROL_REG);
1fff03d8:	4f72      	ldr	r7, [pc, #456]	; (1fff05a4 <efuse_write+0x228>)
1fff03da:	2300      	movs	r3, #0
1fff03dc:	603b      	str	r3, [r7, #0]
		wait_ns(EFUSE_POWER_UP_TIME_NS);
1fff03de:	f44f 7096 	mov.w	r0, #300	; 0x12c
1fff03e2:	f7ff feef 	bl	1fff01c4 <wait_ns>

		/* Set Master OTP Program Enable
		   Applies to both Security Control OTP & Security Data OTP.
		 */
		writel(EFUSE_MASTER_OTP_PRG_EN, EFUSE_MASTER_OTP_CTRL_REG);
1fff03e6:	4b70      	ldr	r3, [pc, #448]	; (1fff05a8 <efuse_write+0x22c>)
1fff03e8:	225a      	movs	r2, #90	; 0x5a
1fff03ea:	601a      	str	r2, [r3, #0]

		/* Turn on the clock and run sequence ”1011000110” 6 times */
		writel(EFUSE_CTRL_SCLK_BIT, EFUSE_CONTROL_REG);
1fff03ec:	f44f 7280 	mov.w	r2, #256	; 0x100
1fff03f0:	603a      	str	r2, [r7, #0]
1fff03f2:	f04f 0e06 	mov.w	lr, #6
#include "mbox.h"
#include "efuse.h"

static inline void seq1(void)
{
	writel(0x0300, EFUSE_CONTROL_REG);
1fff03f6:	f44f 7040 	mov.w	r0, #768	; 0x300
	writel(0x0700, EFUSE_CONTROL_REG);
1fff03fa:	f44f 61e0 	mov.w	r1, #1792	; 0x700
}

static inline void seq0(void)
{
	writel(0x0100, EFUSE_CONTROL_REG);
	writel(0x0500, EFUSE_CONTROL_REG);
1fff03fe:	f44f 63a0 	mov.w	r3, #1280	; 0x500
		 */
		writel(EFUSE_MASTER_OTP_PRG_EN, EFUSE_MASTER_OTP_CTRL_REG);

		/* Turn on the clock and run sequence ”1011000110” 6 times */
		writel(EFUSE_CTRL_SCLK_BIT, EFUSE_CONTROL_REG);
		for (n = 0; n < 6; n++) {
1fff0402:	f1be 0e01 	subs.w	lr, lr, #1
#include "mbox.h"
#include "efuse.h"

static inline void seq1(void)
{
	writel(0x0300, EFUSE_CONTROL_REG);
1fff0406:	6038      	str	r0, [r7, #0]
	writel(0x0700, EFUSE_CONTROL_REG);
1fff0408:	6039      	str	r1, [r7, #0]
}

static inline void seq0(void)
{
	writel(0x0100, EFUSE_CONTROL_REG);
1fff040a:	603a      	str	r2, [r7, #0]
	writel(0x0500, EFUSE_CONTROL_REG);
1fff040c:	603b      	str	r3, [r7, #0]
#include "mbox.h"
#include "efuse.h"

static inline void seq1(void)
{
	writel(0x0300, EFUSE_CONTROL_REG);
1fff040e:	6038      	str	r0, [r7, #0]
	writel(0x0700, EFUSE_CONTROL_REG);
1fff0410:	6039      	str	r1, [r7, #0]
#include "mbox.h"
#include "efuse.h"

static inline void seq1(void)
{
	writel(0x0300, EFUSE_CONTROL_REG);
1fff0412:	6038      	str	r0, [r7, #0]
	writel(0x0700, EFUSE_CONTROL_REG);
1fff0414:	6039      	str	r1, [r7, #0]
}

static inline void seq0(void)
{
	writel(0x0100, EFUSE_CONTROL_REG);
1fff0416:	603a      	str	r2, [r7, #0]
	writel(0x0500, EFUSE_CONTROL_REG);
1fff0418:	603b      	str	r3, [r7, #0]
	writel(0x0700, EFUSE_CONTROL_REG);
}

static inline void seq0(void)
{
	writel(0x0100, EFUSE_CONTROL_REG);
1fff041a:	603a      	str	r2, [r7, #0]
	writel(0x0500, EFUSE_CONTROL_REG);
1fff041c:	603b      	str	r3, [r7, #0]
	writel(0x0700, EFUSE_CONTROL_REG);
}

static inline void seq0(void)
{
	writel(0x0100, EFUSE_CONTROL_REG);
1fff041e:	603a      	str	r2, [r7, #0]
	writel(0x0500, EFUSE_CONTROL_REG);
1fff0420:	603b      	str	r3, [r7, #0]
#include "mbox.h"
#include "efuse.h"

static inline void seq1(void)
{
	writel(0x0300, EFUSE_CONTROL_REG);
1fff0422:	6038      	str	r0, [r7, #0]
	writel(0x0700, EFUSE_CONTROL_REG);
1fff0424:	6039      	str	r1, [r7, #0]
#include "mbox.h"
#include "efuse.h"

static inline void seq1(void)
{
	writel(0x0300, EFUSE_CONTROL_REG);
1fff0426:	6038      	str	r0, [r7, #0]
	writel(0x0700, EFUSE_CONTROL_REG);
1fff0428:	6039      	str	r1, [r7, #0]
}

static inline void seq0(void)
{
	writel(0x0100, EFUSE_CONTROL_REG);
1fff042a:	603a      	str	r2, [r7, #0]
	writel(0x0500, EFUSE_CONTROL_REG);
1fff042c:	603b      	str	r3, [r7, #0]
		 */
		writel(EFUSE_MASTER_OTP_PRG_EN, EFUSE_MASTER_OTP_CTRL_REG);

		/* Turn on the clock and run sequence ”1011000110” 6 times */
		writel(EFUSE_CTRL_SCLK_BIT, EFUSE_CONTROL_REG);
		for (n = 0; n < 6; n++) {
1fff042e:	d1e8      	bne.n	1fff0402 <efuse_write+0x86>
			seq1();
			seq1();
			seq0();
		}
		/* Program Sequence Done */
		writel(0x0, EFUSE_CONTROL_REG);
1fff0430:	4b5c      	ldr	r3, [pc, #368]	; (1fff05a4 <efuse_write+0x228>)
1fff0432:	4f5e      	ldr	r7, [pc, #376]	; (1fff05ac <efuse_write+0x230>)
		/* Check for CODE MATCH */
		for (timeout = 0, status = ERR_TIMEOUT;
		     timeout < EFUSE_CODE_MATCH_TIMEOUT_LOOPS; timeout++) {
			regval = readl(EFUSE_AUXILIARY_REG);
1fff0434:	f8df 817c 	ldr.w	r8, [pc, #380]	; 1fff05b4 <efuse_write+0x238>
			seq1();
			seq1();
			seq0();
		}
		/* Program Sequence Done */
		writel(0x0, EFUSE_CONTROL_REG);
1fff0438:	f8c3 e000 	str.w	lr, [r3]
		/* Check for CODE MATCH */
		for (timeout = 0, status = ERR_TIMEOUT;
		     timeout < EFUSE_CODE_MATCH_TIMEOUT_LOOPS; timeout++) {
			regval = readl(EFUSE_AUXILIARY_REG);
1fff043c:	f8d8 3000 	ldr.w	r3, [r8]
			regval &= EFUSE_AUX_CODE_MATCH_BIT;
			if (regval) {
1fff0440:	0098      	lsls	r0, r3, #2
1fff0442:	d405      	bmi.n	1fff0450 <efuse_write+0xd4>
				status = NO_ERROR;
				break;
			}
			wait_ns(EFUSE_CODE_MATCH_LOOP_WAIT_NS);
1fff0444:	2064      	movs	r0, #100	; 0x64
1fff0446:	f7ff febd 	bl	1fff01c4 <wait_ns>
			seq0();
		}
		/* Program Sequence Done */
		writel(0x0, EFUSE_CONTROL_REG);
		/* Check for CODE MATCH */
		for (timeout = 0, status = ERR_TIMEOUT;
1fff044a:	3f01      	subs	r7, #1
1fff044c:	d1f6      	bne.n	1fff043c <efuse_write+0xc0>
1fff044e:	e09e      	b.n	1fff058e <efuse_write+0x212>
		/* Burn the eFuse row bit by bit (bit is column) */
		for (col = 0; col < EFUSE_BITS_IN_ROW; col++) {
			if (args[count * 2 + col / 32] & 0x1) {
				/* set ROW & COL address */
				regval = EFUSE_RW_ROW(row + count) | EFUSE_RW_COL(col);
				writel(regval, EFUSE_READ_WRITE_REG);
1fff0450:	4623      	mov	r3, r4
		status = efuse_read_row_no_ecc(row + count, &msb, &lsb);
		if (status != NO_ERROR)
			goto wr_error;

		/* Set PRDT=1, Enter Access Mode */
		regval = readl(EFUSE_CONTROL_REG);
1fff0452:	4f54      	ldr	r7, [pc, #336]	; (1fff05a4 <efuse_write+0x228>)
		/* Check for CODE MATCH */
		for (timeout = 0, status = ERR_TIMEOUT;
		     timeout < EFUSE_CODE_MATCH_TIMEOUT_LOOPS; timeout++) {
			regval = readl(EFUSE_AUXILIARY_REG);
			regval &= EFUSE_AUX_CODE_MATCH_BIT;
			if (regval) {
1fff0454:	f04f 0900 	mov.w	r9, #0
		/* Burn the eFuse row bit by bit (bit is column) */
		for (col = 0; col < EFUSE_BITS_IN_ROW; col++) {
			if (args[count * 2 + col / 32] & 0x1) {
				/* set ROW & COL address */
				regval = EFUSE_RW_ROW(row + count) | EFUSE_RW_COL(col);
				writel(regval, EFUSE_READ_WRITE_REG);
1fff0458:	4634      	mov	r4, r6
1fff045a:	4698      	mov	r8, r3
	if (status != NO_ERROR)
		goto wr_error;

	for (count = 0; count < loops; count++) {
		/* Each eFuse row should be read before programming */
		status = efuse_read_row_no_ecc(row + count, &msb, &lsb);
1fff045c:	9b04      	ldr	r3, [sp, #16]
1fff045e:	a907      	add	r1, sp, #28
1fff0460:	eb09 0a03 	add.w	sl, r9, r3
1fff0464:	4650      	mov	r0, sl
1fff0466:	aa06      	add	r2, sp, #24
1fff0468:	f7ff feca 	bl	1fff0200 <efuse_read_row_no_ecc>
		if (status != NO_ERROR)
1fff046c:	4603      	mov	r3, r0
1fff046e:	2800      	cmp	r0, #0
1fff0470:	f040 8085 	bne.w	1fff057e <efuse_write+0x202>
			goto wr_error;

		/* Set PRDT=1, Enter Access Mode */
		regval = readl(EFUSE_CONTROL_REG);
1fff0474:	683a      	ldr	r2, [r7, #0]
		regval = readl(EFUSE_CONTROL_REG);
		regval &= ~(EFUSE_CTR_CSB_BIT | EFUSE_CTR_PGM_B_BIT | EFUSE_CTR_LOAD_BIT);
		writel(regval, EFUSE_CONTROL_REG);

		/* Wait minimum 300ns */
		wait_ns(EFUSE_WRITE_MODE_UP_TIME_NS);
1fff0476:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
		if (status != NO_ERROR)
			goto wr_error;

		/* Set PRDT=1, Enter Access Mode */
		regval = readl(EFUSE_CONTROL_REG);
		regval |= EFUSE_CTR_PRDT_BIT;
1fff047a:	f042 0208 	orr.w	r2, r2, #8
		writel(regval, EFUSE_CONTROL_REG);
1fff047e:	603a      	str	r2, [r7, #0]

		/* Set CSB = 0, PGM_B = 0, LOAD = 0, Enter User Data Write Mode */
		regval = readl(EFUSE_CONTROL_REG);
1fff0480:	683a      	ldr	r2, [r7, #0]
		regval &= ~(EFUSE_CTR_CSB_BIT | EFUSE_CTR_PGM_B_BIT | EFUSE_CTR_LOAD_BIT);
1fff0482:	f022 0207 	bic.w	r2, r2, #7
		writel(regval, EFUSE_CONTROL_REG);
1fff0486:	603a      	str	r2, [r7, #0]

		/* Wait minimum 300ns */
		wait_ns(EFUSE_WRITE_MODE_UP_TIME_NS);
1fff0488:	9301      	str	r3, [sp, #4]
1fff048a:	f7ff fe9b 	bl	1fff01c4 <wait_ns>

		/* Fields smaller than entire row should be correctly positioned */
		if (size < EFUSE_BITS_IN_ROW) {
1fff048e:	f1b8 0f3f 	cmp.w	r8, #63	; 0x3f
1fff0492:	9b01      	ldr	r3, [sp, #4]
1fff0494:	d815      	bhi.n	1fff04c2 <efuse_write+0x146>
			/* 64-bit left shift */
			if (offset < 32) {
1fff0496:	2d1f      	cmp	r5, #31
1fff0498:	6832      	ldr	r2, [r6, #0]
1fff049a:	d80c      	bhi.n	1fff04b6 <efuse_write+0x13a>
				args[1] <<= offset;
1fff049c:	6871      	ldr	r1, [r6, #4]
				args[1] |= args[0] >> (32 - offset);
1fff049e:	f1c5 0020 	rsb	r0, r5, #32
1fff04a2:	fa22 f000 	lsr.w	r0, r2, r0

		/* Fields smaller than entire row should be correctly positioned */
		if (size < EFUSE_BITS_IN_ROW) {
			/* 64-bit left shift */
			if (offset < 32) {
				args[1] <<= offset;
1fff04a6:	fa01 f105 	lsl.w	r1, r1, r5
				args[1] |= args[0] >> (32 - offset);
				args[0] <<= offset;
1fff04aa:	fa02 f205 	lsl.w	r2, r2, r5
		/* Fields smaller than entire row should be correctly positioned */
		if (size < EFUSE_BITS_IN_ROW) {
			/* 64-bit left shift */
			if (offset < 32) {
				args[1] <<= offset;
				args[1] |= args[0] >> (32 - offset);
1fff04ae:	4301      	orrs	r1, r0
1fff04b0:	6071      	str	r1, [r6, #4]
				args[0] <<= offset;
1fff04b2:	6032      	str	r2, [r6, #0]
1fff04b4:	e005      	b.n	1fff04c2 <efuse_write+0x146>
			} else {
				args[1] = args[0] << (offset - 32);
1fff04b6:	f1a5 0120 	sub.w	r1, r5, #32
1fff04ba:	fa02 f201 	lsl.w	r2, r2, r1
				args[0] = 0;
1fff04be:	6033      	str	r3, [r6, #0]
			if (offset < 32) {
				args[1] <<= offset;
				args[1] |= args[0] >> (32 - offset);
				args[0] <<= offset;
			} else {
				args[1] = args[0] << (offset - 32);
1fff04c0:	6072      	str	r2, [r6, #4]
				args[0] = 0;
			}
		}

		/* Combile eFuse old values with new ones */
		args[count * 2]     |= lsb;
1fff04c2:	6821      	ldr	r1, [r4, #0]
1fff04c4:	9a06      	ldr	r2, [sp, #24]

		/* Burn the eFuse row bit by bit (bit is column) */
		for (col = 0; col < EFUSE_BITS_IN_ROW; col++) {
			if (args[count * 2 + col / 32] & 0x1) {
				/* set ROW & COL address */
				regval = EFUSE_RW_ROW(row + count) | EFUSE_RW_COL(col);
1fff04c6:	f00a 0a3f 	and.w	sl, sl, #63	; 0x3f
				args[0] = 0;
			}
		}

		/* Combile eFuse old values with new ones */
		args[count * 2]     |= lsb;
1fff04ca:	430a      	orrs	r2, r1
1fff04cc:	6022      	str	r2, [r4, #0]
		args[count * 2 + 1] |= msb;
1fff04ce:	6861      	ldr	r1, [r4, #4]
1fff04d0:	9a07      	ldr	r2, [sp, #28]

		/* Burn the eFuse row bit by bit (bit is column) */
		for (col = 0; col < EFUSE_BITS_IN_ROW; col++) {
			if (args[count * 2 + col / 32] & 0x1) {
1fff04d2:	ea4f 0c49 	mov.w	ip, r9, lsl #1
			}
		}

		/* Combile eFuse old values with new ones */
		args[count * 2]     |= lsb;
		args[count * 2 + 1] |= msb;
1fff04d6:	430a      	orrs	r2, r1

		/* Burn the eFuse row bit by bit (bit is column) */
		for (col = 0; col < EFUSE_BITS_IN_ROW; col++) {
			if (args[count * 2 + col / 32] & 0x1) {
				/* set ROW & COL address */
				regval = EFUSE_RW_ROW(row + count) | EFUSE_RW_COL(col);
1fff04d8:	ea4f 11ca 	mov.w	r1, sl, lsl #7
			}
		}

		/* Combile eFuse old values with new ones */
		args[count * 2]     |= lsb;
		args[count * 2 + 1] |= msb;
1fff04dc:	6062      	str	r2, [r4, #4]

		/* Burn the eFuse row bit by bit (bit is column) */
		for (col = 0; col < EFUSE_BITS_IN_ROW; col++) {
1fff04de:	f8cd 8014 	str.w	r8, [sp, #20]
1fff04e2:	f04f 0a00 	mov.w	sl, #0
1fff04e6:	46a0      	mov	r8, r4
1fff04e8:	465a      	mov	r2, fp
1fff04ea:	4664      	mov	r4, ip
1fff04ec:	46ac      	mov	ip, r5
1fff04ee:	460d      	mov	r5, r1
			if (args[count * 2 + col / 32] & 0x1) {
1fff04f0:	eb04 1b5a 	add.w	fp, r4, sl, lsr #5
1fff04f4:	f856 002b 	ldr.w	r0, [r6, fp, lsl #2]
1fff04f8:	07c1      	lsls	r1, r0, #31
1fff04fa:	d517      	bpl.n	1fff052c <efuse_write+0x1b0>
				/* set ROW & COL address */
				regval = EFUSE_RW_ROW(row + count) | EFUSE_RW_COL(col);
				writel(regval, EFUSE_READ_WRITE_REG);
1fff04fc:	492c      	ldr	r1, [pc, #176]	; (1fff05b0 <efuse_write+0x234>)

		/* Burn the eFuse row bit by bit (bit is column) */
		for (col = 0; col < EFUSE_BITS_IN_ROW; col++) {
			if (args[count * 2 + col / 32] & 0x1) {
				/* set ROW & COL address */
				regval = EFUSE_RW_ROW(row + count) | EFUSE_RW_COL(col);
1fff04fe:	ea4a 0005 	orr.w	r0, sl, r5
				writel(regval, EFUSE_READ_WRITE_REG);
1fff0502:	6008      	str	r0, [r1, #0]

				/* Toggle SCLK = 1 for 11000ns - 13000ns */
				regval = readl(EFUSE_CONTROL_REG);
1fff0504:	6838      	ldr	r0, [r7, #0]
				regval |= EFUSE_CTRL_SCLK_BIT;
1fff0506:	f440 7080 	orr.w	r0, r0, #256	; 0x100
				writel(regval, EFUSE_CONTROL_REG);
1fff050a:	6038      	str	r0, [r7, #0]

				wait_ns(EFUSE_WRITE_SCLK_PULSE_WIDTH_NS);
1fff050c:	f243 20c8 	movw	r0, #13000	; 0x32c8
1fff0510:	9203      	str	r2, [sp, #12]
1fff0512:	9301      	str	r3, [sp, #4]
1fff0514:	f8cd c008 	str.w	ip, [sp, #8]
1fff0518:	f7ff fe54 	bl	1fff01c4 <wait_ns>

				regval = readl(EFUSE_CONTROL_REG);
1fff051c:	6838      	ldr	r0, [r7, #0]
				regval &= ~EFUSE_CTRL_SCLK_BIT;
				writel(regval, EFUSE_CONTROL_REG);
1fff051e:	f8dd c008 	ldr.w	ip, [sp, #8]
				writel(regval, EFUSE_CONTROL_REG);

				wait_ns(EFUSE_WRITE_SCLK_PULSE_WIDTH_NS);

				regval = readl(EFUSE_CONTROL_REG);
				regval &= ~EFUSE_CTRL_SCLK_BIT;
1fff0522:	f420 7080 	bic.w	r0, r0, #256	; 0x100
				writel(regval, EFUSE_CONTROL_REG);
1fff0526:	9b01      	ldr	r3, [sp, #4]
1fff0528:	9a03      	ldr	r2, [sp, #12]
1fff052a:	6038      	str	r0, [r7, #0]
			}

			args[count * 2 + col / 32] >>= 1;
1fff052c:	f856 002b 	ldr.w	r0, [r6, fp, lsl #2]
		/* Combile eFuse old values with new ones */
		args[count * 2]     |= lsb;
		args[count * 2 + 1] |= msb;

		/* Burn the eFuse row bit by bit (bit is column) */
		for (col = 0; col < EFUSE_BITS_IN_ROW; col++) {
1fff0530:	f10a 0a01 	add.w	sl, sl, #1
				regval = readl(EFUSE_CONTROL_REG);
				regval &= ~EFUSE_CTRL_SCLK_BIT;
				writel(regval, EFUSE_CONTROL_REG);
			}

			args[count * 2 + col / 32] >>= 1;
1fff0534:	0840      	lsrs	r0, r0, #1
		/* Combile eFuse old values with new ones */
		args[count * 2]     |= lsb;
		args[count * 2 + 1] |= msb;

		/* Burn the eFuse row bit by bit (bit is column) */
		for (col = 0; col < EFUSE_BITS_IN_ROW; col++) {
1fff0536:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
				regval = readl(EFUSE_CONTROL_REG);
				regval &= ~EFUSE_CTRL_SCLK_BIT;
				writel(regval, EFUSE_CONTROL_REG);
			}

			args[count * 2 + col / 32] >>= 1;
1fff053a:	f846 002b 	str.w	r0, [r6, fp, lsl #2]
		/* Combile eFuse old values with new ones */
		args[count * 2]     |= lsb;
		args[count * 2 + 1] |= msb;

		/* Burn the eFuse row bit by bit (bit is column) */
		for (col = 0; col < EFUSE_BITS_IN_ROW; col++) {
1fff053e:	d1d7      	bne.n	1fff04f0 <efuse_write+0x174>
1fff0540:	4644      	mov	r4, r8
	/* Enable OTP programming */
	status = efuse_write_enable(1);
	if (status != NO_ERROR)
		goto wr_error;

	for (count = 0; count < loops; count++) {
1fff0542:	f109 0901 	add.w	r9, r9, #1
1fff0546:	3408      	adds	r4, #8
1fff0548:	4591      	cmp	r9, r2
1fff054a:	4693      	mov	fp, r2
1fff054c:	f8dd 8014 	ldr.w	r8, [sp, #20]
1fff0550:	4665      	mov	r5, ip
1fff0552:	d383      	bcc.n	1fff045c <efuse_write+0xe0>

/*		wait_ns(EFUSE_WAIT_BETWEEN_ROWS_NS); */
	}

	/* Set CSB = 1, Exit */
	regval = readl(EFUSE_CONTROL_REG);
1fff0554:	4a13      	ldr	r2, [pc, #76]	; (1fff05a4 <efuse_write+0x228>)

		/* Deactivate Program Sequence Code & Burning Circuitry
		   by toggling PROG_SEQ_CODE_CLK
		 */
		 writel(0x0005, EFUSE_CONTROL_REG);
		 writel(0x0405, EFUSE_CONTROL_REG);
1fff0556:	f240 4005 	movw	r0, #1029	; 0x405

/*		wait_ns(EFUSE_WAIT_BETWEEN_ROWS_NS); */
	}

	/* Set CSB = 1, Exit */
	regval = readl(EFUSE_CONTROL_REG);
1fff055a:	6811      	ldr	r1, [r2, #0]
	regval |= EFUSE_CTR_CSB_BIT;
1fff055c:	f041 0104 	orr.w	r1, r1, #4
	writel(regval, EFUSE_CONTROL_REG);
1fff0560:	6011      	str	r1, [r2, #0]

	/* Set PGM_B = 1, LOAD = 0, End Programming Mode */
	regval = readl(EFUSE_CONTROL_REG);
1fff0562:	6811      	ldr	r1, [r2, #0]
	regval &= ~EFUSE_CTR_LOAD_BIT;
1fff0564:	f021 0102 	bic.w	r1, r1, #2
	regval |= EFUSE_CTR_PGM_B_BIT;
1fff0568:	f041 0101 	orr.w	r1, r1, #1
	writel(regval, EFUSE_CONTROL_REG);
1fff056c:	6011      	str	r1, [r2, #0]
	if (enable == 0) {	/* Disable */

		/* Deactivate Program Sequence Code & Burning Circuitry
		   by toggling PROG_SEQ_CODE_CLK
		 */
		 writel(0x0005, EFUSE_CONTROL_REG);
1fff056e:	2105      	movs	r1, #5
1fff0570:	6011      	str	r1, [r2, #0]
		 writel(0x0405, EFUSE_CONTROL_REG);
1fff0572:	6010      	str	r0, [r2, #0]
		 writel(0x0005, EFUSE_CONTROL_REG);
1fff0574:	6011      	str	r1, [r2, #0]

		 /* Unset Master OTP Program Enable
		    Applies to both Security Control OTP & Security Data OTP
		  */
		 writel(EFUSE_MASTER_OTP_PRG_DIS, EFUSE_MASTER_OTP_CTRL_REG);
1fff0576:	2100      	movs	r1, #0
1fff0578:	f8c2 13c4 	str.w	r1, [r2, #964]	; 0x3c4
1fff057c:	e00e      	b.n	1fff059c <efuse_write+0x220>

	/* Disable OTP programming */
	efuse_write_enable(0);

wr_error:
	if (status == ERR_INVALID_ARGUMENT)
1fff057e:	2801      	cmp	r0, #1
1fff0580:	d103      	bne.n	1fff058a <efuse_write+0x20e>
		args[0] = MB_STAT_BAD_ARGUMENT;
1fff0582:	2303      	movs	r3, #3
1fff0584:	6033      	str	r3, [r6, #0]
1fff0586:	2301      	movs	r3, #1
1fff0588:	e008      	b.n	1fff059c <efuse_write+0x220>
	else if (status == ERR_TIMEOUT)
1fff058a:	2804      	cmp	r0, #4
1fff058c:	d103      	bne.n	1fff0596 <efuse_write+0x21a>
		args[0] = MB_STAT_TIMEOUT;
1fff058e:	2302      	movs	r3, #2
1fff0590:	6033      	str	r3, [r6, #0]
1fff0592:	2304      	movs	r3, #4
1fff0594:	e002      	b.n	1fff059c <efuse_write+0x220>
	else if (status != NO_ERROR)
1fff0596:	b108      	cbz	r0, 1fff059c <efuse_write+0x220>
		args[0] = MB_STAT_HW_ERROR;
1fff0598:	2201      	movs	r2, #1
1fff059a:	6032      	str	r2, [r6, #0]

	return status;
}
1fff059c:	4618      	mov	r0, r3
1fff059e:	b009      	add	sp, #36	; 0x24
1fff05a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1fff05a4:	40003430 	andmi	r3, r0, r0, lsr r4
1fff05a8:	400037f4 	strdmi	r3, [r0], -r4
1fff05ac:	000186a0 	andeq	r8, r1, r0, lsr #13
1fff05b0:	40003434 	andmi	r3, r0, r4, lsr r4
1fff05b4:	40003440 	andmi	r3, r0, r0, asr #8

1fff05b8 <cmd_execute>:
  * cmd_execute
  *
  * return: None
 ***************************************************************************************************/
u32 cmd_execute(u32 cmd, u32 *args, u32 *nargs)
{
1fff05b8:	460b      	mov	r3, r1
	   row number, the second argument is the bit offset
	   within the row.
	   For other efuse fild sizes, the first argument
	   defines the row number */

	row = args[0];
1fff05ba:	6809      	ldr	r1, [r1, #0]
  * cmd_execute
  *
  * return: None
 ***************************************************************************************************/
u32 cmd_execute(u32 cmd, u32 *args, u32 *nargs)
{
1fff05bc:	b5f0      	push	{r4, r5, r6, r7, lr}
	   within the row.
	   For other efuse fild sizes, the first argument
	   defines the row number */

	row = args[0];
	if (row > EFUSE_MAX_ROW) {
1fff05be:	292b      	cmp	r1, #43	; 0x2b
  * cmd_execute
  *
  * return: None
 ***************************************************************************************************/
u32 cmd_execute(u32 cmd, u32 *args, u32 *nargs)
{
1fff05c0:	4605      	mov	r5, r0
1fff05c2:	4616      	mov	r6, r2
	   within the row.
	   For other efuse fild sizes, the first argument
	   defines the row number */

	row = args[0];
	if (row > EFUSE_MAX_ROW) {
1fff05c4:	d821      	bhi.n	1fff060a <cmd_execute+0x52>
	u32			size;
	u32			offset;
	u32			*wr_args;

	op = MBOX_OPERATION(cmd);
	opsz = MBOX_OP_SIZE(cmd);
1fff05c6:	f000 070f 	and.w	r7, r0, #15
	if (row > EFUSE_MAX_ROW) {
		args[0] = MB_STAT_BAD_ARGUMENT;
		return ERR_INVALID_ARGUMENT;
	}

	switch (opsz) {
1fff05ca:	1e7a      	subs	r2, r7, #1
1fff05cc:	2a04      	cmp	r2, #4
1fff05ce:	d81c      	bhi.n	1fff060a <cmd_execute+0x52>
1fff05d0:	e8df f002 	tbb	[pc, r2]
1fff05d4:	120d0803 	andne	r0, sp, #196608	; 0x30000
1fff05d8:	685a0016 	ldmdavs	sl, {r1, r2, r4}^
	case MB_OPSZ_BIT:
		size = 1;
		offset = args[1];
		wr_args = args + 2;
1fff05dc:	f103 0408 	add.w	r4, r3, #8
		return ERR_INVALID_ARGUMENT;
	}

	switch (opsz) {
	case MB_OPSZ_BIT:
		size = 1;
1fff05e0:	2001      	movs	r0, #1
		offset = args[1];
		wr_args = args + 2;
		break;
1fff05e2:	e016      	b.n	1fff0612 <cmd_execute+0x5a>

	case MB_OPSZ_BYTE:
		size = 8;
		offset = args[1];
1fff05e4:	685a      	ldr	r2, [r3, #4]
		wr_args = args + 2;
1fff05e6:	f103 0408 	add.w	r4, r3, #8
		offset = args[1];
		wr_args = args + 2;
		break;

	case MB_OPSZ_BYTE:
		size = 8;
1fff05ea:	2008      	movs	r0, #8
		offset = args[1];
		wr_args = args + 2;
		break;
1fff05ec:	e011      	b.n	1fff0612 <cmd_execute+0x5a>

	case MB_OPSZ_WORD:
		size = 32;
		offset = args[1];
1fff05ee:	685a      	ldr	r2, [r3, #4]
		wr_args = args + 2;
1fff05f0:	f103 0408 	add.w	r4, r3, #8
		offset = args[1];
		wr_args = args + 2;
		break;

	case MB_OPSZ_WORD:
		size = 32;
1fff05f4:	2020      	movs	r0, #32
		offset = args[1];
		wr_args = args + 2;
		break;
1fff05f6:	e00c      	b.n	1fff0612 <cmd_execute+0x5a>

	case MB_OPSZ_DWORD:
		size = 64;
		offset = 0;
		wr_args = args + 1;
1fff05f8:	1d1c      	adds	r4, r3, #4
		wr_args = args + 2;
		break;

	case MB_OPSZ_DWORD:
		size = 64;
		offset = 0;
1fff05fa:	2200      	movs	r2, #0
		offset = args[1];
		wr_args = args + 2;
		break;

	case MB_OPSZ_DWORD:
		size = 64;
1fff05fc:	2040      	movs	r0, #64	; 0x40
		offset = 0;
		wr_args = args + 1;
		break;
1fff05fe:	e008      	b.n	1fff0612 <cmd_execute+0x5a>

	case MB_OPSZ_256B:
		size = 256;
		offset = 0;
		wr_args = args + 1;
1fff0600:	1d1c      	adds	r4, r3, #4
		wr_args = args + 1;
		break;

	case MB_OPSZ_256B:
		size = 256;
		offset = 0;
1fff0602:	2200      	movs	r2, #0
		offset = 0;
		wr_args = args + 1;
		break;

	case MB_OPSZ_256B:
		size = 256;
1fff0604:	f44f 7080 	mov.w	r0, #256	; 0x100
		offset = 0;
		wr_args = args + 1;
		break;
1fff0608:	e003      	b.n	1fff0612 <cmd_execute+0x5a>

	default:
		args[0] = MB_STAT_BAD_ARGUMENT;
1fff060a:	2203      	movs	r2, #3
1fff060c:	601a      	str	r2, [r3, #0]
		return ERR_INVALID_ARGUMENT;
1fff060e:	2001      	movs	r0, #1
1fff0610:	bdf0      	pop	{r4, r5, r6, r7, pc}
	u32			row;
	u32			size;
	u32			offset;
	u32			*wr_args;

	op = MBOX_OPERATION(cmd);
1fff0612:	f3c5 2503 	ubfx	r5, r5, #8, #4
		args[0] = MB_STAT_BAD_ARGUMENT;
		return ERR_INVALID_ARGUMENT;
	}

	/* Execute command */
	if (op == MB_OP_WRITE) {
1fff0616:	2d02      	cmp	r5, #2
1fff0618:	d106      	bne.n	1fff0628 <cmd_execute+0x70>
		/* WRITE */
		*nargs = 0;
1fff061a:	2300      	movs	r3, #0
1fff061c:	6033      	str	r3, [r6, #0]
		status = efuse_write(size, row, offset, wr_args);
1fff061e:	4623      	mov	r3, r4
		status = ERR_INVALID_COMMAND;
		args[0] = MB_STAT_BAD_COMMAND;
	}

	return status;
}
1fff0620:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}

	/* Execute command */
	if (op == MB_OP_WRITE) {
		/* WRITE */
		*nargs = 0;
		status = efuse_write(size, row, offset, wr_args);
1fff0624:	f7ff beaa 	b.w	1fff037c <efuse_write>
	} else if (op == MB_OP_READ) {
1fff0628:	2d01      	cmp	r5, #1
1fff062a:	d10d      	bne.n	1fff0648 <cmd_execute+0x90>
		/* READ */
		if (opsz == MB_OPSZ_DWORD)
1fff062c:	2f04      	cmp	r7, #4
1fff062e:	d101      	bne.n	1fff0634 <cmd_execute+0x7c>
			*nargs = 2;
1fff0630:	2402      	movs	r4, #2
1fff0632:	e002      	b.n	1fff063a <cmd_execute+0x82>
		else if (opsz == MB_OPSZ_256B)
1fff0634:	2f05      	cmp	r7, #5
1fff0636:	d102      	bne.n	1fff063e <cmd_execute+0x86>
			*nargs = 8;
1fff0638:	2408      	movs	r4, #8
1fff063a:	6034      	str	r4, [r6, #0]
1fff063c:	e000      	b.n	1fff0640 <cmd_execute+0x88>
		else
			*nargs = 1;
1fff063e:	6035      	str	r5, [r6, #0]
		status = ERR_INVALID_COMMAND;
		args[0] = MB_STAT_BAD_COMMAND;
	}

	return status;
}
1fff0640:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			*nargs = 2;
		else if (opsz == MB_OPSZ_256B)
			*nargs = 8;
		else
			*nargs = 1;
		status = efuse_read(size, row, offset, args);
1fff0644:	f7ff be32 	b.w	1fff02ac <efuse_read>
	} else {
		/* ERROR */
		status = ERR_INVALID_COMMAND;
		args[0] = MB_STAT_BAD_COMMAND;
1fff0648:	2204      	movs	r2, #4
1fff064a:	601a      	str	r2, [r3, #0]
		else
			*nargs = 1;
		status = efuse_read(size, row, offset, args);
	} else {
		/* ERROR */
		status = ERR_INVALID_COMMAND;
1fff064c:	2002      	movs	r0, #2
		args[0] = MB_STAT_BAD_COMMAND;
	}

	return status;
}
1fff064e:	bdf0      	pop	{r4, r5, r6, r7, pc}

1fff0650 <mbox_receive>:
u32 mbox_receive(u32 *cmd, u32 *args)
{
	u32 n, status = NO_ERROR;
	u32 regval;

	if ((cmd == 0) || (args == 0)) {
1fff0650:	b190      	cbz	r0, 1fff0678 <mbox_receive+0x28>
1fff0652:	b189      	cbz	r1, 1fff0678 <mbox_receive+0x28>
		status = ERR_INVALID_ARGUMENT;
		goto rx_exit;
	}

	while (!(readl(SP_CONTROL) & CMD_REG_OCCUPIED_BIT))
1fff0654:	4b0d      	ldr	r3, [pc, #52]	; (1fff068c <mbox_receive+0x3c>)
1fff0656:	681a      	ldr	r2, [r3, #0]
1fff0658:	07d2      	lsls	r2, r2, #31
1fff065a:	d5fc      	bpl.n	1fff0656 <mbox_receive+0x6>
		/* continue polling */;

	*cmd = readl(MAILBOX_IN_CMD) & MAILBOX_CMD_MASK;
1fff065c:	4a0c      	ldr	r2, [pc, #48]	; (1fff0690 <mbox_receive+0x40>)
1fff065e:	6813      	ldr	r3, [r2, #0]
1fff0660:	b29b      	uxth	r3, r3
1fff0662:	6003      	str	r3, [r0, #0]
1fff0664:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000

	for (n = 0; n < MAILBOX_MAX_ARGS; n++)
		args[n] = readl(MAILBOX_IN_ARG(n));
1fff0668:	f853 0b04 	ldr.w	r0, [r3], #4
	while (!(readl(SP_CONTROL) & CMD_REG_OCCUPIED_BIT))
		/* continue polling */;

	*cmd = readl(MAILBOX_IN_CMD) & MAILBOX_CMD_MASK;

	for (n = 0; n < MAILBOX_MAX_ARGS; n++)
1fff066c:	4293      	cmp	r3, r2
		args[n] = readl(MAILBOX_IN_ARG(n));
1fff066e:	f841 0b04 	str.w	r0, [r1], #4
	while (!(readl(SP_CONTROL) & CMD_REG_OCCUPIED_BIT))
		/* continue polling */;

	*cmd = readl(MAILBOX_IN_CMD) & MAILBOX_CMD_MASK;

	for (n = 0; n < MAILBOX_MAX_ARGS; n++)
1fff0672:	d1f9      	bne.n	1fff0668 <mbox_receive+0x18>
  *
  * return: 0 on success
 ***************************************************************************************************/
u32 mbox_receive(u32 *cmd, u32 *args)
{
	u32 n, status = NO_ERROR;
1fff0674:	2000      	movs	r0, #0
1fff0676:	e000      	b.n	1fff067a <mbox_receive+0x2a>
	u32 regval;

	if ((cmd == 0) || (args == 0)) {
		status = ERR_INVALID_ARGUMENT;
1fff0678:	2001      	movs	r0, #1
	for (n = 0; n < MAILBOX_MAX_ARGS; n++)
		args[n] = readl(MAILBOX_IN_ARG(n));

rx_exit:
	/* Reset INT */
	writel(CMD_REG_OCCUPIED_RESET_BIT, SP_INT_RESET);
1fff067a:	4b06      	ldr	r3, [pc, #24]	; (1fff0694 <mbox_receive+0x44>)
1fff067c:	2202      	movs	r2, #2
1fff067e:	601a      	str	r2, [r3, #0]
	regval = readl(SP_CONTROL) & ~CMD_REG_OCCUPIED_BIT;
1fff0680:	689a      	ldr	r2, [r3, #8]
1fff0682:	f022 0201 	bic.w	r2, r2, #1
	writel(regval, SP_CONTROL);
1fff0686:	609a      	str	r2, [r3, #8]

	return status;
}
1fff0688:	4770      	bx	lr
1fff068a:	bf00      	nop
1fff068c:	40000220 	andmi	r0, r0, r0, lsr #4
1fff0690:	40000040 	andmi	r0, r0, r0, asr #32
1fff0694:	40000218 	andmi	r0, r0, r8, lsl r2

1fff0698 <mbox_send>:
  * nargs - number or argumens
 *
  * return: 0 on success
 ***************************************************************************************************/
void mbox_send(u32 status, u32 *args, u32 nargs)
{
1fff0698:	b530      	push	{r4, r5, lr}
	u32 n, regval;

	if ((args == 0) || (nargs >= MAILBOX_MAX_ARGS))
1fff069a:	b1a1      	cbz	r1, 1fff06c6 <mbox_send+0x2e>
1fff069c:	2a0f      	cmp	r2, #15
1fff069e:	d812      	bhi.n	1fff06c6 <mbox_send+0x2e>
  * args - arguments to return to host
  * nargs - number or argumens
 *
  * return: 0 on success
 ***************************************************************************************************/
void mbox_send(u32 status, u32 *args, u32 nargs)
1fff06a0:	0092      	lsls	r2, r2, #2
1fff06a2:	2300      	movs	r3, #0
1fff06a4:	e005      	b.n	1fff06b2 <mbox_send+0x1a>

	if ((args == 0) || (nargs >= MAILBOX_MAX_ARGS))
		return;

	for (n = 0; n < nargs; n++)
		writel(args[n], MAILBOX_OUT_ARG(n));
1fff06a6:	58cd      	ldr	r5, [r1, r3]
  * args - arguments to return to host
  * nargs - number or argumens
 *
  * return: 0 on success
 ***************************************************************************************************/
void mbox_send(u32 status, u32 *args, u32 nargs)
1fff06a8:	f103 4480 	add.w	r4, r3, #1073741824	; 0x40000000

	if ((args == 0) || (nargs >= MAILBOX_MAX_ARGS))
		return;

	for (n = 0; n < nargs; n++)
		writel(args[n], MAILBOX_OUT_ARG(n));
1fff06ac:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
1fff06b0:	3304      	adds	r3, #4
	u32 n, regval;

	if ((args == 0) || (nargs >= MAILBOX_MAX_ARGS))
		return;

	for (n = 0; n < nargs; n++)
1fff06b2:	4293      	cmp	r3, r2
1fff06b4:	d1f7      	bne.n	1fff06a6 <mbox_send+0xe>
		writel(args[n], MAILBOX_OUT_ARG(n));

	/* Set status */
	writel(status, MAILBOX_OUT_STATUS);
1fff06b6:	4b04      	ldr	r3, [pc, #16]	; (1fff06c8 <mbox_send+0x30>)
1fff06b8:	6018      	str	r0, [r3, #0]
	/* Pop host INT CMD complete */
	regval = readl(HOST_INT_SET) | HOST_INT_CMD_COMPLETE_BIT;
1fff06ba:	f8d3 21b4 	ldr.w	r2, [r3, #436]	; 0x1b4
1fff06be:	f042 0201 	orr.w	r2, r2, #1
	writel(regval, HOST_INT_SET);
1fff06c2:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
1fff06c6:	bd30      	pop	{r4, r5, pc}
1fff06c8:	40000080 	andmi	r0, r0, r0, lsl #1

Disassembly of section .text.startup:

1fff06cc <main>:
  * main
  *
  * return: None
 ***************************************************************************************************/
int main(int exception, char **dummy)
{
1fff06cc:	b510      	push	{r4, lr}
1fff06ce:	b092      	sub	sp, #72	; 0x48
	u32			cmd, args[MAILBOX_MAX_ARGS];
	u32			status, nargs;
	enum mbox_status	mb_stat = MB_STAT_SUCCESS;

	if (exception != 0) {
1fff06d0:	b9b8      	cbnz	r0, 1fff0702 <main+0x36>
		exception_handler(exception);
		return NO_ERROR;
	}

	/* Initialization stuff */
	status = clock_init();
1fff06d2:	f7ff fd81 	bl	1fff01d8 <clock_init>
	if (status)
1fff06d6:	b9a8      	cbnz	r0, 1fff0704 <main+0x38>
1fff06d8:	4604      	mov	r4, r0
		return status;

	/* Mailbox commands handling loop */
	while (1) {
		status = mbox_receive(&cmd, args);
1fff06da:	a810      	add	r0, sp, #64	; 0x40
1fff06dc:	4669      	mov	r1, sp
1fff06de:	f7ff ffb7 	bl	1fff0650 <mbox_receive>
		if (status == NO_ERROR)
1fff06e2:	b928      	cbnz	r0, 1fff06f0 <main+0x24>
			status = cmd_execute(cmd, args, &nargs);
1fff06e4:	9810      	ldr	r0, [sp, #64]	; 0x40
1fff06e6:	4669      	mov	r1, sp
1fff06e8:	aa11      	add	r2, sp, #68	; 0x44
1fff06ea:	f7ff ff65 	bl	1fff05b8 <cmd_execute>

		/* In case of error, the status saved in args[0] */
		if (status != NO_ERROR) {
1fff06ee:	b110      	cbz	r0, 1fff06f6 <main+0x2a>
			nargs = 0;
1fff06f0:	2300      	movs	r3, #0
			mb_stat = args[0];
1fff06f2:	9c00      	ldr	r4, [sp, #0]
		if (status == NO_ERROR)
			status = cmd_execute(cmd, args, &nargs);

		/* In case of error, the status saved in args[0] */
		if (status != NO_ERROR) {
			nargs = 0;
1fff06f4:	9311      	str	r3, [sp, #68]	; 0x44
			mb_stat = args[0];
		}

		/* Send the results back */
		mbox_send(mb_stat, args, nargs);
1fff06f6:	4620      	mov	r0, r4
1fff06f8:	4669      	mov	r1, sp
1fff06fa:	9a11      	ldr	r2, [sp, #68]	; 0x44
1fff06fc:	f7ff ffcc 	bl	1fff0698 <mbox_send>

	} /* read and execute mailbox commands */
1fff0700:	e7eb      	b.n	1fff06da <main+0xe>
	u32			status, nargs;
	enum mbox_status	mb_stat = MB_STAT_SUCCESS;

	if (exception != 0) {
		exception_handler(exception);
		return NO_ERROR;
1fff0702:	2000      	movs	r0, #0
		mbox_send(mb_stat, args, nargs);

	} /* read and execute mailbox commands */

	return NO_ERROR;
}
1fff0704:	b012      	add	sp, #72	; 0x48
1fff0706:	bd10      	pop	{r4, pc}

Disassembly of section .rw:

1fff0708 <loop_ns>:
1fff0708:	00000000 	andeq	r0, r0, r0

1fff070c <clk_ns>:
1fff070c:	00000000 	andeq	r0, r0, r0

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00003241 	andeq	r3, r0, r1, asr #4
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000028 	andeq	r0, r0, r8, lsr #32
  10:	726f4305 	rsbvc	r4, pc, #335544320	; 0x14000000
  14:	2d786574 	cfldr64cs	mvdx6, [r8, #-464]!	; 0xfffffe30
  18:	0600334d 	streq	r3, [r0], -sp, asr #6
  1c:	094d070a 	stmdbeq	sp, {r1, r3, r8, r9, sl}^
  20:	12040a02 	andne	r0, r4, #8192	; 0x2000
  24:	15011404 	strne	r1, [r1, #-1028]	; 0x404
  28:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  2c:	1b021a01 	blne	86838 <_start-0x1ff697c8>
  30:	Address 0x0000000000000030 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <_start-0x1ef1f2dc>
   4:	62552820 	subsvs	r2, r5, #2097152	; 0x200000
   8:	75746e75 	ldrbvc	r6, [r4, #-3701]!	; 0xe75
   c:	6e694c2f 	cdpvs	12, 6, cr4, cr9, cr15, {1}
  10:	206f7261 	rsbcs	r7, pc, r1, ror #4
  14:	2e362e34 	mrccs	14, 1, r2, cr6, cr4, {1}
  18:	75312d33 	ldrvc	r2, [r1, #-3379]!	; 0xd33
  1c:	746e7562 	strbtvc	r7, [lr], #-1378	; 0x562
  20:	20293575 	eorcs	r3, r9, r5, ror r5
  24:	2e362e34 	mrccs	14, 1, r2, cr6, cr4, {1}
  28:	Address 0x0000000000000028 is out of bounds.


Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	0000005e 	andeq	r0, r0, lr, asr r0
   4:	001e0002 	andseq	r0, lr, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	00010000 	andeq	r0, r1, r0
  1c:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
  20:	00532e74 	subseq	r2, r3, r4, ror lr
  24:	00000000 	andeq	r0, r0, r0
  28:	7c020500 	cfstr32vc	mvfx0, [r2], {-0}
  2c:	031fff00 	tsteq	pc, #0
  30:	2f21013a 	svccs	0x0021013a
  34:	2621212f 	strtcs	r2, [r1], -pc, lsr #2
  38:	21242121 	teqcs	r4, r1, lsr #2
  3c:	21212421 	teqcs	r1, r1, lsr #8
  40:	24212124 	strtcs	r2, [r1], #-292	; 0x124
  44:	21242121 	teqcs	r4, r1, lsr #2
  48:	21212421 	teqcs	r1, r1, lsr #8
  4c:	24212124 	strtcs	r2, [r1], #-292	; 0x124
  50:	21242121 	teqcs	r4, r1, lsr #2
  54:	21212421 	teqcs	r1, r1, lsr #8
  58:	2e7fb703 	cdpcs	7, 7, cr11, cr15, cr3, {0}
  5c:	00020232 	andeq	r0, r2, r2, lsr r2
  60:	00a00101 	adceq	r0, r0, r1, lsl #2
  64:	00020000 	andeq	r0, r2, r0
  68:	00000034 	andeq	r0, r0, r4, lsr r0
  6c:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
  70:	0101000d 	tsteq	r1, sp
  74:	00000101 	andeq	r0, r0, r1, lsl #2
  78:	00000100 	andeq	r0, r0, r0, lsl #2
  7c:	6c630001 	stclvs	0, cr0, [r3], #-4
  80:	2e6b636f 	cdpcs	3, 6, cr6, cr11, cr15, {3}
  84:	00000063 	andeq	r0, r0, r3, rrx
  88:	70797400 	rsbsvc	r7, r9, r0, lsl #8
  8c:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
  90:	00000000 	andeq	r0, r0, r0
  94:	636f6c63 	cmnvs	pc, #25344	; 0x6300
  98:	00682e6b 	rsbeq	r2, r8, fp, ror #28
  9c:	00000000 	andeq	r0, r0, r0
  a0:	d8020500 	stmdale	r2, {r8, sl}
  a4:	031fff00 	tsteq	pc, #0
  a8:	30150121 	andscc	r0, r5, r1, lsr #2
  ac:	663d0332 			; <UNDEFINED> instruction: 0x663d0332
  b0:	03251b17 	teqeq	r5, #23552	; 0x5c00
  b4:	6c033c15 	stcvs	12, cr3, [r3], {21}
  b8:	5203312e 	andpl	r3, r3, #-2147483637	; 0x8000000b
  bc:	2e2e032e 	cdpcs	3, 2, cr0, cr14, cr14, {1}
  c0:	212e5503 	teqcs	lr, r3, lsl #10
  c4:	1e78211f 	mrcne	1, 3, r2, cr8, cr15, {0}
  c8:	77211f3f 			; <UNDEFINED> instruction: 0x77211f3f
  cc:	211f213e 	tstcs	pc, lr, lsr r1	; <UNPREDICTABLE>
  d0:	33692f78 	cmncc	r9, #480	; 0x1e0
  d4:	16033e1e 			; <UNDEFINED> instruction: 0x16033e1e
  d8:	004b244a 	subeq	r2, fp, sl, asr #8
  dc:	06010402 	streq	r0, [r1], -r2, lsl #8
  e0:	3d23062e 	stccc	6, cr0, [r3, #-184]!	; 0xffffff48
  e4:	01040200 	mrseq	r0, R12_usr
  e8:	23062e06 	movwcs	r2, #28166	; 0x6e06
  ec:	324a7a03 	subcc	r7, sl, #12288	; 0x3000
  f0:	4c13fa3f 	ldcmi	10, cr15, [r3], {63}	; 0x3f
  f4:	3121522f 	teqcc	r1, pc, lsr #4
  f8:	211f5921 	tstcs	pc, r1, lsr #18
  fc:	0903293d 	stmdbeq	r3, {r0, r2, r3, r4, r5, r8, fp, sp}
 100:	00030220 	andeq	r0, r3, r0, lsr #4
 104:	018b0101 	orreq	r0, fp, r1, lsl #2
 108:	00020000 	andeq	r0, r2, r0
 10c:	00000033 	andeq	r0, r0, r3, lsr r0
 110:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 114:	0101000d 	tsteq	r1, sp
 118:	00000101 	andeq	r0, r0, r1, lsl #2
 11c:	00000100 	andeq	r0, r0, r0, lsl #2
 120:	66650001 	strbtvs	r0, [r5], -r1
 124:	2e657375 	mcrcs	3, 3, r7, cr5, cr5, {3}
 128:	00000063 	andeq	r0, r0, r3, rrx
 12c:	70797400 	rsbsvc	r7, r9, r0, lsl #8
 130:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
 134:	00000000 	andeq	r0, r0, r0
 138:	786f626d 	stmdavc	pc!, {r0, r2, r3, r5, r6, r9, sp, lr}^	; <UNPREDICTABLE>
 13c:	0000682e 	andeq	r6, r0, lr, lsr #16
 140:	00000000 	andeq	r0, r0, r0
 144:	02000205 	andeq	r0, r0, #1342177280	; 0x50000000
 148:	ef031fff 	svc	0x00031fff
 14c:	33200100 	teqcc	r0, #0
 150:	01040200 	mrseq	r0, R12_usr
 154:	33063c06 	movwcc	r3, #27654	; 0x6c06
 158:	0b034d3e 	bleq	d3658 <_start-0x1ff1c9a8>
 15c:	2e760320 	cdpcs	3, 7, cr0, cr6, cr0, {1}
 160:	1b26232f 	blne	988e24 <_start-0x1f6671dc>
 164:	23242f2f 	teqcs	r4, #188	; 0xbc
 168:	2431232b 	ldrtcs	r2, [r1], #-811	; 0x32b
 16c:	30222f1d 	eorcc	r2, r2, sp, lsl pc
 170:	20790328 	rsbscs	r0, r9, r8, lsr #6
 174:	2f21232f 	svccs	0x0021232f
 178:	3030252f 	eorscc	r2, r0, pc, lsr #10
 17c:	3d2f211f 	stfccs	f2, [pc, #-124]!	; 108 <_start-0x1ffefef8>
 180:	3c760322 	ldclcc	3, cr0, [r6], #-136	; 0xffffff78
 184:	034a5403 	movteq	r5, #41987	; 0xa403
 188:	15c23c3a 	strbne	r3, [r2, #3130]	; 0xc3a
 18c:	5a4d2e1d 	bpl	134ba08 <_start-0x1eca45f8>
 190:	01040200 	mrseq	r0, R12_usr
 194:	064a2e06 	strbeq	r2, [sl], -r6, lsl #28
 198:	1b316735 	blne	c59e74 <_start-0x1f39618c>
 19c:	7a032f25 	bvc	cbe38 <_start-0x1ff241c8>
 1a0:	7a032620 	bvc	c9a28 <_start-0x1ff265d8>
 1a4:	3c0a032e 	stccc	3, cr0, [sl], {46}	; 0x2e
 1a8:	2d213d30 	stccs	13, cr3, [r1, #-192]!	; 0xffffff40
 1ac:	2f2d2f2f 	svccs	0x002d2f2f
 1b0:	241f3d30 	ldrcs	r3, [pc], #-3376	; 1b8 <_start-0x1ffefe48>
 1b4:	301f2131 	andscc	r2, pc, r1, lsr r1	; <UNPREDICTABLE>
 1b8:	0021211e 	eoreq	r2, r1, lr, lsl r1
 1bc:	06010402 	streq	r0, [r1], -r2, lsl #8
 1c0:	30310620 	eorscc	r0, r1, r0, lsr #12
 1c4:	211f832f 	tstcs	pc, pc, lsr #6
 1c8:	2f4b2f33 	svccs	0x004b2f33
 1cc:	31353130 	teqcc	r5, r0, lsr r1
 1d0:	5b4d201d 	blpl	134824c <_start-0x1eca7db4>
 1d4:	01040200 	mrseq	r0, R12_usr
 1d8:	7a063c06 	bvc	18f1f8 <_start-0x1fe60e08>
 1dc:	305b3d30 	subscc	r3, fp, r0, lsr sp
 1e0:	7eb50391 	mrcvc	3, 5, r0, cr5, cr1, {4}
 1e4:	3f4f3d2e 	svccc	0x004f3d2e
 1e8:	2f585103 	svccs	0x00585103
 1ec:	2e290334 	mcrcs	3, 1, r0, cr9, cr4, {1}
 1f0:	212e5003 	teqcs	lr, r3
 1f4:	79032125 	stmdbvc	r3, {r0, r2, r5, r8, sp}
 1f8:	211f2120 	tstcs	pc, r0, lsr #2
 1fc:	211f2125 	tstcs	pc, r5, lsr #2
 200:	7903211f 	stmdbvc	r3, {r0, r1, r2, r3, r4, r8, sp}
 204:	211f2120 	tstcs	pc, r0, lsr #2
 208:	29032125 	stmdbcs	r3, {r0, r2, r5, r8, sp}
 20c:	200d0320 	andcs	r0, sp, r0, lsr #6
 210:	30322a32 	eorscc	r2, r2, r2, lsr sl
 214:	3c780332 	ldclcc	3, cr0, [r8], #-200	; 0xffffff38
 218:	3c01e303 	stccc	3, cr14, [r1], {3}
 21c:	03205e03 	teqeq	r0, #48	; 0x30
 220:	03207ec3 	teqeq	r0, #3120	; 0xc30
 224:	032e01df 	teqeq	lr, #-1073741769	; 0xc0000037
 228:	4e832e59 	mcrmi	14, 4, r2, cr3, cr9, {2}
 22c:	03200a03 	teqeq	r0, #12288	; 0x3000
 230:	232f2e77 	teqcs	pc, #1904	; 0x770
 234:	3f232f21 	svccc	0x00232f21
 238:	49213d4c 	stmdbmi	r1!, {r2, r3, r6, r8, sl, fp, ip, sp}
 23c:	302f2d30 	eorcc	r2, pc, r0, lsr sp	; <UNPREDICTABLE>
 240:	35261f4b 	strcc	r1, [r6, #-3915]!	; 0xf4b
 244:	2f2e7903 	svccs	0x002e7903
 248:	03262a32 	teqeq	r6, #204800	; 0x32000
 24c:	91232e7a 	teqls	r3, sl, ror lr
 250:	232f1f69 	teqcs	pc, #420	; 0x1a4
 254:	84222f21 	strthi	r2, [r2], #-3873	; 0xf21
 258:	3f2f2d22 	svccc	0x002f2d22
 25c:	032e6e03 	teqeq	lr, #48	; 0x30
 260:	6e032e12 	mcrvs	14, 0, r2, cr3, cr2, {0}
 264:	2e120320 	cdpcs	3, 1, cr0, cr2, cr0, {1}
 268:	032e6e03 	teqeq	lr, #48	; 0x30
 26c:	3f032e5b 	svccc	0x00032e5b
 270:	7de30390 	stclvc	3, cr0, [r3, #576]!	; 0x240
 274:	029d0320 	addseq	r0, sp, #-2147483648	; 0x80000000
 278:	232f212e 	teqcs	pc, #-2147483637	; 0x8000000b
 27c:	032f2f21 	teqeq	pc, #132	; 0x84
 280:	2f207dda 	svccs	0x00207dda
 284:	a5032521 	strge	r2, [r3, #-1313]	; 0x521
 288:	4b2f4a02 	blmi	bd2a98 <_start-0x1f41d568>
 28c:	31214b2f 	teqcc	r1, pc, lsr #22
 290:	01000e02 	tsteq	r0, r2, lsl #28
 294:	0000b101 	andeq	fp, r0, r1, lsl #2
 298:	32000200 	andcc	r0, r0, #0
 29c:	02000000 	andeq	r0, r0, #0
 2a0:	0d0efb01 	vstreq	d15, [lr, #-4]
 2a4:	01010100 	mrseq	r0, (UNDEF: 17)
 2a8:	00000001 	andeq	r0, r0, r1
 2ac:	01000001 	tsteq	r0, r1
 2b0:	69616d00 	stmdbvs	r1!, {r8, sl, fp, sp, lr}^
 2b4:	00632e6e 	rsbeq	r2, r3, lr, ror #28
 2b8:	6d000000 	stcvs	0, cr0, [r0, #-0]
 2bc:	2e786f62 	cdpcs	15, 7, cr6, cr8, cr2, {3}
 2c0:	00000068 	andeq	r0, r0, r8, rrx
 2c4:	70797400 	rsbsvc	r7, r9, r0, lsl #8
 2c8:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
 2cc:	00000000 	andeq	r0, r0, r0
 2d0:	02050000 	andeq	r0, r5, #0
 2d4:	1fff05b8 	svcne	0x00ff05b8
 2d8:	03012b03 	movweq	r2, #6915	; 0x1b03
 2dc:	6e032012 	mcrvs	0, 0, r2, cr3, cr2, {0}
 2e0:	20130320 	andscs	r0, r3, r0, lsr #6
 2e4:	03206d03 	teqeq	r0, #192	; 0xc0
 2e8:	77032e13 	smladvc	r3, r3, lr, r2
 2ec:	2e0e0320 	cdpcs	3, 0, cr0, cr14, cr0, {1}
 2f0:	232c2185 	teqcs	ip, #1073741857	; 0x40000021
 2f4:	232c2124 	teqcs	ip, #9
 2f8:	232c2124 	teqcs	ip, #9
 2fc:	231f1f25 	tstcs	pc, #148	; 0x94
 300:	311f1f25 	tstcc	pc, r5, lsr #30
 304:	50032f23 	andpl	r2, r3, r3, lsr #30
 308:	2e34032e 	cdpcs	3, 3, cr0, cr4, cr14, {1}
 30c:	11032f30 	tstne	r3, r0, lsr pc
 310:	2e6f0320 	cdpcs	3, 6, cr0, cr15, cr0, {1}
 314:	2f2f302f 	svccs	0x002f302f
 318:	09033e2f 	stmdbeq	r3, {r0, r1, r2, r3, r5, r9, sl, fp, ip, sp}
 31c:	2e780320 	cdpcs	3, 7, cr0, cr8, cr0, {1}
 320:	02252d32 	eoreq	r2, r5, #3200	; 0xc80
 324:	01010001 	tsteq	r1, r1
 328:	cc020500 	cfstr32gt	mvfx0, [r2], {-0}
 32c:	031fff06 	tsteq	pc, #24
 330:	33010184 	movwcc	r0, #4484	; 0x1184
 334:	4b332f26 	blmi	ccbfd4 <_start-0x1f32402c>
 338:	21215b21 	teqcs	r1, r1, lsr #22
 33c:	035a251f 	cmpeq	sl, #130023424	; 0x7c00000
 340:	1a032069 	bne	c84ec <_start-0x1ff27b14>
 344:	00020220 	andeq	r0, r2, r0, lsr #4
 348:	008e0101 	addeq	r0, lr, r1, lsl #2
 34c:	00020000 	andeq	r0, r2, r0
 350:	00000028 	andeq	r0, r0, r8, lsr #32
 354:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 358:	0101000d 	tsteq	r1, sp
 35c:	00000101 	andeq	r0, r0, r1, lsl #2
 360:	00000100 	andeq	r0, r0, r0, lsl #2
 364:	626d0001 	rsbvs	r0, sp, #1
 368:	632e786f 	teqvs	lr, #7274496	; 0x6f0000
 36c:	00000000 	andeq	r0, r0, r0
 370:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
 374:	00682e73 	rsbeq	r2, r8, r3, ror lr
 378:	00000000 	andeq	r0, r0, r0
 37c:	50020500 	andpl	r0, r2, r0, lsl #10
 380:	031fff06 	tsteq	pc, #24
 384:	00160120 	andseq	r0, r6, r0, lsr #2
 388:	06010402 	streq	r0, [r1], -r2, lsl #8
 38c:	04020020 	streq	r0, [r2], #-32
 390:	4d250601 	stcmi	6, cr0, [r5, #-4]!
 394:	02040200 	andeq	r0, r4, #0
 398:	04020069 	streq	r0, [r2], #-105	; 0x69
 39c:	02002d02 	andeq	r2, r0, #128	; 0x80
 3a0:	00210204 	eoreq	r0, r1, r4, lsl #4
 3a4:	2d020402 	cfstrscs	mvf0, [r2, #-8]
 3a8:	32207303 	eorcc	r7, r0, #201326592	; 0xc000000
 3ac:	3d200e03 	stccc	14, cr0, [r0, #-12]!
 3b0:	0c03233d 	stceq	3, cr2, [r3], {61}	; 0x3d
 3b4:	02002382 	andeq	r2, r0, #134217730	; 0x8000002
 3b8:	20060104 	andcs	r0, r6, r4, lsl #2
 3bc:	02002a06 	andeq	r2, r0, #24576	; 0x6000
 3c0:	00440204 	subeq	r0, r4, r4, lsl #4
 3c4:	03020402 	movweq	r0, #9218	; 0x2402
 3c8:	02002078 	andeq	r2, r0, #120	; 0x78
 3cc:	00360204 	eorseq	r0, r6, r4, lsl #4
 3d0:	3b010402 	blcc	413e0 <_start-0x1ffaec20>
 3d4:	024b3032 	subeq	r3, fp, #50	; 0x32
 3d8:	01010005 	tsteq	r1, r5

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	00000058 	andeq	r0, r0, r8, asr r0
   4:	00000002 	andeq	r0, r0, r2
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	00000000 	andeq	r0, r0, r0
  10:	1fff0000 	svcne	0x00ff0000
  14:	1fff00d8 	svcne	0x00ff00d8
  18:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
  1c:	00532e74 	subseq	r2, r3, r4, ror lr
  20:	73696d2f 	cmnvc	r9, #3008	; 0xbc0
  24:	61642f63 	cmnvs	r4, r3, ror #30
  28:	616d6174 	smcvs	54804	; 0xd614
  2c:	752f6574 	strvc	r6, [pc, #-1396]!	; fffffac0 <stack_top+0xe000e3b0>
  30:	746f6f62 	strbtvc	r6, [pc], #-3938	; 38 <_start-0x1ffeffc8>
  34:	3733412f 	ldrcc	r4, [r3, -pc, lsr #2]!
  38:	752d3030 	strvc	r3, [sp, #-48]!	; 0x30
  3c:	736c6974 	cmnvc	ip, #1900544	; 0x1d0000
  40:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
  44:	6c6c6576 	cfstr64vs	mvdx6, [ip], #-472	; 0xfffffe28
  48:	6d74772f 	ldclvs	7, cr7, [r4, #-188]!	; 0xffffff44
  4c:	4e470069 	cdpmi	0, 4, cr0, cr7, cr9, {3}
  50:	53412055 	movtpl	r2, #4181	; 0x1055
  54:	322e3220 	eorcc	r3, lr, #2
  58:	80010032 	andhi	r0, r1, r2, lsr r0
  5c:	00000247 	andeq	r0, r0, r7, asr #4
  60:	00140002 	andseq	r0, r4, r2
  64:	01040000 	mrseq	r0, (UNDEF: 4)
  68:	0000007c 	andeq	r0, r0, ip, ror r0
  6c:	00002101 	andeq	r2, r0, r1, lsl #2
  70:	0000cf00 	andeq	ip, r0, r0, lsl #30
  74:	ff00d800 			; <UNDEFINED> instruction: 0xff00d800
  78:	ff02001f 			; <UNDEFINED> instruction: 0xff02001f
  7c:	0000621f 	andeq	r6, r0, pc, lsl r2
  80:	08010200 	stmdaeq	r1, {r9}
  84:	00000038 	andeq	r0, r0, r8, lsr r0
  88:	2f080102 	svccs	0x00080102
  8c:	02000000 	andeq	r0, r0, #0
  90:	01040502 	tsteq	r4, r2, lsl #10
  94:	02020000 	andeq	r0, r2, #0
  98:	00005207 	andeq	r5, r0, r7, lsl #4
  9c:	05040300 	streq	r0, [r4, #-768]	; 0x300
  a0:	00746e69 	rsbseq	r6, r4, r9, ror #28
  a4:	2d070402 	cfstrscs	mvf0, [r7, #-8]
  a8:	02000001 	andeq	r0, r0, #1
  ac:	00c10508 	sbceq	r0, r1, r8, lsl #10
  b0:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
  b4:	00012307 	andeq	r2, r1, r7, lsl #6
  b8:	33750400 	cmncc	r5, #0
  bc:	20020032 	andcs	r0, r2, r2, lsr r0
  c0:	00000048 	andeq	r0, r0, r8, asr #32
  c4:	00007105 	andeq	r7, r0, r5, lsl #2
  c8:	20030400 	andcs	r0, r3, r0, lsl #8
  cc:	0000008d 	andeq	r0, r0, sp, lsl #1
  d0:	00014506 	andeq	r4, r1, r6, lsl #10
  d4:	a5060000 	strge	r0, [r6, #-0]
  d8:	01000000 	mrseq	r0, (UNDEF: 0)
  dc:	00000006 	andeq	r0, r0, r6
  e0:	ad060200 	sfmge	f0, 4, [r6, #-0]
  e4:	03000000 	movweq	r0, #0
  e8:	b5010700 	strlt	r0, [r1, #-1792]	; 0x700
  ec:	01000000 	mrseq	r0, (UNDEF: 0)
  f0:	005d0121 	subseq	r0, sp, r1, lsr #2
  f4:	00d80000 	sbcseq	r0, r8, r0
  f8:	00ec1fff 	strdeq	r1, [ip], #255	; 0xff	; <UNPREDICTABLE>
  fc:	7d021fff 	stcvc	15, cr1, [r2, #-1020]	; 0xfffffc04
 100:	0000bf00 	andeq	fp, r0, r0, lsl #30
 104:	00900800 	addseq	r0, r0, r0, lsl #16
 108:	23010000 	movwcs	r0, #4096	; 0x1000
 10c:	0000005d 	andeq	r0, r0, sp, asr r0
 110:	0a007309 	beq	1cd3c <_start-0x1ffd32c4>
 114:	391a0200 	ldmdbcc	sl, {r9}
 118:	09009f25 	stmdbeq	r0, {r0, r2, r5, r8, r9, sl, fp, ip, pc}
 11c:	00000008 	andeq	r0, r0, r8
 120:	5d013201 	sfmpl	f3, 4, [r1, #-4]
 124:	01000000 	mrseq	r0, (UNDEF: 0)
 128:	00000113 	andeq	r0, r0, r3, lsl r1
 12c:	0000970a 	andeq	r9, r0, sl, lsl #14
 130:	68320100 	ldmdavs	r2!, {r8}
 134:	0b000000 	bleq	13c <_start-0x1ffefec4>
 138:	00000029 	andeq	r0, r0, r9, lsr #32
 13c:	005d3401 	subseq	r3, sp, r1, lsl #8
 140:	9f0b0000 	svcls	0x000b0000
 144:	01000000 	mrseq	r0, (UNDEF: 0)
 148:	00005d34 	andeq	r5, r0, r4, lsr sp
 14c:	00140b00 	andseq	r0, r4, r0, lsl #22
 150:	34010000 	strcc	r0, [r1], #-0
 154:	0000005d 	andeq	r0, r0, sp, asr r0
 158:	6665720c 	strbtvs	r7, [r5], -ip, lsl #4
 15c:	5d350100 	ldfpls	f0, [r5, #-0]
 160:	0b000000 	bleq	168 <_start-0x1ffefe98>
 164:	0000003d 	andeq	r0, r0, sp, lsr r0
 168:	005d3501 	subseq	r3, sp, r1, lsl #10
 16c:	0d000000 	stceq	0, cr0, [r0, #-0]
 170:	00006501 	andeq	r6, r0, r1, lsl #10
 174:	01670100 	cmneq	r7, r0, lsl #2
 178:	0000005d 	andeq	r0, r0, sp, asr r0
 17c:	1fff00ec 	svcne	0x00ff00ec
 180:	1fff01c4 	svcne	0x00ff01c4
 184:	00000000 	andeq	r0, r0, r0
 188:	000001b7 			; <UNDEFINED> instruction: 0x000001b7
 18c:	6762740e 	strbvs	r7, [r2, -lr, lsl #8]!
 190:	5d690100 	stfple	f0, [r9, #-0]
 194:	01000000 	mrseq	r0, (UNDEF: 0)
 198:	00450f50 	subeq	r0, r5, r0, asr pc
 19c:	69010000 	stmdbvs	r1, {}	; <UNPREDICTABLE>
 1a0:	0000005d 	andeq	r0, r0, sp, asr r0
 1a4:	00000020 	andeq	r0, r0, r0, lsr #32
 1a8:	0001160f 	andeq	r1, r1, pc, lsl #12
 1ac:	5d690100 	stfple	f0, [r9, #-0]
 1b0:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
 1b4:	0f000000 	svceq	0x00000000
 1b8:	00000097 	muleq	r0, r7, r0
 1bc:	00686a01 	rsbeq	r6, r8, r1, lsl #20
 1c0:	005c0000 	subseq	r0, ip, r0
 1c4:	bf100000 	svclt	0x00100000
 1c8:	02000000 	andeq	r0, r0, #0
 1cc:	001fff01 	andseq	pc, pc, r1, lsl #30
 1d0:	01000000 	mrseq	r0, (UNDEF: 0)
 1d4:	00d01174 	sbcseq	r1, r0, r4, ror r1
 1d8:	005c0000 	subseq	r0, ip, r0
 1dc:	18120000 	ldmdane	r2, {}	; <UNPREDICTABLE>
 1e0:	13000000 	movwne	r0, #0
 1e4:	000000db 	ldrdeq	r0, [r0], -fp
 1e8:	0000006f 	andeq	r0, r0, pc, rrx
 1ec:	0000e613 	andeq	lr, r0, r3, lsl r6
 1f0:	00008200 	andeq	r8, r0, r0, lsl #4
 1f4:	00f11300 	rscseq	r1, r1, r0, lsl #6
 1f8:	00950000 	addseq	r0, r5, r0
 1fc:	fc130000 	ldc2	0, cr0, [r3], {-0}
 200:	c2000000 	andgt	r0, r0, #0
 204:	13000000 	movwne	r0, #0
 208:	00000107 	andeq	r0, r0, r7, lsl #2
 20c:	000000d5 	ldrdeq	r0, [r0], -r5
 210:	14000000 	strne	r0, [r0], #-0
 214:	00010e01 	andeq	r0, r1, r1, lsl #28
 218:	01890100 	orreq	r0, r9, r0, lsl #2
 21c:	1fff01c4 	svcne	0x00ff01c4
 220:	1fff01d8 	svcne	0x00ff01d8
 224:	ec007d02 	stc	13, cr7, [r0], {2}
 228:	15000001 	strne	r0, [r0, #-1]
 22c:	0000010e 	andeq	r0, r0, lr, lsl #2
 230:	005d8901 	subseq	r8, sp, r1, lsl #18
 234:	50010000 	andpl	r0, r1, r0
 238:	00001c0f 	andeq	r1, r0, pc, lsl #24
 23c:	5d8b0100 	stfpls	f0, [fp]
 240:	35000000 	strcc	r0, [r0, #-0]
 244:	00000001 	andeq	r0, r0, r1
 248:	013a010d 	teqeq	sl, sp, lsl #2
 24c:	95010000 	strls	r0, [r1, #-0]
 250:	00005d01 	andeq	r5, r0, r1, lsl #26
 254:	ff01d800 			; <UNDEFINED> instruction: 0xff01d800
 258:	ff02001f 			; <UNDEFINED> instruction: 0xff02001f
 25c:	0001481f 	andeq	r4, r1, pc, lsl r8
 260:	00022800 	andeq	r2, r2, r0, lsl #16
 264:	00690f00 	rsbeq	r0, r9, r0, lsl #30
 268:	97010000 	strls	r0, [r1, -r0]
 26c:	0000005d 	andeq	r0, r0, sp, asr r0
 270:	00000168 	andeq	r0, r0, r8, ror #2
 274:	00021d0f 	andeq	r1, r2, pc, lsl #26
 278:	5d980100 	ldfpls	f0, [r8]
 27c:	86000000 	strhi	r0, [r0], -r0
 280:	00000001 	andeq	r0, r0, r1
 284:	0000fd08 	andeq	pc, r0, r8, lsl #26
 288:	5d1a0100 	ldfpls	f0, [sl, #-0]
 28c:	05000000 	streq	r0, [r0, #-0]
 290:	ff070c03 			; <UNDEFINED> instruction: 0xff070c03
 294:	0088081f 	addeq	r0, r8, pc, lsl r8
 298:	1a010000 	bne	402a0 <_start-0x1ffafd60>
 29c:	0000005d 	andeq	r0, r0, sp, asr r0
 2a0:	07080305 	streq	r0, [r8, -r5, lsl #6]
 2a4:	27001fff 			; <UNDEFINED> instruction: 0x27001fff
 2a8:	02000004 	andeq	r0, r0, #4
 2ac:	00014a00 	andeq	r4, r1, r0, lsl #20
 2b0:	7c010400 	cfstrsvc	mvf0, [r1], {-0}
 2b4:	01000000 	mrseq	r0, (UNDEF: 0)
 2b8:	000001d2 	ldrdeq	r0, [r0], -r2
 2bc:	000000cf 	andeq	r0, r0, pc, asr #1
 2c0:	1fff0200 	svcne	0x00ff0200
 2c4:	1fff05b8 	svcne	0x00ff05b8
 2c8:	00000106 	andeq	r0, r0, r6, lsl #2
 2cc:	38080102 	stmdacc	r8, {r1, r8}
 2d0:	02000000 	andeq	r0, r0, #0
 2d4:	002f0801 	eoreq	r0, pc, r1, lsl #16
 2d8:	02020000 	andeq	r0, r2, #0
 2dc:	00010405 	andeq	r0, r1, r5, lsl #8
 2e0:	07020200 	streq	r0, [r2, -r0, lsl #4]
 2e4:	00000052 	andeq	r0, r0, r2, asr r0
 2e8:	69050403 	stmdbvs	r5, {r0, r1, sl}
 2ec:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
 2f0:	012d0704 	teqeq	sp, r4, lsl #14
 2f4:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
 2f8:	0000c105 	andeq	ip, r0, r5, lsl #2
 2fc:	07080200 	streq	r0, [r8, -r0, lsl #4]
 300:	00000123 	andeq	r0, r0, r3, lsr #2
 304:	32337504 	eorscc	r7, r3, #16777216	; 0x1000000
 308:	48200200 	stmdami	r0!, {r9}
 30c:	05000000 	streq	r0, [r0, #-0]
 310:	00000218 	andeq	r0, r0, r8, lsl r2
 314:	99300304 	ldmdbls	r0!, {r2, r8, r9}
 318:	06000000 	streq	r0, [r0], -r0
 31c:	00000186 	andeq	r0, r0, r6, lsl #3
 320:	022d0600 	eoreq	r0, sp, #0
 324:	06010000 	streq	r0, [r1], -r0
 328:	000001ef 	andeq	r0, r0, pc, ror #3
 32c:	01bd0602 			; <UNDEFINED> instruction: 0x01bd0602
 330:	06030000 	streq	r0, [r3], -r0
 334:	0000014d 	andeq	r0, r0, sp, asr #2
 338:	01da0604 	bicseq	r0, sl, r4, lsl #12
 33c:	00050000 	andeq	r0, r5, r0
 340:	00020c07 	andeq	r0, r2, r7, lsl #24
 344:	011a0100 	tsteq	sl, r0, lsl #2
 348:	02070703 	andeq	r0, r7, #786432	; 0xc0000
 34c:	20010000 	andcs	r0, r1, r0
 350:	73080301 	movwvc	r0, #33537	; 0x8301
 354:	01000001 	tsteq	r0, r1
 358:	005d012b 	subseq	r0, sp, fp, lsr #2
 35c:	f2010000 	vhadd.s8	d0, d1, d0
 360:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
 364:	0000017f 	andeq	r0, r0, pc, ror r1
 368:	005d2b01 	subseq	r2, sp, r1, lsl #22
 36c:	1d0a0000 	stcne	0, cr0, [sl, #-0]
 370:	01000002 	tsteq	r0, r2
 374:	00005d2d 	andeq	r5, r0, sp, lsr #26
 378:	00900a00 	addseq	r0, r0, r0, lsl #20
 37c:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
 380:	0000005d 	andeq	r0, r0, sp, asr r0
 384:	01006e0b 	tsteq	r0, fp, lsl #28
 388:	00005d2f 	andeq	r5, r0, pc, lsr #26
 38c:	01ff0a00 	mvnseq	r0, r0, lsl #20
 390:	2f010000 	svccs	0x00010000
 394:	0000005d 	andeq	r0, r0, sp, asr r0
 398:	01960c00 	orrseq	r0, r6, r0, lsl #24
 39c:	6f010000 	svcvs	0x00010000
 3a0:	00005d01 	andeq	r5, r0, r1, lsl #26
 3a4:	ff020000 			; <UNDEFINED> instruction: 0xff020000
 3a8:	ff02ac1f 			; <UNDEFINED> instruction: 0xff02ac1f
 3ac:	0001bd1f 	andeq	fp, r1, pc, lsl sp
 3b0:	00016900 	andeq	r6, r1, r0, lsl #18
 3b4:	6f720d00 	svcvs	0x00720d00
 3b8:	6f010077 	svcvs	0x00010077
 3bc:	0000005d 	andeq	r0, r0, sp, asr r0
 3c0:	000001dd 	ldrdeq	r0, [r0], -sp
 3c4:	62736d0d 	rsbsvs	r6, r3, #832	; 0x340
 3c8:	696f0100 	stmdbvs	pc!, {r8}^	; <UNPREDICTABLE>
 3cc:	11000001 	tstne	r0, r1
 3d0:	0d000002 	stceq	0, cr0, [r0, #-8]
 3d4:	0062736c 	rsbeq	r7, r2, ip, ror #6
 3d8:	01696f01 	cmneq	r9, r1, lsl #30
 3dc:	022f0000 	eoreq	r0, pc, #0
 3e0:	900e0000 	andls	r0, lr, r0
 3e4:	01000000 	mrseq	r0, (UNDEF: 0)
 3e8:	00005d71 	andeq	r5, r0, r1, ror sp
 3ec:	00024d00 	andeq	r4, r2, r0, lsl #26
 3f0:	01ff0e00 	mvnseq	r0, r0, lsl #28
 3f4:	72010000 	andvc	r0, r1, #0
 3f8:	0000005d 	andeq	r0, r0, sp, asr r0
 3fc:	000002b5 			; <UNDEFINED> instruction: 0x000002b5
 400:	00021d0e 	andeq	r1, r2, lr, lsl #26
 404:	5d730100 	ldfple	f0, [r3, #-0]
 408:	c9000000 	stmdbgt	r0, {}	; <UNPREDICTABLE>
 40c:	00000002 	andeq	r0, r0, r2
 410:	005d040f 	subseq	r0, sp, pc, lsl #8
 414:	01100000 	tsteq	r0, r0
 418:	000001b2 			; <UNDEFINED> instruction: 0x000001b2
 41c:	5d01b701 	stcpl	7, cr11, [r1, #-4]
 420:	ac000000 	stcge	0, cr0, [r0], {-0}
 424:	7c1fff02 	ldcvc	15, cr15, [pc], {2}
 428:	f51fff03 	pldw	[pc, #-3843]	; fffff52d <stack_top+0xe000de1d>
 42c:	1c000002 	stcne	0, cr0, [r0], {2}
 430:	11000002 	tstne	r0, r2
 434:	00000256 	andeq	r0, r0, r6, asr r2
 438:	005db701 	subseq	fp, sp, r1, lsl #14
 43c:	03150000 	tsteq	r5, #0
 440:	720d0000 	andvc	r0, sp, #0
 444:	0100776f 	tsteq	r0, pc, ror #14
 448:	00005db7 			; <UNDEFINED> instruction: 0x00005db7
 44c:	00033e00 	andeq	r3, r3, r0, lsl #28
 450:	02111100 	andseq	r1, r1, #0
 454:	b7010000 	strlt	r0, [r1, -r0]
 458:	0000005d 	andeq	r0, r0, sp, asr r0
 45c:	0000035c 	andeq	r0, r0, ip, asr r3
 460:	00027711 	andeq	r7, r2, r1, lsl r7
 464:	69b70100 	ldmibvs	r7!, {r8}
 468:	9d000001 	stcls	0, cr0, [r0, #-4]
 46c:	12000003 	andne	r0, r0, #3
 470:	0062736c 	rsbeq	r7, r2, ip, ror #6
 474:	005db901 	subseq	fp, sp, r1, lsl #18
 478:	91020000 	mrsls	r0, (UNDEF: 2)
 47c:	736d1358 	cmnvc	sp, #1610612737	; 0x60000001
 480:	b9010062 	stmdblt	r1, {r1, r5, r6}
 484:	0000005d 	andeq	r0, r0, sp, asr r0
 488:	000003bb 			; <UNDEFINED> instruction: 0x000003bb
 48c:	00016d0e 	andeq	r6, r1, lr, lsl #26
 490:	5db90100 	ldfpls	f0, [r9]
 494:	da000000 	ble	49c <_start-0x1ffefb64>
 498:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
 49c:	0000021d 	andeq	r0, r0, sp, lsl r2
 4a0:	005dba01 	subseq	fp, sp, r1, lsl #20
 4a4:	03ed0000 	mvneq	r0, #0
 4a8:	ac140000 	ldcge	0, cr0, [r4], {-0}
 4ac:	01000001 	tsteq	r0, r1
 4b0:	00005dbb 			; <UNDEFINED> instruction: 0x00005dbb
 4b4:	15590100 	ldrbne	r0, [r9, #-256]	; 0x100
 4b8:	000001e6 	andeq	r0, r0, r6, ror #3
 4bc:	0360e801 	cmneq	r0, #65536	; 0x10000
 4c0:	16001fff 			; <UNDEFINED> instruction: 0x16001fff
 4c4:	00016101 	andeq	r6, r1, r1, lsl #2
 4c8:	01f70100 	mvnseq	r0, r0, lsl #2
 4cc:	0000005d 	andeq	r0, r0, sp, asr r0
 4d0:	1fff037c 	svcne	0x00ff037c
 4d4:	1fff05b8 	svcne	0x00ff05b8
 4d8:	00000422 	andeq	r0, r0, r2, lsr #8
 4dc:	00025611 	andeq	r5, r2, r1, lsl r6
 4e0:	5df70100 	ldfple	f0, [r7]
 4e4:	4f000000 	svcmi	0x00000000
 4e8:	0d000004 	stceq	0, cr0, [r0, #-16]
 4ec:	00776f72 	rsbseq	r6, r7, r2, ror pc
 4f0:	005df701 	subseq	pc, sp, r1, lsl #14
 4f4:	04780000 	ldrbteq	r0, [r8], #-0
 4f8:	11110000 	tstne	r1, r0
 4fc:	01000002 	tsteq	r0, r2
 500:	00005df7 	strdeq	r5, [r0], -r7
 504:	00049700 	andeq	r9, r4, r0, lsl #14
 508:	02771100 	rsbseq	r1, r7, #0
 50c:	f7010000 			; <UNDEFINED> instruction: 0xf7010000
 510:	00000169 	andeq	r0, r0, r9, ror #2
 514:	000004b5 			; <UNDEFINED> instruction: 0x000004b5
 518:	62736c12 	rsbsvs	r6, r3, #4608	; 0x1200
 51c:	5df90100 	ldfple	f0, [r9]
 520:	02000000 	andeq	r0, r0, #0
 524:	6d125091 	ldcvs	0, cr5, [r2, #-580]	; 0xfffffdbc
 528:	01006273 	tsteq	r0, r3, ror r2
 52c:	00005df9 	strdeq	r5, [r0], -r9
 530:	54910200 	ldrpl	r0, [r1], #512	; 0x200
 534:	00016d0e 	andeq	r6, r1, lr, lsl #26
 538:	5df90100 	ldfple	f0, [r9]
 53c:	d3000000 	movwle	r0, #0
 540:	13000004 	movwne	r0, #4
 544:	006c6f63 	rsbeq	r6, ip, r3, ror #30
 548:	005df901 	subseq	pc, sp, r1, lsl #18
 54c:	04e60000 	strbteq	r0, [r6], #0
 550:	1d0e0000 	stcne	0, cr0, [lr, #-0]
 554:	01000002 	tsteq	r0, r2
 558:	00005dfa 	strdeq	r5, [r0], -sl
 55c:	00050500 	andeq	r0, r5, r0, lsl #10
 560:	01ac0e00 			; <UNDEFINED> instruction: 0x01ac0e00
 564:	fb010000 	blx	4056e <_start-0x1ffafa92>
 568:	0000005d 	andeq	r0, r0, sp, asr r0
 56c:	00000550 	andeq	r0, r0, r0, asr r5
 570:	0000900e 	andeq	r9, r0, lr
 574:	5dfc0100 	ldfple	f0, [ip]
 578:	63000000 	movwvs	r0, #0
 57c:	17000005 	strne	r0, [r0, -r5]
 580:	00000224 	andeq	r0, r0, r4, lsr #4
 584:	7e016101 	adfvcs	f6, f1, f1
 588:	181fff05 	ldmdane	pc, {r0, r2, r8, r9, sl, fp, ip, sp, lr, pc}	; <UNPREDICTABLE>
 58c:	000000ab 	andeq	r0, r0, fp, lsr #1
 590:	1fff03d8 	svcne	0x00ff03d8
 594:	00000030 	andeq	r0, r0, r0, lsr r0
 598:	f1011101 			; <UNDEFINED> instruction: 0xf1011101
 59c:	19000003 	stmdbne	r0, {r0, r1}
 5a0:	000000bc 	strheq	r0, [r0], -ip
 5a4:	000005af 	andeq	r0, r0, pc, lsr #11
 5a8:	0000481a 	andeq	r4, r0, sl, lsl r8
 5ac:	00c71b00 	sbceq	r1, r7, r0, lsl #22
 5b0:	05cf0000 	strbeq	r0, [pc]	; 5b8 <_start-0x1ffefa48>
 5b4:	d21c0000 	andsle	r0, ip, #0
 5b8:	1c000000 	stcne	0, cr0, [r0], {-0}
 5bc:	000000dd 	ldrdeq	r0, [r0], -sp
 5c0:	0000e61c 	andeq	lr, r0, ip, lsl r6
 5c4:	00ab1d00 	adceq	r1, fp, r0, lsl #26
 5c8:	03d80000 	bicseq	r0, r8, #0
 5cc:	00601fff 	strdeq	r1, [r0], #-255	; 0xffffff01	; <UNPREDICTABLE>
 5d0:	f7010000 			; <UNDEFINED> instruction: 0xf7010000
 5d4:	0000781a 	andeq	r7, r0, sl, lsl r8
 5d8:	00c71b00 	sbceq	r1, r7, r0, lsl #22
 5dc:	05ef0000 	strbeq	r0, [pc, #0]!	; 5e4 <_start-0x1ffefa1c>
 5e0:	d21b0000 	andsle	r0, fp, #0
 5e4:	0f000000 	svceq	0x00000000
 5e8:	1b000006 	blne	608 <_start-0x1ffef9f8>
 5ec:	000000dd 	ldrdeq	r0, [r0], -sp
 5f0:	0000063d 	andeq	r0, r0, sp, lsr r6
 5f4:	0000e61c 	andeq	lr, r0, ip, lsl r6
 5f8:	00bc1e00 	adcseq	r1, ip, r0, lsl #28
 5fc:	991f0000 	ldmdbls	pc, {}	; <UNPREDICTABLE>
 600:	f6000000 			; <UNDEFINED> instruction: 0xf6000000
 604:	901fff03 	andsls	pc, pc, r3, lsl #30
 608:	01000000 	mrseq	r0, (UNDEF: 0)
 60c:	00a21f4d 	adceq	r1, r2, sp, asr #30
 610:	03fe0000 	mvnseq	r0, #0
 614:	00a81fff 	strdeq	r1, [r8], pc	; <UNPREDICTABLE>
 618:	4e010000 	cdpmi	0, 0, cr0, cr1, cr0, {0}
 61c:	00009920 	andeq	r9, r0, r0, lsr #18
 620:	ff040e00 			; <UNDEFINED> instruction: 0xff040e00
 624:	ff04121f 			; <UNDEFINED> instruction: 0xff04121f
 628:	204f011f 	subcs	r0, pc, pc, lsl r1	; <UNPREDICTABLE>
 62c:	00000099 	muleq	r0, r9, r0
 630:	1fff0412 	svcne	0x00ff0412
 634:	1fff0416 	svcne	0x00ff0416
 638:	a2205001 	eorge	r5, r0, #1
 63c:	16000000 	strne	r0, [r0], -r0
 640:	1a1fff04 	bne	800258 <_start-0x1f7efda8>
 644:	011fff04 	tsteq	pc, r4, lsl #30
 648:	00a22051 	adceq	r2, r2, r1, asr r0
 64c:	041a0000 	ldreq	r0, [sl], #-0
 650:	041e1fff 	ldreq	r1, [lr], #-4095	; 0xfff
 654:	52011fff 	andpl	r1, r1, #1020	; 0x3fc
 658:	0000a220 	andeq	sl, r0, r0, lsr #4
 65c:	ff041e00 			; <UNDEFINED> instruction: 0xff041e00
 660:	ff04221f 			; <UNDEFINED> instruction: 0xff04221f
 664:	2053011f 	subscs	r0, r3, pc, lsl r1
 668:	00000099 	muleq	r0, r9, r0
 66c:	1fff0422 	svcne	0x00ff0422
 670:	1fff0426 	svcne	0x00ff0426
 674:	99205401 	stmdbls	r0!, {r0, sl, ip, lr}
 678:	26000000 	strcs	r0, [r0], -r0
 67c:	2a1fff04 	bcs	800294 <_start-0x1f7efd6c>
 680:	011fff04 	tsteq	pc, r4, lsl #30
 684:	00a22055 	adceq	r2, r2, r5, asr r0
 688:	042a0000 	strteq	r0, [sl], #-0
 68c:	042e1fff 	strteq	r1, [lr], #-4095	; 0xfff
 690:	56011fff 			; <UNDEFINED> instruction: 0x56011fff
 694:	00000000 	andeq	r0, r0, r0
 698:	0000ab21 	andeq	sl, r0, r1, lsr #22
 69c:	ff055600 			; <UNDEFINED> instruction: 0xff055600
 6a0:	0000c01f 	andeq	ip, r0, pc, lsl r0
 6a4:	015f0100 	cmpeq	pc, r0, lsl #2
 6a8:	0000bc19 	andeq	fp, r0, r9, lsl ip
 6ac:	00065100 	andeq	r5, r6, r0, lsl #2
 6b0:	00d81a00 	sbcseq	r1, r8, r0, lsl #20
 6b4:	c71b0000 	ldrgt	r0, [fp, -r0]
 6b8:	51000000 	mrspl	r0, (UNDEF: 0)
 6bc:	1c000006 	stcne	0, cr0, [r0], {6}
 6c0:	000000d2 	ldrdeq	r0, [r0], -r2
 6c4:	0000dd1c 	andeq	sp, r0, ip, lsl sp
 6c8:	00e61c00 	rsceq	r1, r6, r0, lsl #24
 6cc:	00000000 	andeq	r0, r0, r0
 6d0:	02580000 	subseq	r0, r8, #0
 6d4:	00020000 	andeq	r0, r2, r0
 6d8:	0000031a 	andeq	r0, r0, sl, lsl r3
 6dc:	007c0104 	rsbseq	r0, ip, r4, lsl #2
 6e0:	e4010000 	str	r0, [r1], #-0
 6e4:	cf000002 	svcgt	0x00000002
	...
 6f0:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
 6f4:	95000000 	strls	r0, [r0, #-0]
 6f8:	02000002 	andeq	r0, r0, #2
 6fc:	00380801 	eorseq	r0, r8, r1, lsl #16
 700:	01020000 	mrseq	r0, (UNDEF: 2)
 704:	00002f08 	andeq	r2, r0, r8, lsl #30
 708:	05020200 	streq	r0, [r2, #-512]	; 0x200
 70c:	00000104 	andeq	r0, r0, r4, lsl #2
 710:	52070202 	andpl	r0, r7, #536870912	; 0x20000000
 714:	03000000 	movweq	r0, #0
 718:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
 71c:	04020074 	streq	r0, [r2], #-116	; 0x74
 720:	00012d07 	andeq	r2, r1, r7, lsl #26
 724:	05080200 	streq	r0, [r8, #-512]	; 0x200
 728:	000000c1 	andeq	r0, r0, r1, asr #1
 72c:	23070802 	movwcs	r0, #30722	; 0x7802
 730:	04000001 	streq	r0, [r0], #-1
 734:	00323375 	eorseq	r3, r2, r5, ror r3
 738:	004c2003 	subeq	r2, ip, r3
 73c:	4f050000 	svcmi	0x00050000
 740:	04000002 	streq	r0, [r0], #-2
 744:	009d2102 	addseq	r2, sp, r2, lsl #2
 748:	d8060000 	stmdale	r6, {}	; <UNPREDICTABLE>
 74c:	01000002 	tsteq	r0, r2
 750:	00030806 	andeq	r0, r3, r6, lsl #16
 754:	f1060200 			; <UNDEFINED> instruction: 0xf1060200
 758:	03000002 	movweq	r0, #2
 75c:	00027c06 	andeq	r7, r2, r6, lsl #24
 760:	5b060400 	blpl	181768 <_start-0x1fe6e898>
 764:	05000002 	streq	r0, [r0, #-2]
 768:	00029c06 	andeq	r9, r2, r6, lsl #24
 76c:	05000600 	streq	r0, [r0, #-1536]	; 0x600
 770:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 774:	bc2a0204 	sfmlt	f0, 4, [sl], #-16
 778:	06000000 	streq	r0, [r0], -r0
 77c:	0000023e 	andeq	r0, r0, lr, lsr r2
 780:	02680601 	rsbeq	r0, r8, #1048576	; 0x100000
 784:	06020000 	streq	r0, [r2], -r0
 788:	000002fe 	strdeq	r0, [r0], -lr
 78c:	18050003 	stmdane	r5, {r0, r1}
 790:	04000002 	streq	r0, [r0], #-2
 794:	00ed3002 	rsceq	r3, sp, r2
 798:	86060000 	strhi	r0, [r6], -r0
 79c:	00000001 	andeq	r0, r0, r1
 7a0:	00022d06 	andeq	r2, r2, r6, lsl #26
 7a4:	ef060100 	svc	0x00060100
 7a8:	02000001 	andeq	r0, r0, #1
 7ac:	0001bd06 	andeq	fp, r1, r6, lsl #26
 7b0:	4d060300 	stcmi	3, cr0, [r6, #-0]
 7b4:	04000001 	streq	r0, [r0], #-1
 7b8:	0001da06 	andeq	sp, r1, r6, lsl #20
 7bc:	07000500 	streq	r0, [r0, -r0, lsl #10]
 7c0:	0000028a 	andeq	r0, r0, sl, lsl #5
 7c4:	01012101 	tsteq	r1, r1, lsl #2
 7c8:	00000106 	andeq	r0, r0, r6, lsl #2
 7cc:	0002c608 	andeq	ip, r2, r8, lsl #12
 7d0:	45210100 	strmi	r0, [r1, #-256]!	; 0x100
 7d4:	00000000 	andeq	r0, r0, r0
 7d8:	02a80109 	adceq	r0, r8, #1073741826	; 0x40000002
 7dc:	2b010000 	blcs	407e4 <_start-0x1ffaf81c>
 7e0:	00006101 	andeq	r6, r0, r1, lsl #2
 7e4:	ff05b800 			; <UNDEFINED> instruction: 0xff05b800
 7e8:	ff06501f 			; <UNDEFINED> instruction: 0xff06501f
 7ec:	0006651f 	andeq	r6, r6, pc, lsl r5
 7f0:	0001b600 	andeq	fp, r1, r0, lsl #12
 7f4:	6d630a00 	vstmdbvs	r3!, {s1-s0}
 7f8:	2b010064 	blcs	40990 <_start-0x1ffaf670>
 7fc:	00000061 	andeq	r0, r0, r1, rrx
 800:	00000685 	andeq	r0, r0, r5, lsl #13
 804:	0002770b 	andeq	r7, r2, fp, lsl #14
 808:	b62b0100 	strtlt	r0, [fp], -r0, lsl #2
 80c:	a3000001 	movwge	r0, #1
 810:	0b000006 	bleq	830 <_start-0x1ffef7d0>
 814:	00000249 	andeq	r0, r0, r9, asr #4
 818:	01b62b01 			; <UNDEFINED> instruction: 0x01b62b01
 81c:	06d70000 	ldrbeq	r0, [r7], r0
 820:	1d0c0000 	stcne	0, cr0, [ip, #-0]
 824:	01000002 	tsteq	r0, r2
 828:	0000612d 	andeq	r6, r0, sp, lsr #2
 82c:	b40d0200 	strlt	r0, [sp], #-512	; 0x200
 830:	01000002 	tsteq	r0, r2
 834:	00006c2e 	andeq	r6, r0, lr, lsr #24
 838:	0006f500 	andeq	pc, r6, r0, lsl #10
 83c:	706f0e00 	rsbvc	r0, pc, r0, lsl #28
 840:	9d2f0100 	stflss	f0, [pc, #-0]	; 848 <_start-0x1ffef7b8>
 844:	26000000 	strcs	r0, [r0], -r0
 848:	0e000007 	cdpeq	0, 0, cr0, cr0, cr7, {0}
 84c:	00776f72 	rsbseq	r6, r7, r2, ror pc
 850:	00613001 	rsbeq	r3, r1, r1
 854:	07500000 	ldrbeq	r0, [r0, -r0]
 858:	560d0000 	strpl	r0, [sp], -r0
 85c:	01000002 	tsteq	r0, r2
 860:	00006131 	andeq	r6, r0, r1, lsr r1
 864:	00078500 	andeq	r8, r7, r0, lsl #10
 868:	02110d00 	andseq	r0, r1, #0
 86c:	32010000 	andcc	r0, r1, #0
 870:	00000061 	andeq	r0, r0, r1, rrx
 874:	000007ee 	andeq	r0, r0, lr, ror #15
 878:	0002740d 	andeq	r7, r2, sp, lsl #8
 87c:	b6330100 	ldrtlt	r0, [r3], -r0, lsl #2
 880:	47000001 	strmi	r0, [r0, -r1]
 884:	00000008 	andeq	r0, r0, r8
 888:	0061040f 	rsbeq	r0, r1, pc, lsl #8
 88c:	01090000 	mrseq	r0, (UNDEF: 9)
 890:	000002b9 			; <UNDEFINED> instruction: 0x000002b9
 894:	45018401 	strmi	r8, [r1, #-1025]	; 0x401
 898:	cc000000 	stcgt	0, cr0, [r0], {-0}
 89c:	081fff06 	ldmdaeq	pc, {r1, r2, r8, r9, sl, fp, ip, sp, lr, pc}	; <UNPREDICTABLE>
 8a0:	b21fff07 	andslt	pc, pc, #28
 8a4:	43000008 	movwmi	r0, #8
 8a8:	0b000002 	bleq	8b8 <_start-0x1ffef748>
 8ac:	000002c6 	andeq	r0, r0, r6, asr #5
 8b0:	00458401 	subeq	r8, r5, r1, lsl #8
 8b4:	08df0000 	ldmeq	pc, {}^	; <UNPREDICTABLE>
 8b8:	eb0b0000 	bl	2c08c0 <_start-0x1fd2f740>
 8bc:	01000002 	tsteq	r0, r2
 8c0:	00024384 	andeq	r4, r2, r4, lsl #7
 8c4:	0008fd00 	andeq	pc, r8, r0, lsl #26
 8c8:	6d630e00 	stclvs	14, cr0, [r3, #-0]
 8cc:	86010064 	strhi	r0, [r1], -r4, rrx
 8d0:	00000061 	andeq	r0, r0, r1, rrx
 8d4:	0000091b 	andeq	r0, r0, fp, lsl r9
 8d8:	00027710 	andeq	r7, r2, r0, lsl r7
 8dc:	4f860100 	svcmi	0x00860100
 8e0:	03000002 	movweq	r0, #2
 8e4:	0d7fb091 	ldcleq	0, cr11, [pc, #-580]!	; 6a8 <_start-0x1ffef958>
 8e8:	0000021d 	andeq	r0, r0, sp, lsl r2
 8ec:	00618701 	rsbeq	r8, r1, r1, lsl #14
 8f0:	092f0000 	stmdbeq	pc!, {}	; <UNPREDICTABLE>
 8f4:	490d0000 	stmdbmi	sp, {}	; <UNPREDICTABLE>
 8f8:	01000002 	tsteq	r0, r2
 8fc:	00006187 	andeq	r6, r0, r7, lsl #3
 900:	00095800 	andeq	r5, r9, r0, lsl #16
 904:	02be0d00 	adcseq	r0, lr, #0
 908:	88010000 	stmdahi	r1, {}	; <UNPREDICTABLE>
 90c:	000000bc 	strheq	r0, [r0], -ip
 910:	0000096c 	andeq	r0, r0, ip, ror #18
 914:	49040f00 	stmdbmi	r4, {r8, r9, sl, fp}
 918:	0f000002 	svceq	0x00000002
 91c:	00002904 	andeq	r2, r0, r4, lsl #18
 920:	00611100 	rsbeq	r1, r1, r0, lsl #2
 924:	4c120000 	ldcmi	0, cr0, [r2], {-0}
 928:	0f000000 	svceq	0x00000000
 92c:	01310000 	teqeq	r1, r0
 930:	00020000 	andeq	r0, r2, r0
 934:	00000415 	andeq	r0, r0, r5, lsl r4
 938:	007c0104 	rsbseq	r0, ip, r4, lsl #2
 93c:	27010000 	strcs	r0, [r1, -r0]
 940:	cf000003 	svcgt	0x00000003
 944:	50000000 	andpl	r0, r0, r0
 948:	cc1fff06 	ldcgt	15, cr15, [pc], {6}
 94c:	4a1fff06 	bmi	80056c <_start-0x1f7efa94>
 950:	02000003 	andeq	r0, r0, #3
 954:	00380801 	eorseq	r0, r8, r1, lsl #16
 958:	01020000 	mrseq	r0, (UNDEF: 2)
 95c:	00002f08 	andeq	r2, r0, r8, lsl #30
 960:	05020200 	streq	r0, [r2, #-512]	; 0x200
 964:	00000104 	andeq	r0, r0, r4, lsl #2
 968:	52070202 	andpl	r0, r7, #536870912	; 0x20000000
 96c:	03000000 	movweq	r0, #0
 970:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
 974:	04020074 	streq	r0, [r2], #-116	; 0x74
 978:	00012d07 	andeq	r2, r1, r7, lsl #26
 97c:	05080200 	streq	r0, [r8, #-512]	; 0x200
 980:	000000c1 	andeq	r0, r0, r1, asr #1
 984:	23070802 	movwcs	r0, #30722	; 0x7802
 988:	04000001 	streq	r0, [r0], #-1
 98c:	00323375 	eorseq	r3, r2, r5, ror r3
 990:	00482002 	subeq	r2, r8, r2
 994:	01050000 	mrseq	r0, (UNDEF: 5)
 998:	0000032e 	andeq	r0, r0, lr, lsr #6
 99c:	5d012001 	stcpl	0, cr2, [r1, #-4]
 9a0:	50000000 	andpl	r0, r0, r0
 9a4:	981fff06 	ldmdals	pc, {r1, r2, r8, r9, sl, fp, ip, sp, lr, pc}	; <UNPREDICTABLE>
 9a8:	021fff06 	andseq	pc, pc, #24
 9ac:	00d7007d 	sbcseq	r0, r7, sp, ror r0
 9b0:	63060000 	movwvs	r0, #24576	; 0x6000
 9b4:	0100646d 	tsteq	r0, sp, ror #8
 9b8:	0000d720 	andeq	sp, r0, r0, lsr #14
 9bc:	0009ae00 	andeq	sl, r9, r0, lsl #28
 9c0:	02770700 	rsbseq	r0, r7, #0
 9c4:	20010000 	andcs	r0, r1, r0
 9c8:	000000d7 	ldrdeq	r0, [r0], -r7
 9cc:	000009cc 	andeq	r0, r0, ip, asr #19
 9d0:	01006e08 	tsteq	r0, r8, lsl #28
 9d4:	00005d22 	andeq	r5, r0, r2, lsr #26
 9d8:	0009ea00 	andeq	lr, r9, r0, lsl #20
 9dc:	021d0900 	andseq	r0, sp, #0
 9e0:	22010000 	andcs	r0, r1, #0
 9e4:	0000005d 	andeq	r0, r0, sp, asr r0
 9e8:	000009fe 	strdeq	r0, [r0], -lr
 9ec:	0000900a 	andeq	r9, r0, sl
 9f0:	5d230100 	stfpls	f0, [r3, #-0]
 9f4:	01000000 	mrseq	r0, (UNDEF: 0)
 9f8:	031f0b52 	tsteq	pc, #83968	; 0x14800
 9fc:	32010000 	andcc	r0, r1, #0
 a00:	1fff067a 	svcne	0x00ff067a
 a04:	5d040c00 	stcpl	12, cr0, [r4, #-0]
 a08:	0d000000 	stceq	0, cr0, [r0, #-0]
 a0c:	00031501 	andeq	r1, r3, r1, lsl #10
 a10:	01440100 	mrseq	r0, (UNDEF: 84)
 a14:	1fff0698 	svcne	0x00ff0698
 a18:	1fff06cc 	svcne	0x00ff06cc
 a1c:	00000a1d 	andeq	r0, r0, sp, lsl sl
 a20:	00021d0e 	andeq	r1, r2, lr, lsl #26
 a24:	5d440100 	stfple	f0, [r4, #-0]
 a28:	01000000 	mrseq	r0, (UNDEF: 0)
 a2c:	02770e50 	rsbseq	r0, r7, #1280	; 0x500
 a30:	44010000 	strmi	r0, [r1], #-0
 a34:	000000d7 	ldrdeq	r0, [r0], -r7
 a38:	49075101 	stmdbmi	r7, {r0, r8, ip, lr}
 a3c:	01000002 	tsteq	r0, r2
 a40:	00005d44 	andeq	r5, r0, r4, asr #26
 a44:	000a3d00 	andeq	r3, sl, r0, lsl #26
 a48:	006e0f00 	rsbeq	r0, lr, r0, lsl #30
 a4c:	005d4601 	subseq	r4, sp, r1, lsl #12
 a50:	90090000 	andls	r0, r9, r0
 a54:	01000000 	mrseq	r0, (UNDEF: 0)
 a58:	00005d46 	andeq	r5, r0, r6, asr #26
 a5c:	000a5000 	andeq	r5, sl, r0
 a60:	Address 0x0000000000000a60 is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	10001101 	andne	r1, r0, r1, lsl #2
   4:	12011106 	andne	r1, r1, #-2147483647	; 0x80000001
   8:	1b080301 	blne	200c14 <_start-0x1fdef3ec>
   c:	13082508 	movwne	r2, #34056	; 0x8508
  10:	00000005 	andeq	r0, r0, r5
  14:	25011101 	strcs	r1, [r1, #-257]	; 0x101
  18:	030b130e 	movweq	r1, #45838	; 0xb30e
  1c:	110e1b0e 	tstne	lr, lr, lsl #22
  20:	10011201 	andne	r1, r1, r1, lsl #4
  24:	02000006 	andeq	r0, r0, #6
  28:	0b0b0024 	bleq	2c00c0 <_start-0x1fd2ff40>
  2c:	0e030b3e 	vmoveq.16	d3[0], r0
  30:	24030000 	strcs	r0, [r3], #-0
  34:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  38:	0008030b 	andeq	r0, r8, fp, lsl #6
  3c:	00160400 	andseq	r0, r6, r0, lsl #8
  40:	0b3a0803 	bleq	e82054 <_start-0x1f16dfac>
  44:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  48:	04050000 	streq	r0, [r5], #-0
  4c:	0b0e0301 	bleq	380c58 <_start-0x1fc6f3a8>
  50:	3b0b3a0b 	blcc	2ce884 <_start-0x1fd2177c>
  54:	0013010b 	andseq	r0, r3, fp, lsl #2
  58:	00280600 	eoreq	r0, r8, r0, lsl #12
  5c:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
  60:	2e070000 	cdpcs	0, 0, cr0, cr7, cr0, {0}
  64:	030c3f01 	movweq	r3, #52993	; 0xcf01
  68:	3b0b3a0e 	blcc	2ce8a8 <_start-0x1fd21758>
  6c:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
  70:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
  74:	010a4001 	tsteq	sl, r1
  78:	08000013 	stmdaeq	r0, {r0, r1, r4}
  7c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
  80:	0b3b0b3a 	bleq	ec2d70 <_start-0x1f12d290>
  84:	0a021349 	beq	84db0 <_start-0x1ff6b250>
  88:	2e090000 	cdpcs	0, 0, cr0, cr9, cr0, {0}
  8c:	3a0e0301 	bcc	380c98 <_start-0x1fc6f368>
  90:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
  94:	2013490c 	andscs	r4, r3, ip, lsl #18
  98:	0013010b 	andseq	r0, r3, fp, lsl #2
  9c:	00050a00 	andeq	r0, r5, r0, lsl #20
  a0:	0b3a0e03 	bleq	e838b4 <_start-0x1f16c74c>
  a4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  a8:	340b0000 	strcc	r0, [fp], #-0
  ac:	3a0e0300 	bcc	380cb4 <_start-0x1fc6f34c>
  b0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  b4:	0c000013 	stceq	0, cr0, [r0], {19}
  b8:	08030034 	stmdaeq	r3, {r2, r4, r5}
  bc:	0b3b0b3a 	bleq	ec2dac <_start-0x1f12d254>
  c0:	00001349 	andeq	r1, r0, r9, asr #6
  c4:	3f012e0d 	svccc	0x00012e0d
  c8:	3a0e030c 	bcc	380d00 <_start-0x1fc6f300>
  cc:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
  d0:	1113490c 	tstne	r3, ip, lsl #18
  d4:	40011201 	andmi	r1, r1, r1, lsl #4
  d8:	00130106 	andseq	r0, r3, r6, lsl #2
  dc:	00340e00 	eorseq	r0, r4, r0, lsl #28
  e0:	0b3a0803 	bleq	e820f4 <_start-0x1f16df0c>
  e4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  e8:	00000a02 	andeq	r0, r0, r2, lsl #20
  ec:	0300340f 	movweq	r3, #1039	; 0x40f
  f0:	3b0b3a0e 	blcc	2ce930 <_start-0x1fd216d0>
  f4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
  f8:	10000006 	andne	r0, r0, r6
  fc:	1331011d 	teqne	r1, #1073741831	; 0x40000007
 100:	06550152 			; <UNDEFINED> instruction: 0x06550152
 104:	0b590b58 	bleq	1642e6c <_start-0x1e9ad194>
 108:	05110000 	ldreq	r0, [r1, #-0]
 10c:	02133100 	andseq	r3, r3, #0
 110:	12000006 	andne	r0, r0, #6
 114:	0655010b 	ldrbeq	r0, [r5], -fp, lsl #2
 118:	34130000 	ldrcc	r0, [r3], #-0
 11c:	02133100 	andseq	r3, r3, #0
 120:	14000006 	strne	r0, [r0], #-6
 124:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 74 <_start-0x1ffeff8c>
 128:	0b3a0e03 	bleq	e8393c <_start-0x1f16c6c4>
 12c:	0c270b3b 	stceq	11, cr0, [r7], #-236	; 0xffffff14
 130:	01120111 	tsteq	r2, r1, lsl r1
 134:	13010a40 	movwne	r0, #6720	; 0x1a40
 138:	05150000 	ldreq	r0, [r5, #-0]
 13c:	3a0e0300 	bcc	380d44 <_start-0x1fc6f2bc>
 140:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 144:	000a0213 	andeq	r0, sl, r3, lsl r2
 148:	11010000 	mrsne	r0, (UNDEF: 1)
 14c:	130e2501 	movwne	r2, #58625	; 0xe501
 150:	1b0e030b 	blne	380d84 <_start-0x1fc6f27c>
 154:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 158:	00061001 	andeq	r1, r6, r1
 15c:	00240200 	eoreq	r0, r4, r0, lsl #4
 160:	0b3e0b0b 	bleq	f82d94 <_start-0x1f06d26c>
 164:	00000e03 	andeq	r0, r0, r3, lsl #28
 168:	0b002403 	bleq	917c <_start-0x1ffe6e84>
 16c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 170:	04000008 	streq	r0, [r0], #-8
 174:	08030016 	stmdaeq	r3, {r1, r2, r4}
 178:	0b3b0b3a 	bleq	ec2e68 <_start-0x1f12d198>
 17c:	00001349 	andeq	r1, r0, r9, asr #6
 180:	03010405 	movweq	r0, #5125	; 0x1405
 184:	3a0b0b0e 	bcc	2c2dc4 <_start-0x1fd2d23c>
 188:	010b3b0b 	tsteq	fp, fp, lsl #22
 18c:	06000013 			; <UNDEFINED> instruction: 0x06000013
 190:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
 194:	00000d1c 	andeq	r0, r0, ip, lsl sp
 198:	03002e07 	movweq	r2, #3591	; 0xe07
 19c:	3b0b3a0e 	blcc	2ce9dc <_start-0x1fd21624>
 1a0:	200c270b 	andcs	r2, ip, fp, lsl #14
 1a4:	0800000b 	stmdaeq	r0, {r0, r1, r3}
 1a8:	0e03012e 	adfeqsp	f0, f3, #0.5
 1ac:	0b3b0b3a 	bleq	ec2e9c <_start-0x1f12d164>
 1b0:	13490c27 	movtne	r0, #39975	; 0x9c27
 1b4:	13010b20 	movwne	r0, #6944	; 0x1b20
 1b8:	05090000 	streq	r0, [r9, #-0]
 1bc:	3a0e0300 	bcc	380dc4 <_start-0x1fc6f23c>
 1c0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 1c4:	0a000013 	beq	218 <_start-0x1ffefde8>
 1c8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 1cc:	0b3b0b3a 	bleq	ec2ebc <_start-0x1f12d144>
 1d0:	00001349 	andeq	r1, r0, r9, asr #6
 1d4:	0300340b 	movweq	r3, #1035	; 0x40b
 1d8:	3b0b3a08 	blcc	2cea00 <_start-0x1fd21600>
 1dc:	0013490b 	andseq	r4, r3, fp, lsl #18
 1e0:	012e0c00 	teqeq	lr, r0, lsl #24
 1e4:	0b3a0e03 	bleq	e839f8 <_start-0x1f16c608>
 1e8:	0c270b3b 	stceq	11, cr0, [r7], #-236	; 0xffffff14
 1ec:	01111349 	tsteq	r1, r9, asr #6
 1f0:	06400112 			; <UNDEFINED> instruction: 0x06400112
 1f4:	00001301 	andeq	r1, r0, r1, lsl #6
 1f8:	0300050d 	movweq	r0, #1293	; 0x50d
 1fc:	3b0b3a08 	blcc	2cea24 <_start-0x1fd215dc>
 200:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 204:	0e000006 	cdpeq	0, 0, cr0, cr0, cr6, {0}
 208:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 20c:	0b3b0b3a 	bleq	ec2efc <_start-0x1f12d104>
 210:	06021349 	streq	r1, [r2], -r9, asr #6
 214:	0f0f0000 	svceq	0x000f0000
 218:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 21c:	10000013 	andne	r0, r0, r3, lsl r0
 220:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 170 <_start-0x1ffefe90>
 224:	0b3a0e03 	bleq	e83a38 <_start-0x1f16c5c8>
 228:	0c270b3b 	stceq	11, cr0, [r7], #-236	; 0xffffff14
 22c:	01111349 	tsteq	r1, r9, asr #6
 230:	06400112 			; <UNDEFINED> instruction: 0x06400112
 234:	00001301 	andeq	r1, r0, r1, lsl #6
 238:	03000511 	movweq	r0, #1297	; 0x511
 23c:	3b0b3a0e 	blcc	2cea7c <_start-0x1fd21584>
 240:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 244:	12000006 	andne	r0, r0, #6
 248:	08030034 	stmdaeq	r3, {r2, r4, r5}
 24c:	0b3b0b3a 	bleq	ec2f3c <_start-0x1f12d0c4>
 250:	0a021349 	beq	84f7c <_start-0x1ff6b084>
 254:	34130000 	ldrcc	r0, [r3], #-0
 258:	3a080300 	bcc	200e60 <_start-0x1fdef1a0>
 25c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 260:	00060213 	andeq	r0, r6, r3, lsl r2
 264:	00341400 	eorseq	r1, r4, r0, lsl #8
 268:	0b3a0e03 	bleq	e83a7c <_start-0x1f16c584>
 26c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 270:	00000a02 	andeq	r0, r0, r2, lsl #20
 274:	03000a15 	movweq	r0, #2581	; 0xa15
 278:	3b0b3a0e 	blcc	2ceab8 <_start-0x1fd21548>
 27c:	0001110b 	andeq	r1, r1, fp, lsl #2
 280:	012e1600 	teqeq	lr, r0, lsl #12
 284:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
 288:	0b3b0b3a 	bleq	ec2f78 <_start-0x1f12d088>
 28c:	13490c27 	movtne	r0, #39975	; 0x9c27
 290:	01120111 	tsteq	r2, r1, lsl r1
 294:	00000640 	andeq	r0, r0, r0, asr #12
 298:	03000a17 	movweq	r0, #2583	; 0xa17
 29c:	3b0b3a0e 	blcc	2ceadc <_start-0x1fd21524>
 2a0:	00011105 	andeq	r1, r1, r5, lsl #2
 2a4:	011d1800 	tsteq	sp, r0, lsl #16
 2a8:	01521331 	cmpeq	r2, r1, lsr r3
 2ac:	0b580655 	bleq	1601c08 <_start-0x1e9ee3f8>
 2b0:	13010559 	movwne	r0, #5465	; 0x1559
 2b4:	05190000 	ldreq	r0, [r9, #-0]
 2b8:	02133100 	andseq	r3, r3, #0
 2bc:	1a000006 	bne	2dc <_start-0x1ffefd24>
 2c0:	0655010b 	ldrbeq	r0, [r5], -fp, lsl #2
 2c4:	341b0000 	ldrcc	r0, [fp], #-0
 2c8:	02133100 	andseq	r3, r3, #0
 2cc:	1c000006 	stcne	0, cr0, [r0], {6}
 2d0:	13310034 	teqne	r1, #52	; 0x34
 2d4:	1d1d0000 	ldcne	0, cr0, [sp, #-0]
 2d8:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
 2dc:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
 2e0:	000b590b 	andeq	r5, fp, fp, lsl #18
 2e4:	00051e00 	andeq	r1, r5, r0, lsl #28
 2e8:	00001331 	andeq	r1, r0, r1, lsr r3
 2ec:	31001d1f 	tstcc	r0, pc, lsl sp
 2f0:	55015213 	strpl	r5, [r1, #-531]	; 0x213
 2f4:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
 2f8:	2000000b 	andcs	r0, r0, fp
 2fc:	1331001d 	teqne	r1, #29
 300:	01120111 	tsteq	r2, r1, lsl r1
 304:	0b590b58 	bleq	164306c <_start-0x1e9acf94>
 308:	1d210000 	stcne	0, cr0, [r1, #-0]
 30c:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
 310:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
 314:	0005590b 	andeq	r5, r5, fp, lsl #18
 318:	11010000 	mrsne	r0, (UNDEF: 1)
 31c:	130e2501 	movwne	r2, #58625	; 0xe501
 320:	1b0e030b 	blne	380f54 <_start-0x1fc6f0ac>
 324:	5201110e 	andpl	r1, r1, #-2147483645	; 0x80000003
 328:	10065501 	andne	r5, r6, r1, lsl #10
 32c:	02000006 	andeq	r0, r0, #6
 330:	0b0b0024 	bleq	2c03c8 <_start-0x1fd2fc38>
 334:	0e030b3e 	vmoveq.16	d3[0], r0
 338:	24030000 	strcs	r0, [r3], #-0
 33c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 340:	0008030b 	andeq	r0, r8, fp, lsl #6
 344:	00160400 	andseq	r0, r6, r0, lsl #8
 348:	0b3a0803 	bleq	e8235c <_start-0x1f16dca4>
 34c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 350:	04050000 	streq	r0, [r5], #-0
 354:	0b0e0301 	bleq	380f60 <_start-0x1fc6f0a0>
 358:	3b0b3a0b 	blcc	2ceb8c <_start-0x1fd21474>
 35c:	0013010b 	andseq	r0, r3, fp, lsl #2
 360:	00280600 	eoreq	r0, r8, r0, lsl #12
 364:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
 368:	2e070000 	cdpcs	0, 0, cr0, cr7, cr0, {0}
 36c:	3a0e0301 	bcc	380f78 <_start-0x1fc6f088>
 370:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 374:	010b200c 	tsteq	fp, ip
 378:	08000013 	stmdaeq	r0, {r0, r1, r4}
 37c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 380:	0b3b0b3a 	bleq	ec3070 <_start-0x1f12cf90>
 384:	00001349 	andeq	r1, r0, r9, asr #6
 388:	3f012e09 	svccc	0x00012e09
 38c:	3a0e030c 	bcc	380fc4 <_start-0x1fc6f03c>
 390:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 394:	1113490c 	tstne	r3, ip, lsl #18
 398:	40011201 	andmi	r1, r1, r1, lsl #4
 39c:	00130106 	andseq	r0, r3, r6, lsl #2
 3a0:	00050a00 	andeq	r0, r5, r0, lsl #20
 3a4:	0b3a0803 	bleq	e823b8 <_start-0x1f16dc48>
 3a8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 3ac:	00000602 	andeq	r0, r0, r2, lsl #12
 3b0:	0300050b 	movweq	r0, #1291	; 0x50b
 3b4:	3b0b3a0e 	blcc	2cebf4 <_start-0x1fd2140c>
 3b8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 3bc:	0c000006 	stceq	0, cr0, [r0], {6}
 3c0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 3c4:	0b3b0b3a 	bleq	ec30b4 <_start-0x1f12cf4c>
 3c8:	0b1c1349 	bleq	7050f4 <_start-0x1f8eaf0c>
 3cc:	340d0000 	strcc	r0, [sp], #-0
 3d0:	3a0e0300 	bcc	380fd8 <_start-0x1fc6f028>
 3d4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 3d8:	00060213 	andeq	r0, r6, r3, lsl r2
 3dc:	00340e00 	eorseq	r0, r4, r0, lsl #28
 3e0:	0b3a0803 	bleq	e823f4 <_start-0x1f16dc0c>
 3e4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 3e8:	00000602 	andeq	r0, r0, r2, lsl #12
 3ec:	0b000f0f 	bleq	4030 <_start-0x1ffebfd0>
 3f0:	0013490b 	andseq	r4, r3, fp, lsl #18
 3f4:	00341000 	eorseq	r1, r4, r0
 3f8:	0b3a0e03 	bleq	e83c0c <_start-0x1f16c3f4>
 3fc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 400:	00000a02 	andeq	r0, r0, r2, lsl #20
 404:	49010111 	stmdbmi	r1, {r0, r4, r8}
 408:	12000013 	andne	r0, r0, #19
 40c:	13490021 	movtne	r0, #36897	; 0x9021
 410:	00000b2f 	andeq	r0, r0, pc, lsr #22
 414:	01110100 	tsteq	r1, r0, lsl #2
 418:	0b130e25 	bleq	4c3cb4 <_start-0x1fb2c34c>
 41c:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 420:	01120111 	tsteq	r2, r1, lsl r1
 424:	00000610 	andeq	r0, r0, r0, lsl r6
 428:	0b002402 	bleq	9438 <_start-0x1ffe6bc8>
 42c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 430:	0300000e 	movweq	r0, #14
 434:	0b0b0024 	bleq	2c04cc <_start-0x1fd2fb34>
 438:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 43c:	16040000 	strne	r0, [r4], -r0
 440:	3a080300 	bcc	201048 <_start-0x1fdeefb8>
 444:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 448:	05000013 	streq	r0, [r0, #-19]
 44c:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 39c <_start-0x1ffefc64>
 450:	0b3a0e03 	bleq	e83c64 <_start-0x1f16c39c>
 454:	0c270b3b 	stceq	11, cr0, [r7], #-236	; 0xffffff14
 458:	01111349 	tsteq	r1, r9, asr #6
 45c:	0a400112 	beq	10008ac <_start-0x1efef754>
 460:	00001301 	andeq	r1, r0, r1, lsl #6
 464:	03000506 	movweq	r0, #1286	; 0x506
 468:	3b0b3a08 	blcc	2cec90 <_start-0x1fd21370>
 46c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 470:	07000006 	streq	r0, [r0, -r6]
 474:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 478:	0b3b0b3a 	bleq	ec3168 <_start-0x1f12ce98>
 47c:	06021349 	streq	r1, [r2], -r9, asr #6
 480:	34080000 	strcc	r0, [r8], #-0
 484:	3a080300 	bcc	20108c <_start-0x1fdeef74>
 488:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 48c:	00060213 	andeq	r0, r6, r3, lsl r2
 490:	00340900 	eorseq	r0, r4, r0, lsl #18
 494:	0b3a0e03 	bleq	e83ca8 <_start-0x1f16c358>
 498:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 49c:	00000602 	andeq	r0, r0, r2, lsl #12
 4a0:	0300340a 	movweq	r3, #1034	; 0x40a
 4a4:	3b0b3a0e 	blcc	2cece4 <_start-0x1fd2131c>
 4a8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 4ac:	0b00000a 	bleq	4dc <_start-0x1ffefb24>
 4b0:	0e03000a 	cdpeq	0, 0, cr0, cr3, cr10, {0}
 4b4:	0b3b0b3a 	bleq	ec31a4 <_start-0x1f12ce5c>
 4b8:	00000111 	andeq	r0, r0, r1, lsl r1
 4bc:	0b000f0c 	bleq	40f4 <_start-0x1ffebf0c>
 4c0:	0013490b 	andseq	r4, r3, fp, lsl #18
 4c4:	012e0d00 	teqeq	lr, r0, lsl #26
 4c8:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
 4cc:	0b3b0b3a 	bleq	ec31bc <_start-0x1f12ce44>
 4d0:	01110c27 	tsteq	r1, r7, lsr #24
 4d4:	06400112 			; <UNDEFINED> instruction: 0x06400112
 4d8:	050e0000 	streq	r0, [lr, #-0]
 4dc:	3a0e0300 	bcc	3810e4 <_start-0x1fc6ef1c>
 4e0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 4e4:	000a0213 	andeq	r0, sl, r3, lsl r2
 4e8:	00340f00 	eorseq	r0, r4, r0, lsl #30
 4ec:	0b3a0803 	bleq	e82500 <_start-0x1f16db00>
 4f0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 4f4:	Address 0x00000000000004f4 is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000001c 	andeq	r0, r0, ip, lsl r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	1fff0000 	svcne	0x00ff0000
  14:	000000d8 	ldrdeq	r0, [r0], -r8
	...
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	005c0002 	subseq	r0, ip, r2
  28:	00040000 	andeq	r0, r4, r0
  2c:	00000000 	andeq	r0, r0, r0
  30:	1fff00d8 	svcne	0x00ff00d8
  34:	00000128 	andeq	r0, r0, r8, lsr #2
	...
  40:	0000001c 	andeq	r0, r0, ip, lsl r0
  44:	02a70002 	adceq	r0, r7, #2
  48:	00040000 	andeq	r0, r4, r0
  4c:	00000000 	andeq	r0, r0, r0
  50:	1fff0200 	svcne	0x00ff0200
  54:	000003b8 			; <UNDEFINED> instruction: 0x000003b8
	...
  60:	00000024 	andeq	r0, r0, r4, lsr #32
  64:	06d20002 	ldrbeq	r0, [r2], r2
  68:	00040000 	andeq	r0, r4, r0
  6c:	00000000 	andeq	r0, r0, r0
  70:	1fff05b8 	svcne	0x00ff05b8
  74:	00000098 	muleq	r0, r8, r0
  78:	1fff06cc 	svcne	0x00ff06cc
  7c:	0000003c 	andeq	r0, r0, ip, lsr r0
	...
  88:	0000001c 	andeq	r0, r0, ip, lsl r0
  8c:	092e0002 	stmdbeq	lr!, {r1}
  90:	00040000 	andeq	r0, r4, r0
  94:	00000000 	andeq	r0, r0, r0
  98:	1fff0650 	svcne	0x00ff0650
  9c:	0000007c 	andeq	r0, r0, ip, ror r0
	...

Disassembly of section .debug_loc:

00000000 <.debug_loc>:
   0:	00000014 	andeq	r0, r0, r4, lsl r0
   4:	00000018 	andeq	r0, r0, r8, lsl r0
   8:	007d0002 	rsbseq	r0, sp, r2
   c:	00000018 	andeq	r0, r0, r8, lsl r0
  10:	000000ec 	andeq	r0, r0, ip, ror #1
  14:	087d0002 	ldmdaeq	sp!, {r1}^
	...
  20:	000000a8 	andeq	r0, r0, r8, lsr #1
  24:	000000c6 	andeq	r0, r0, r6, asr #1
  28:	ca540001 	bgt	1500034 <_start-0x1eaeffcc>
  2c:	cc000000 	stcgt	0, cr0, [r0], {-0}
  30:	01000000 	mrseq	r0, (UNDEF: 0)
  34:	00005400 	andeq	r5, r0, r0, lsl #8
  38:	00000000 	andeq	r0, r0, r0
  3c:	00b40000 	adcseq	r0, r4, r0
  40:	00bc0000 	adcseq	r0, ip, r0
  44:	00010000 	andeq	r0, r1, r0
  48:	0000ca51 	andeq	ip, r0, r1, asr sl
  4c:	0000cc00 	andeq	ip, r0, r0, lsl #24
  50:	51000100 	mrspl	r0, (UNDEF: 16)
	...
  5c:	00000032 	andeq	r0, r0, r2, lsr r0
  60:	000000a4 	andeq	r0, r0, r4, lsr #1
  64:	00540001 	subseq	r0, r4, r1
  68:	00000000 	andeq	r0, r0, r0
  6c:	46000000 	strmi	r0, [r0], -r0
  70:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
  74:	01000000 	mrseq	r0, (UNDEF: 0)
  78:	00005300 	andeq	r5, r0, r0, lsl #6
  7c:	00000000 	andeq	r0, r0, r0
  80:	00600000 	rsbeq	r0, r0, r0
  84:	00920000 	addseq	r0, r2, r0
  88:	00010000 	andeq	r0, r1, r0
  8c:	00000051 	andeq	r0, r0, r1, asr r0
  90:	00000000 	andeq	r0, r0, r0
  94:	00008e00 	andeq	r8, r0, r0, lsl #28
  98:	00009600 	andeq	r9, r0, r0, lsl #12
  9c:	31000500 	tstcc	r0, r0, lsl #10
  a0:	9f240072 	svcls	0x00240072
  a4:	00000096 	muleq	r0, r6, r0
  a8:	000000c6 	andeq	r0, r0, r6, asr #1
  ac:	ca520001 	bgt	14800b8 <_start-0x1eb6ff48>
  b0:	ec000000 	stc	0, cr0, [r0], {-0}
  b4:	01000000 	mrseq	r0, (UNDEF: 0)
  b8:	00005200 	andeq	r5, r0, r0, lsl #4
  bc:	00000000 	andeq	r0, r0, r0
  c0:	00320000 	eorseq	r0, r2, r0
  c4:	00900000 	addseq	r0, r0, r0
  c8:	00010000 	andeq	r0, r1, r0
  cc:	00000050 	andeq	r0, r0, r0, asr r0
  d0:	00000000 	andeq	r0, r0, r0
  d4:	00003800 	andeq	r3, r0, r0, lsl #16
  d8:	00003e00 	andeq	r3, r0, r0, lsl #28
  dc:	53000100 	movwpl	r0, #256	; 0x100
  e0:	00000042 	andeq	r0, r0, r2, asr #32
  e4:	00000046 	andeq	r0, r0, r6, asr #32
  e8:	52530001 	subspl	r0, r3, #1
  ec:	5a000000 	bpl	f4 <_start-0x1ffeff0c>
  f0:	01000000 	mrseq	r0, (UNDEF: 0)
  f4:	005c5100 	subseq	r5, ip, r0, lsl #2
  f8:	00600000 	rsbeq	r0, r0, r0
  fc:	00010000 	andeq	r0, r1, r0
 100:	00006c51 	andeq	r6, r0, r1, asr ip
 104:	00007000 	andeq	r7, r0, r0
 108:	52000100 	andpl	r0, r0, #0
 10c:	00000074 	andeq	r0, r0, r4, ror r0
 110:	00000078 	andeq	r0, r0, r8, ror r0
 114:	7e520001 	cdpvc	0, 5, cr0, cr2, cr1, {0}
 118:	84000000 	strhi	r0, [r0], #-0
 11c:	01000000 	mrseq	r0, (UNDEF: 0)
 120:	00865200 	addeq	r5, r6, r0, lsl #4
 124:	00960000 	addseq	r0, r6, r0
 128:	00010000 	andeq	r0, r1, r0
 12c:	00000052 	andeq	r0, r0, r2, asr r0
 130:	00000000 	andeq	r0, r0, r0
 134:	0000f400 	andeq	pc, r0, r0, lsl #8
 138:	0000f800 	andeq	pc, r0, r0, lsl #16
 13c:	53000100 	movwpl	r0, #256	; 0x100
	...
 148:	00000100 	andeq	r0, r0, r0, lsl #2
 14c:	00000102 	andeq	r0, r0, r2, lsl #2
 150:	007d0002 	rsbseq	r0, sp, r2
 154:	00000102 	andeq	r0, r0, r2, lsl #2
 158:	00000128 	andeq	r0, r0, r8, lsr #2
 15c:	087d0002 	ldmdaeq	sp!, {r1}^
	...
 168:	00000106 	andeq	r0, r0, r6, lsl #2
 16c:	00000110 	andeq	r0, r0, r0, lsl r1
 170:	20500001 	subscs	r0, r0, r1
 174:	22000001 	andcs	r0, r0, #1
 178:	01000001 	tsteq	r0, r1
 17c:	00005000 	andeq	r5, r0, r0
 180:	00000000 	andeq	r0, r0, r0
 184:	01060000 	mrseq	r0, (UNDEF: 6)
 188:	011c0000 	tsteq	ip, r0
 18c:	00020000 	andeq	r0, r2, r0
 190:	011c9f33 	tsteq	ip, r3, lsr pc
 194:	01200000 	teqeq	r0, r0
 198:	00020000 	andeq	r0, r2, r0
 19c:	01209f30 	teqeq	r0, r0, lsr pc
 1a0:	01220000 	teqeq	r2, r0
 1a4:	00020000 	andeq	r0, r2, r0
 1a8:	01229f33 	teqeq	r2, r3, lsr pc
 1ac:	01280000 	teqeq	r8, r0
 1b0:	00010000 	andeq	r0, r1, r0
 1b4:	00000050 	andeq	r0, r0, r0, asr r0
	...
 1c0:	00000200 	andeq	r0, r0, r0, lsl #4
 1c4:	7d000200 	sfmvc	f0, 4, [r0, #-0]
 1c8:	00000200 	andeq	r0, r0, r0, lsl #4
 1cc:	0000ac00 	andeq	sl, r0, r0, lsl #24
 1d0:	7d000200 	sfmvc	f0, 4, [r0, #-0]
 1d4:	00000018 	andeq	r0, r0, r8, lsl r0
	...
 1e0:	00001a00 	andeq	r1, r0, r0, lsl #20
 1e4:	50000100 	andpl	r0, r0, r0, lsl #2
 1e8:	0000001a 	andeq	r0, r0, sl, lsl r0
 1ec:	00000024 	andeq	r0, r0, r4, lsr #32
 1f0:	8e540001 	cdphi	0, 5, cr0, cr4, cr1, {0}
 1f4:	90000000 	andls	r0, r0, r0
 1f8:	01000000 	mrseq	r0, (UNDEF: 0)
 1fc:	00905000 	addseq	r5, r0, r0
 200:	00ac0000 	adceq	r0, ip, r0
 204:	00010000 	andeq	r0, r1, r0
 208:	00000054 	andeq	r0, r0, r4, asr r0
	...
 214:	00001d00 	andeq	r1, r0, r0, lsl #26
 218:	51000100 	mrspl	r0, (UNDEF: 16)
 21c:	0000001d 	andeq	r0, r0, sp, lsl r0
 220:	000000ac 	andeq	r0, r0, ip, lsr #1
 224:	00570001 	subseq	r0, r7, r1
	...
 230:	1d000000 	stcne	0, cr0, [r0, #-0]
 234:	01000000 	mrseq	r0, (UNDEF: 0)
 238:	001d5200 	andseq	r5, sp, r0, lsl #4
 23c:	00ac0000 	adceq	r0, ip, r0
 240:	00010000 	andeq	r0, r1, r0
 244:	00000055 	andeq	r0, r0, r5, asr r0
 248:	00000000 	andeq	r0, r0, r0
 24c:	00001000 	andeq	r1, r0, r0
 250:	00002000 	andeq	r2, r0, r0
 254:	34000200 	strcc	r0, [r0], #-512	; 0x200
 258:	0000209f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
 25c:	00003600 	andeq	r3, r0, r0, lsl #12
 260:	53000100 	movwpl	r0, #256	; 0x100
 264:	00000036 	andeq	r0, r0, r6, lsr r0
 268:	00000046 	andeq	r0, r0, r6, asr #32
 26c:	46540001 	ldrbmi	r0, [r4], -r1
 270:	51000000 	mrspl	r0, (UNDEF: 0)
 274:	01000000 	mrseq	r0, (UNDEF: 0)
 278:	00545300 	subseq	r5, r4, r0, lsl #6
 27c:	006a0000 	rsbeq	r0, sl, r0
 280:	00010000 	andeq	r0, r1, r0
 284:	00006c53 	andeq	r6, r0, r3, asr ip
 288:	00007200 	andeq	r7, r0, r0, lsl #4
 28c:	73000a00 	movwvc	r0, #2560	; 0xa00
 290:	80801100 	addhi	r1, r0, r0, lsl #2
 294:	1a788080 	bne	1e2049c <_start-0x1e1cfb64>
 298:	0000809f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
 29c:	00008500 	andeq	r8, r0, r0, lsl #10
 2a0:	73000a00 	movwvc	r0, #2560	; 0xa00
 2a4:	80801100 	addhi	r1, r0, r0, lsl #2
 2a8:	1a788080 	bne	1e204b0 <_start-0x1e1cfb50>
 2ac:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
 2b0:	00000000 	andeq	r0, r0, r0
 2b4:	00006800 	andeq	r6, r0, r0, lsl #16
 2b8:	00006a00 	andeq	r6, r0, r0, lsl #20
 2bc:	30000200 	andcc	r0, r0, r0, lsl #4
 2c0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
 2c4:	00000000 	andeq	r0, r0, r0
 2c8:	00006800 	andeq	r6, r0, r0, lsl #16
 2cc:	00007000 	andeq	r7, r0, r0
 2d0:	34000200 	strcc	r0, [r0], #-512	; 0x200
 2d4:	0000709f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
 2d8:	00008000 	andeq	r8, r0, r0
 2dc:	30000200 	andcc	r0, r0, r0, lsl #4
 2e0:	0000809f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
 2e4:	00008e00 	andeq	r8, r0, r0, lsl #28
 2e8:	34000200 	strcc	r0, [r0], #-512	; 0x200
 2ec:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
 2f0:	00000000 	andeq	r0, r0, r0
 2f4:	0000ac00 	andeq	sl, r0, r0, lsl #24
 2f8:	0000b200 	andeq	fp, r0, r0, lsl #4
 2fc:	7d000200 	sfmvc	f0, 4, [r0, #-0]
 300:	0000b200 	andeq	fp, r0, r0, lsl #4
 304:	00017c00 	andeq	r7, r1, r0, lsl #24
 308:	7d000200 	sfmvc	f0, 4, [r0, #-0]
 30c:	00000028 	andeq	r0, r0, r8, lsr #32
 310:	00000000 	andeq	r0, r0, r0
 314:	0000ac00 	andeq	sl, r0, r0, lsl #24
 318:	0000d400 	andeq	sp, r0, r0, lsl #8
 31c:	50000100 	andpl	r0, r0, r0, lsl #2
 320:	000000d4 	ldrdeq	r0, [r0], -r4
 324:	00000150 	andeq	r0, r0, r0, asr r1
 328:	60540001 	subsvs	r0, r4, r1
 32c:	78000001 	stmdavc	r0, {r0}
 330:	01000001 	tsteq	r0, r1
 334:	00005400 	andeq	r5, r0, r0, lsl #8
 338:	00000000 	andeq	r0, r0, r0
 33c:	00ac0000 	adceq	r0, ip, r0
 340:	00d40000 	sbcseq	r0, r4, r0
 344:	00010000 	andeq	r0, r1, r0
 348:	0000d451 	andeq	sp, r0, r1, asr r4
 34c:	00017c00 	andeq	r7, r1, r0, lsl #24
 350:	5a000100 	bpl	758 <_start-0x1ffef8a8>
	...
 35c:	000000ac 	andeq	r0, r0, ip, lsr #1
 360:	000000d4 	ldrdeq	r0, [r0], -r4
 364:	d4520001 	ldrble	r0, [r2], #-1
 368:	16000000 	strne	r0, [r0], -r0
 36c:	01000001 	tsteq	r0, r1
 370:	011e5500 	tsteq	lr, r0, lsl #10
 374:	01200000 	teqeq	r0, r0
 378:	00010000 	andeq	r0, r1, r0
 37c:	00012055 	andeq	r2, r1, r5, asr r0
 380:	00012800 	andeq	r2, r1, r0, lsl #16
 384:	75000300 	strvc	r0, [r0, #-768]	; 0x300
 388:	01609f20 	cmneq	r0, r0, lsr #30
 38c:	01740000 	cmneq	r4, r0
 390:	00010000 	andeq	r0, r1, r0
 394:	00000055 	andeq	r0, r0, r5, asr r0
 398:	00000000 	andeq	r0, r0, r0
 39c:	0000ac00 	andeq	sl, r0, r0, lsl #24
 3a0:	0000d400 	andeq	sp, r0, r0, lsl #8
 3a4:	53000100 	movwpl	r0, #256	; 0x100
 3a8:	000000d4 	ldrdeq	r0, [r0], -r4
 3ac:	0000017c 	andeq	r0, r0, ip, ror r1
 3b0:	00560001 	subseq	r0, r6, r1
 3b4:	00000000 	andeq	r0, r0, r0
 3b8:	d4000000 	strle	r0, [r0], #-0
 3bc:	df000000 	svcle	0x00000000
 3c0:	01000000 	mrseq	r0, (UNDEF: 0)
 3c4:	00df5300 	sbcseq	r5, pc, r0, lsl #6
 3c8:	017c0000 	cmneq	ip, r0
 3cc:	00020000 	andeq	r0, r2, r0
 3d0:	00005c91 	muleq	r0, r1, ip
 3d4:	00000000 	andeq	r0, r0, r0
 3d8:	00e80000 	rsceq	r0, r8, r0
 3dc:	01600000 	cmneq	r0, r0
 3e0:	00010000 	andeq	r0, r1, r0
 3e4:	00000057 	andeq	r0, r0, r7, asr r0
 3e8:	00000000 	andeq	r0, r0, r0
 3ec:	0000e000 	andeq	lr, r0, r0
 3f0:	0000e800 	andeq	lr, r0, r0, lsl #16
 3f4:	50000100 	andpl	r0, r0, r0, lsl #2
 3f8:	000000e8 	andeq	r0, r0, r8, ror #1
 3fc:	00000160 	andeq	r0, r0, r0, ror #2
 400:	9f300002 	svcls	0x00300002
 404:	00000160 	andeq	r0, r0, r0, ror #2
 408:	00000164 	andeq	r0, r0, r4, ror #2
 40c:	6c500001 	mrrcvs	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
 410:	74000001 	strvc	r0, [r0], #-1
 414:	01000001 	tsteq	r0, r1
 418:	00005000 	andeq	r5, r0, r0
 41c:	00000000 	andeq	r0, r0, r0
 420:	017c0000 	cmneq	ip, r0
 424:	01800000 	orreq	r0, r0, r0
 428:	00020000 	andeq	r0, r2, r0
 42c:	0180007d 	orreq	r0, r0, sp, ror r0
 430:	01840000 	orreq	r0, r4, r0
 434:	00020000 	andeq	r0, r2, r0
 438:	0184247d 	orreq	r2, r4, sp, ror r4
 43c:	03b80000 			; <UNDEFINED> instruction: 0x03b80000
 440:	00030000 	andeq	r0, r3, r0
 444:	0000c87d 	andeq	ip, r0, sp, ror r8
 448:	00000000 	andeq	r0, r0, r0
 44c:	7c000000 	stcvc	0, cr0, [r0], {-0}
 450:	e2000001 	and	r0, r0, #1
 454:	01000001 	tsteq	r0, r1
 458:	01e25000 	mvneq	r5, r0
 45c:	025a0000 	subseq	r0, sl, #0
 460:	00010000 	andeq	r0, r1, r0
 464:	00025a54 	andeq	r5, r2, r4, asr sl
 468:	00025c00 	andeq	r5, r2, r0, lsl #24
 46c:	53000100 	movwpl	r0, #256	; 0x100
	...
 478:	0000017c 	andeq	r0, r0, ip, ror r1
 47c:	000001e5 	andeq	r0, r0, r5, ror #3
 480:	e5510001 	ldrb	r0, [r1, #-1]
 484:	b8000001 	stmdalt	r0, {r0}
 488:	02000003 	andeq	r0, r0, #3
 48c:	00489100 	subeq	r9, r8, r0, lsl #2
 490:	00000000 	andeq	r0, r0, r0
 494:	7c000000 	stcvc	0, cr0, [r0], {-0}
 498:	b6000001 	strlt	r0, [r0], -r1
 49c:	01000001 	tsteq	r0, r1
 4a0:	01b65200 			; <UNDEFINED> instruction: 0x01b65200
 4a4:	025c0000 	subseq	r0, ip, #0
 4a8:	00010000 	andeq	r0, r1, r0
 4ac:	00000055 	andeq	r0, r0, r5, asr r0
 4b0:	00000000 	andeq	r0, r0, r0
 4b4:	00017c00 	andeq	r7, r1, r0, lsl #24
 4b8:	0001b000 	andeq	fp, r1, r0
 4bc:	53000100 	movwpl	r0, #256	; 0x100
 4c0:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
 4c4:	000003b8 			; <UNDEFINED> instruction: 0x000003b8
 4c8:	00560001 	subseq	r0, r6, r1
 4cc:	00000000 	andeq	r0, r0, r0
 4d0:	46000000 	strmi	r0, [r0], -r0
 4d4:	7e000003 	cdpvc	0, 0, cr0, cr0, cr3, {0}
 4d8:	01000003 	tsteq	r0, r3
 4dc:	00005900 	andeq	r5, r0, r0, lsl #18
 4e0:	00000000 	andeq	r0, r0, r0
 4e4:	02de0000 	sbcseq	r0, lr, #0
 4e8:	02f00000 	rscseq	r0, r0, #0
 4ec:	00020000 	andeq	r0, r2, r0
 4f0:	03349f30 	teqeq	r4, #192	; 0xc0
 4f4:	037e0000 	cmneq	lr, #0
 4f8:	00010000 	andeq	r0, r1, r0
 4fc:	0000005a 	andeq	r0, r0, sl, asr r0
 500:	00000000 	andeq	r0, r0, r0
 504:	00026c00 	andeq	r6, r2, r0, lsl #24
 508:	00027a00 	andeq	r7, r2, r0, lsl #20
 50c:	50000100 	andpl	r0, r0, r0, lsl #2
 510:	0000027a 	andeq	r0, r0, sl, ror r2
 514:	0000028d 	andeq	r0, r0, sp, lsl #5
 518:	46530001 	ldrbmi	r0, [r3], -r1
 51c:	7e000003 	cdpvc	0, 0, cr0, cr0, cr3, {0}
 520:	02000003 	andeq	r0, r0, #3
 524:	7e9f3000 	cdpvc	0, 9, cr3, cr15, cr0, {0}
 528:	82000003 	andhi	r0, r0, #3
 52c:	01000003 	tsteq	r0, r3
 530:	038a5000 	orreq	r5, sl, #0
 534:	038e0000 	orreq	r0, lr, #0
 538:	00010000 	andeq	r0, r1, r0
 53c:	00039650 	andeq	r9, r3, r0, asr r6
 540:	00039c00 	andeq	r9, r3, r0, lsl #24
 544:	50000100 	andpl	r0, r0, r0, lsl #2
	...
 550:	00000196 	muleq	r0, r6, r1
 554:	0000025c 	andeq	r0, r0, ip, asr r2
 558:	005b0001 	subseq	r0, fp, r1
 55c:	00000000 	andeq	r0, r0, r0
 560:	76000000 	strvc	r0, [r0], -r0
 564:	8d000002 	stchi	0, cr0, [r0, #-8]
 568:	01000002 	tsteq	r0, r2
 56c:	03025200 	movweq	r5, #8704	; 0x2200
 570:	03100000 	tsteq	r0, #0
 574:	00010000 	andeq	r0, r1, r0
 578:	00031050 	andeq	r1, r3, r0, asr r0
 57c:	00031b00 	andeq	r1, r3, r0, lsl #22
 580:	77000200 	strvc	r0, [r0, -r0, lsl #4]
 584:	00031e00 	andeq	r1, r3, r0, lsl #28
 588:	00032c00 	andeq	r2, r3, r0, lsl #24
 58c:	50000100 	andpl	r0, r0, r0, lsl #2
 590:	0000035c 	andeq	r0, r0, ip, asr r3
 594:	00000370 	andeq	r0, r0, r0, ror r3
 598:	70510001 	subsvc	r0, r1, r1
 59c:	7e000003 	cdpvc	0, 0, cr0, cr0, cr3, {0}
 5a0:	02000003 	andeq	r0, r0, #3
 5a4:	00007700 	andeq	r7, r0, r0, lsl #14
 5a8:	00000000 	andeq	r0, r0, r0
 5ac:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
 5b0:	82000001 	andhi	r0, r0, #1
 5b4:	02000003 	andeq	r0, r0, #3
 5b8:	8a9f3100 	bhi	fe7cc9c0 <stack_top+0xde7db2b0>
 5bc:	9c000003 	stcls	0, cr0, [r0], {3}
 5c0:	02000003 	andeq	r0, r0, #3
 5c4:	009f3100 	addseq	r3, pc, r0, lsl #2
 5c8:	00000000 	andeq	r0, r0, r0
 5cc:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
 5d0:	82000001 	andhi	r0, r0, #1
 5d4:	02000003 	andeq	r0, r0, #3
 5d8:	8a9f3000 	bhi	fe7cc5e0 <stack_top+0xde7daed0>
 5dc:	9c000003 	stcls	0, cr0, [r0], {3}
 5e0:	02000003 	andeq	r0, r0, #3
 5e4:	009f3000 	addseq	r3, pc, r0
 5e8:	00000000 	andeq	r0, r0, r0
 5ec:	3c000000 	stccc	0, cr0, [r0], {-0}
 5f0:	82000002 	andhi	r0, r0, #2
 5f4:	02000003 	andeq	r0, r0, #3
 5f8:	8a9f3400 	bhi	fe7cd600 <stack_top+0xde7dbef0>
 5fc:	9c000003 	stcls	0, cr0, [r0], {3}
 600:	02000003 	andeq	r0, r0, #3
 604:	009f3400 	addseq	r3, pc, r0, lsl #8
 608:	00000000 	andeq	r0, r0, r0
 60c:	40000000 	andmi	r0, r0, r0
 610:	49000002 	stmdbmi	r0, {r1}
 614:	09000002 	stmdbeq	r0, {r1}
 618:	0c007300 	stceq	3, cr7, [r0], {-0}
 61c:	20000000 	andcs	r0, r0, r0
 620:	02509f1a 	subseq	r9, r0, #104	; 0x68
 624:	02520000 	subseq	r0, r2, #0
 628:	00090000 	andeq	r0, r9, r0
 62c:	000c0073 	andeq	r0, ip, r3, ror r0
 630:	1a200000 	bne	800638 <_start-0x1f7ef9c8>
 634:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
 638:	00000000 	andeq	r0, r0, r0
 63c:	0001f200 	andeq	pc, r1, r0, lsl #4
 640:	00020200 	andeq	r0, r2, r0, lsl #4
 644:	30000200 	andcc	r0, r0, r0, lsl #4
 648:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
 64c:	00000000 	andeq	r0, r0, r0
 650:	00036e00 	andeq	r6, r3, r0, lsl #28
 654:	00037e00 	andeq	r7, r3, r0, lsl #28
 658:	30000200 	andcc	r0, r0, r0, lsl #4
 65c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
 660:	00000000 	andeq	r0, r0, r0
 664:	ff05b800 			; <UNDEFINED> instruction: 0xff05b800
 668:	ff05be1f 			; <UNDEFINED> instruction: 0xff05be1f
 66c:	7d00021f 	sfmvc	f0, 4, [r0, #-124]	; 0xffffff84
 670:	ff05be00 			; <UNDEFINED> instruction: 0xff05be00
 674:	ff06501f 			; <UNDEFINED> instruction: 0xff06501f
 678:	7d00021f 	sfmvc	f0, 4, [r0, #-124]	; 0xffffff84
 67c:	00000014 	andeq	r0, r0, r4, lsl r0
 680:	00000000 	andeq	r0, r0, r0
 684:	ff05b800 			; <UNDEFINED> instruction: 0xff05b800
 688:	ff05d41f 			; <UNDEFINED> instruction: 0xff05d41f
 68c:	5000011f 	andpl	r0, r0, pc, lsl r1
 690:	1fff05d4 	svcne	0x00ff05d4
 694:	1fff0616 	svcne	0x00ff0616
 698:	00550001 	subseq	r0, r5, r1
 69c:	00000000 	andeq	r0, r0, r0
 6a0:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
 6a4:	bc1fff05 	ldclt	15, cr15, [pc], {5}
 6a8:	011fff05 	tsteq	pc, r5, lsl #30
 6ac:	05bc5100 	ldreq	r5, [ip, #256]!	; 0x100
 6b0:	061c1fff 	ssub8eq	r1, ip, pc	; <UNPREDICTABLE>
 6b4:	00011fff 	strdeq	r1, [r1], -pc	; <UNPREDICTABLE>
 6b8:	ff062853 			; <UNDEFINED> instruction: 0xff062853
 6bc:	ff06471f 			; <UNDEFINED> instruction: 0xff06471f
 6c0:	5300011f 	movwpl	r0, #287	; 0x11f
 6c4:	1fff0648 	svcne	0x00ff0648
 6c8:	1fff0650 	svcne	0x00ff0650
 6cc:	00530001 	subseq	r0, r3, r1
 6d0:	00000000 	andeq	r0, r0, r0
 6d4:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
 6d8:	cc1fff05 	ldcgt	15, cr15, [pc], {5}
 6dc:	011fff05 	tsteq	pc, r5, lsl #30
 6e0:	05cc5200 	strbeq	r5, [ip, #512]	; 0x200
 6e4:	06501fff 	usub8eq	r1, r0, pc	; <UNPREDICTABLE>
 6e8:	00011fff 	strdeq	r1, [r1], -pc	; <UNPREDICTABLE>
 6ec:	00000056 	andeq	r0, r0, r6, asr r0
 6f0:	00000000 	andeq	r0, r0, r0
 6f4:	ff05b800 			; <UNDEFINED> instruction: 0xff05b800
 6f8:	ff05d41f 			; <UNDEFINED> instruction: 0xff05d41f
 6fc:	7000051f 	andvc	r0, r0, pc, lsl r5
 700:	9f1a3f00 	svcls	0x001a3f00
 704:	1fff05d4 	svcne	0x00ff05d4
 708:	1fff0616 	svcne	0x00ff0616
 70c:	00750005 	rsbseq	r0, r5, r5
 710:	169f1a3f 			; <UNDEFINED> instruction: 0x169f1a3f
 714:	501fff06 	andspl	pc, pc, r6, lsl #30
 718:	011fff06 	tsteq	pc, r6, lsl #30
 71c:	00005700 	andeq	r5, r0, r0, lsl #14
 720:	00000000 	andeq	r0, r0, r0
 724:	05b80000 	ldreq	r0, [r8, #0]!
 728:	05d41fff 	ldrbeq	r1, [r4, #4095]	; 0xfff
 72c:	00071fff 	strdeq	r1, [r7], -pc	; <UNPREDICTABLE>
 730:	25380070 	ldrcs	r0, [r8, #-112]!	; 0x70
 734:	d49f1a3f 	ldrle	r1, [pc], #2623	; 73c <_start-0x1ffef8c4>
 738:	161fff05 	ldrne	pc, [pc], -r5, lsl #30
 73c:	071fff06 	ldreq	pc, [pc, -r6, lsl #30]
 740:	38007500 	stmdacc	r0, {r8, sl, ip, sp, lr}
 744:	9f1a3f25 	svcls	0x001a3f25
	...
 750:	1fff05bc 	svcne	0x00ff05bc
 754:	1fff061c 	svcne	0x00ff061c
 758:	00730002 	rsbseq	r0, r3, r2
 75c:	1fff061c 	svcne	0x00ff061c
 760:	1fff0627 	svcne	0x00ff0627
 764:	28510001 	ldmdacs	r1, {r0}^
 768:	471fff06 	ldrmi	pc, [pc, -r6, lsl #30]
 76c:	011fff06 	tsteq	pc, r6, lsl #30
 770:	06485100 	strbeq	r5, [r8], -r0, lsl #2
 774:	06501fff 	usub8eq	r1, r0, pc	; <UNPREDICTABLE>
 778:	00011fff 	strdeq	r1, [r1], -pc	; <UNPREDICTABLE>
 77c:	00000051 	andeq	r0, r0, r1, asr r0
 780:	00000000 	andeq	r0, r0, r0
 784:	ff05da00 			; <UNDEFINED> instruction: 0xff05da00
 788:	ff05e41f 			; <UNDEFINED> instruction: 0xff05e41f
 78c:	3100021f 	tstcc	r0, pc, lsl r2
 790:	ff05e49f 			; <UNDEFINED> instruction: 0xff05e49f
 794:	ff05ee1f 			; <UNDEFINED> instruction: 0xff05ee1f
 798:	3800021f 	stmdacc	r0, {r0, r1, r2, r3, r4, r9}
 79c:	ff05ee9f 			; <UNDEFINED> instruction: 0xff05ee9f
 7a0:	ff05f81f 			; <UNDEFINED> instruction: 0xff05f81f
 7a4:	0800031f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r8, r9}
 7a8:	05f89f20 	ldrbeq	r9, [r8, #3872]!	; 0xf20
 7ac:	06001fff 			; <UNDEFINED> instruction: 0x06001fff
 7b0:	00031fff 	strdeq	r1, [r3], -pc	; <UNPREDICTABLE>
 7b4:	009f4008 	addseq	r4, pc, r8
 7b8:	0a1fff06 	beq	8003d8 <_start-0x1f7efc28>
 7bc:	041fff06 	ldreq	pc, [pc], #-3846	; 7c4 <_start-0x1ffef83c>
 7c0:	01000a00 	tsteq	r0, r0, lsl #20
 7c4:	ff06169f 			; <UNDEFINED> instruction: 0xff06169f
 7c8:	ff06271f 			; <UNDEFINED> instruction: 0xff06271f
 7cc:	5000011f 	andpl	r0, r0, pc, lsl r1
 7d0:	1fff0628 	svcne	0x00ff0628
 7d4:	1fff0647 	svcne	0x00ff0647
 7d8:	48500001 	ldmdami	r0, {r0}^
 7dc:	4e1fff06 	cdpmi	15, 1, cr15, cr15, cr6, {0}
 7e0:	011fff06 	tsteq	pc, r6, lsl #30
 7e4:	00005000 	andeq	r5, r0, r0
 7e8:	00000000 	andeq	r0, r0, r0
 7ec:	05dc0000 	ldrbeq	r0, [ip]
 7f0:	05e41fff 	strbeq	r1, [r4, #4095]!	; 0xfff
 7f4:	00021fff 	strdeq	r1, [r2], -pc	; <UNPREDICTABLE>
 7f8:	05e60473 	strbeq	r0, [r6, #1139]!	; 0x473
 7fc:	05ee1fff 	strbeq	r1, [lr, #4095]!	; 0xfff
 800:	00021fff 	strdeq	r1, [r2], -pc	; <UNPREDICTABLE>
 804:	05f00473 	ldrbeq	r0, [r0, #1139]!	; 0x473
 808:	05f81fff 	ldrbeq	r1, [r8, #4095]!	; 0xfff
 80c:	00021fff 	strdeq	r1, [r2], -pc	; <UNPREDICTABLE>
 810:	05f80473 	ldrbeq	r0, [r8, #1139]!	; 0x473
 814:	060a1fff 			; <UNDEFINED> instruction: 0x060a1fff
 818:	00021fff 	strdeq	r1, [r2], -pc	; <UNPREDICTABLE>
 81c:	06169f30 	sasxeq	r9, r6, r0
 820:	06271fff 	qsub8eq	r1, r7, pc	; <UNPREDICTABLE>
 824:	00011fff 	strdeq	r1, [r1], -pc	; <UNPREDICTABLE>
 828:	ff062852 			; <UNDEFINED> instruction: 0xff062852
 82c:	ff06471f 			; <UNDEFINED> instruction: 0xff06471f
 830:	5200011f 	andpl	r0, r0, #-1073741817	; 0xc0000007
 834:	1fff0648 	svcne	0x00ff0648
 838:	1fff064a 	svcne	0x00ff064a
 83c:	00520001 	subseq	r0, r2, r1
 840:	00000000 	andeq	r0, r0, r0
 844:	e0000000 	and	r0, r0, r0
 848:	e41fff05 	ldr	pc, [pc], #-3845	; 850 <_start-0x1ffef7b0>
 84c:	011fff05 	tsteq	pc, r5, lsl #30
 850:	05ea5400 	strbeq	r5, [sl, #1024]!	; 0x400
 854:	05ee1fff 	strbeq	r1, [lr, #4095]!	; 0xfff
 858:	00011fff 	strdeq	r1, [r1], -pc	; <UNPREDICTABLE>
 85c:	ff05f454 			; <UNDEFINED> instruction: 0xff05f454
 860:	ff05f81f 			; <UNDEFINED> instruction: 0xff05f81f
 864:	5400011f 	strpl	r0, [r0], #-287	; 0x11f
 868:	1fff05fa 	svcne	0x00ff05fa
 86c:	1fff0600 	svcne	0x00ff0600
 870:	02540001 	subseq	r0, r4, #1
 874:	0a1fff06 	beq	800494 <_start-0x1f7efb6c>
 878:	011fff06 	tsteq	pc, r6, lsl #30
 87c:	06125400 	ldreq	r5, [r2], -r0, lsl #8
 880:	06321fff 	shsub8eq	r1, r2, pc	; <UNPREDICTABLE>
 884:	00011fff 	strdeq	r1, [r1], -pc	; <UNPREDICTABLE>
 888:	ff063454 			; <UNDEFINED> instruction: 0xff063454
 88c:	ff063a1f 			; <UNDEFINED> instruction: 0xff063a1f
 890:	5400011f 	strpl	r0, [r0], #-287	; 0x11f
 894:	1fff063e 	svcne	0x00ff063e
 898:	1fff0640 	svcne	0x00ff0640
 89c:	48540001 	ldmdami	r4, {r0}^
 8a0:	501fff06 	andspl	pc, pc, r6, lsl #30
 8a4:	011fff06 	tsteq	pc, r6, lsl #30
 8a8:	00005400 	andeq	r5, r0, r0, lsl #8
 8ac:	00000000 	andeq	r0, r0, r0
 8b0:	06cc0000 	strbeq	r0, [ip], r0
 8b4:	06ce1fff 			; <UNDEFINED> instruction: 0x06ce1fff
 8b8:	00021fff 	strdeq	r1, [r2], -pc	; <UNPREDICTABLE>
 8bc:	06ce007d 	uxtab16eq	r0, lr, sp
 8c0:	06d01fff 			; <UNDEFINED> instruction: 0x06d01fff
 8c4:	00021fff 	strdeq	r1, [r2], -pc	; <UNPREDICTABLE>
 8c8:	06d0087d 			; <UNDEFINED> instruction: 0x06d0087d
 8cc:	07081fff 			; <UNDEFINED> instruction: 0x07081fff
 8d0:	00031fff 	strdeq	r1, [r3], -pc	; <UNPREDICTABLE>
 8d4:	0000d07d 	andeq	sp, r0, sp, ror r0
 8d8:	00000000 	andeq	r0, r0, r0
 8dc:	cc000000 	stcgt	0, cr0, [r0], {-0}
 8e0:	d51fff06 	ldrle	pc, [pc, #-3846]	; fffff9e2 <stack_top+0xe000e2d2>
 8e4:	011fff06 	tsteq	pc, r6, lsl #30
 8e8:	07025000 	streq	r5, [r2, -r0]
 8ec:	07041fff 			; <UNDEFINED> instruction: 0x07041fff
 8f0:	00011fff 	strdeq	r1, [r1], -pc	; <UNPREDICTABLE>
 8f4:	00000050 	andeq	r0, r0, r0, asr r0
 8f8:	00000000 	andeq	r0, r0, r0
 8fc:	ff06cc00 			; <UNDEFINED> instruction: 0xff06cc00
 900:	ff06d51f 			; <UNDEFINED> instruction: 0xff06d51f
 904:	5100011f 	tstpl	r0, pc, lsl r1
 908:	1fff0702 	svcne	0x00ff0702
 90c:	1fff0704 	svcne	0x00ff0704
 910:	00510001 	subseq	r0, r1, r1
 914:	00000000 	andeq	r0, r0, r0
 918:	da000000 	ble	920 <_start-0x1ffef6e0>
 91c:	021fff06 	andseq	pc, pc, #24
 920:	021fff07 	andseq	pc, pc, #28
 924:	00709100 	rsbseq	r9, r0, r0, lsl #2
 928:	00000000 	andeq	r0, r0, r0
 92c:	d6000000 	strle	r0, [r0], -r0
 930:	da1fff06 	ble	800550 <_start-0x1f7efab0>
 934:	011fff06 	tsteq	pc, r6, lsl #30
 938:	06e25000 	strbteq	r5, [r2], r0
 93c:	06e61fff 			; <UNDEFINED> instruction: 0x06e61fff
 940:	00011fff 	strdeq	r1, [r1], -pc	; <UNPREDICTABLE>
 944:	ff06ee50 			; <UNDEFINED> instruction: 0xff06ee50
 948:	ff06f81f 			; <UNDEFINED> instruction: 0xff06f81f
 94c:	5000011f 	andpl	r0, r0, pc, lsl r1
	...
 958:	1fff06da 	svcne	0x00ff06da
 95c:	1fff0702 	svcne	0x00ff0702
 960:	74910002 	ldrvc	r0, [r1], #2
	...
 96c:	1fff06cc 	svcne	0x00ff06cc
 970:	1fff06da 	svcne	0x00ff06da
 974:	9f300002 	svcls	0x00300002
 978:	1fff06da 	svcne	0x00ff06da
 97c:	1fff06f4 	svcne	0x00ff06f4
 980:	f4540001 			; <UNDEFINED> instruction: 0xf4540001
 984:	f61fff06 	pldw	[pc], -r6, lsl #30
 988:	021fff06 	andseq	pc, pc, #24
 98c:	f6007d00 			; <UNDEFINED> instruction: 0xf6007d00
 990:	021fff06 	andseq	pc, pc, #24
 994:	011fff07 	tsteq	pc, r7, lsl #30
 998:	07025400 	streq	r5, [r2, -r0, lsl #8]
 99c:	07081fff 			; <UNDEFINED> instruction: 0x07081fff
 9a0:	00021fff 	strdeq	r1, [r2], -pc	; <UNPREDICTABLE>
 9a4:	00009f30 	andeq	r9, r0, r0, lsr pc
	...
 9b0:	00180000 	andseq	r0, r8, r0
 9b4:	00010000 	andeq	r0, r1, r0
 9b8:	00002850 	andeq	r2, r0, r0, asr r8
 9bc:	00002a00 	andeq	r2, r0, r0, lsl #20
 9c0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
 9d0:	00000018 	andeq	r0, r0, r8, lsl r0
 9d4:	28510001 	ldmdacs	r1, {r0}^
 9d8:	2a000000 	bcs	9e0 <_start-0x1ffef620>
 9dc:	01000000 	mrseq	r0, (UNDEF: 0)
 9e0:	00005100 	andeq	r5, r0, r0, lsl #2
 9e4:	00000000 	andeq	r0, r0, r0
 9e8:	00140000 	andseq	r0, r4, r0
 9ec:	00180000 	andseq	r0, r8, r0
 9f0:	00020000 	andeq	r0, r2, r0
 9f4:	00009f30 	andeq	r9, r0, r0, lsr pc
	...
 a00:	002a0000 	eoreq	r0, sl, r0
 a04:	00020000 	andeq	r0, r2, r0
 a08:	002a9f30 	eoreq	r9, sl, r0, lsr pc
 a0c:	00480000 	subeq	r0, r8, r0
 a10:	00010000 	andeq	r0, r1, r0
 a14:	00000050 	andeq	r0, r0, r0, asr r0
 a18:	00000000 	andeq	r0, r0, r0
 a1c:	00004800 	andeq	r4, r0, r0, lsl #16
 a20:	00004a00 	andeq	r4, r0, r0, lsl #20
 a24:	7d000200 	sfmvc	f0, 4, [r0, #-0]
 a28:	00004a00 	andeq	r4, r0, r0, lsl #20
 a2c:	00007c00 	andeq	r7, r0, r0, lsl #24
 a30:	7d000200 	sfmvc	f0, 4, [r0, #-0]
 a34:	0000000c 	andeq	r0, r0, ip
 a38:	00000000 	andeq	r0, r0, r0
 a3c:	00004800 	andeq	r4, r0, r0, lsl #16
 a40:	00005200 	andeq	r5, r0, r0, lsl #4
 a44:	52000100 	andpl	r0, r0, #0
	...
 a50:	00000072 	andeq	r0, r0, r2, ror r0
 a54:	00000076 	andeq	r0, r0, r6, ror r0
 a58:	00520001 	subseq	r0, r2, r1
 a5c:	00000000 	andeq	r0, r0, r0
 a60:	Address 0x0000000000000a60 is out of bounds.


Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	0000002a 	andeq	r0, r0, sl, lsr #32
   4:	0000002e 	andeq	r0, r0, lr, lsr #32
   8:	00000032 	andeq	r0, r0, r2, lsr r0
   c:	0000009e 	muleq	r0, lr, r0
	...
  18:	0000002a 	andeq	r0, r0, sl, lsr #32
  1c:	0000002e 	andeq	r0, r0, lr, lsr #32
  20:	00000032 	andeq	r0, r0, r2, lsr r0
  24:	0000009e 	muleq	r0, lr, r0
	...
  30:	000001d8 	ldrdeq	r0, [r0], -r8
  34:	00000250 	andeq	r0, r0, r0, asr r2
  38:	00000254 	andeq	r0, r0, r4, asr r2
  3c:	00000258 	andeq	r0, r0, r8, asr r2
	...
  48:	000001d8 	ldrdeq	r0, [r0], -r8
  4c:	00000250 	andeq	r0, r0, r0, asr r2
  50:	00000254 	andeq	r0, r0, r4, asr r2
  54:	00000258 	andeq	r0, r0, r8, asr r2
	...
  60:	000001d8 	ldrdeq	r0, [r0], -r8
  64:	00000250 	andeq	r0, r0, r0, asr r2
  68:	00000254 	andeq	r0, r0, r4, asr r2
  6c:	00000258 	andeq	r0, r0, r8, asr r2
	...
  78:	000001d8 	ldrdeq	r0, [r0], -r8
  7c:	00000250 	andeq	r0, r0, r0, asr r2
  80:	00000254 	andeq	r0, r0, r4, asr r2
  84:	00000258 	andeq	r0, r0, r8, asr r2
	...
  90:	000001f6 	strdeq	r0, [r0], -r6
  94:	000001fe 	strdeq	r0, [r0], -lr
  98:	00000206 	andeq	r0, r0, r6, lsl #4
  9c:	0000020a 	andeq	r0, r0, sl, lsl #4
	...
  a8:	000001fe 	strdeq	r0, [r0], -lr
  ac:	00000202 	andeq	r0, r0, r2, lsl #4
  b0:	0000020a 	andeq	r0, r0, sl, lsl #4
  b4:	0000020e 	andeq	r0, r0, lr, lsl #4
	...
  c0:	00000356 	andeq	r0, r0, r6, asr r3
  c4:	0000035a 	andeq	r0, r0, sl, asr r3
  c8:	0000036e 	andeq	r0, r0, lr, ror #6
  cc:	0000037e 	andeq	r0, r0, lr, ror r3
	...
  d8:	00000356 	andeq	r0, r0, r6, asr r3
  dc:	0000035a 	andeq	r0, r0, sl, asr r3
  e0:	0000036e 	andeq	r0, r0, lr, ror #6
  e4:	0000037e 	andeq	r0, r0, lr, ror r3
	...
  f0:	1fff05b8 	svcne	0x00ff05b8
  f4:	1fff0650 	svcne	0x00ff0650
  f8:	1fff06cc 	svcne	0x00ff06cc
  fc:	1fff0708 	svcne	0x00ff0708
	...

Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	5f474254 	svcpl	0x00474254
   4:	00535f41 	subseq	r5, r3, r1, asr #30
   8:	5f746567 	svcpl	0x00746567
   c:	5f676274 	svcpl	0x00676274
  10:	006b6c63 	rsbeq	r6, fp, r3, ror #24
  14:	5f6f6376 	svcpl	0x006f6376
  18:	00766964 	rsbseq	r6, r6, r4, ror #18
  1c:	706f6f6c 	rsbvc	r6, pc, ip, ror #30
  20:	6f6c6300 	svcvs	0x006c6300
  24:	632e6b63 	teqvs	lr, #101376	; 0x18c00
  28:	67627400 	strbvs	r7, [r2, -r0, lsl #8]!
  2c:	75004d5f 	strvc	r4, [r0, #-3423]	; 0xd5f
  30:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
  34:	2064656e 	rsbcs	r6, r4, lr, ror #10
  38:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
  3c:	67657200 	strbvs	r7, [r5, -r0, lsl #4]!
  40:	6c61765f 	stclvs	6, cr7, [r1], #-380	; 0xfffffe84
  44:	336d6300 	cmncc	sp, #0
  48:	6572705f 	ldrbvs	r7, [r2, #-95]!	; 0x5f
  4c:	6c63735f 	stclvs	3, cr7, [r3], #-380	; 0xfffffe84
  50:	68730031 	ldmdavs	r3!, {r0, r4, r5}^
  54:	2074726f 	rsbscs	r7, r4, pc, ror #4
  58:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
  5c:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xe67
  60:	746e6920 	strbtvc	r6, [lr], #-2336	; 0x920
  64:	74656700 	strbtvc	r6, [r5], #-1792	; 0x700
  68:	336d635f 	cmncc	sp, #2080374785	; 0x7c000001
  6c:	6b6c635f 	blvs	1b18df0 <_start-0x1e4d7210>
  70:	6f6c6300 	svcvs	0x006c6300
  74:	6c5f6b63 	mrrcvs	11, 6, r6, pc, cr3	; <UNPREDICTABLE>
  78:	00656e69 	rsbeq	r6, r5, r9, ror #28
  7c:	20554e47 	subscs	r4, r5, r7, asr #28
  80:	2e342043 	cdpcs	0, 3, cr2, cr4, cr3, {2}
  84:	00332e36 	eorseq	r2, r3, r6, lsr lr
  88:	706f6f6c 	rsbvc	r6, pc, ip, ror #30
  8c:	00736e5f 	rsbseq	r6, r3, pc, asr lr
  90:	76676572 			; <UNDEFINED> instruction: 0x76676572
  94:	74006c61 	strvc	r6, [r0], #-3169	; 0xc61
  98:	745f6762 	ldrbvc	r6, [pc], #-1890	; a0 <_start-0x1ffeff60>
  9c:	74007079 	strvc	r7, [r0], #-121	; 0x79
  a0:	4e5f6762 	cdpmi	7, 5, cr6, cr15, cr2, {3}
  a4:	47425400 	strbmi	r5, [r2, -r0, lsl #8]
  a8:	505f425f 	subspl	r4, pc, pc, asr r2	; <UNPREDICTABLE>
  ac:	47425400 	strbmi	r5, [r2, -r0, lsl #8]
  b0:	535f425f 	cmppl	pc, #-268435451	; 0xf0000005
  b4:	74656700 	strbtvc	r6, [r5], #-1792	; 0x700
  b8:	6665725f 			; <UNDEFINED> instruction: 0x6665725f
  bc:	6b6c635f 	blvs	1b18e40 <_start-0x1e4d71c0>
  c0:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
  c4:	6f6c2067 	svcvs	0x006c2067
  c8:	6920676e 	stmdbvs	r0!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
  cc:	2f00746e 	svccs	0x0000746e
  d0:	6373696d 	cmnvs	r3, #1785856	; 0x1b4000
  d4:	7461642f 	strbtvc	r6, [r1], #-1071	; 0x42f
  d8:	74616d61 	strbtvc	r6, [r1], #-3425	; 0xd61
  dc:	62752f65 	rsbsvs	r2, r5, #404	; 0x194
  e0:	2f746f6f 	svccs	0x00746f6f
  e4:	30373341 	eorscc	r3, r7, r1, asr #6
  e8:	74752d30 	ldrbtvc	r2, [r5], #-3376	; 0xd30
  ec:	2d736c69 	ldclcs	12, cr6, [r3, #-420]!	; 0xfffffe5c
  f0:	7672616d 	ldrbtvc	r6, [r2], -sp, ror #2
  f4:	2f6c6c65 	svccs	0x006c6c65
  f8:	696d7477 	stmdbvs	sp!, {r0, r1, r2, r4, r5, r6, sl, ip, sp, lr}^
  fc:	6b6c6300 	blvs	1b18d04 <_start-0x1e4d72fc>
 100:	00736e5f 	rsbseq	r6, r3, pc, asr lr
 104:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
 108:	6e692074 	mcrvs	0, 3, r2, cr9, cr4, {3}
 10c:	61770074 	cmnvs	r7, r4, ror r0
 110:	6e5f7469 	cdpvs	4, 5, cr7, cr15, cr9, {3}
 114:	6d630073 	stclvs	0, cr0, [r3, #-460]!	; 0xfffffe34
 118:	72705f33 	rsbsvc	r5, r0, #204	; 0xcc
 11c:	63735f65 	cmnvs	r3, #404	; 0x194
 120:	6c00326c 	sfmvs	f3, 4, [r0], {108}	; 0x6c
 124:	20676e6f 	rsbcs	r6, r7, pc, ror #28
 128:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
 12c:	736e7520 	cmnvc	lr, #134217728	; 0x8000000
 130:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0x769
 134:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
 138:	6c630074 	stclvs	0, cr0, [r3], #-464	; 0xfffffe30
 13c:	5f6b636f 	svcpl	0x006b636f
 140:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
 144:	47425400 	strbmi	r5, [r2, -r0, lsl #8]
 148:	505f415f 	subspl	r4, pc, pc, asr r1	; <UNPREDICTABLE>
 14c:	5f424d00 	svcpl	0x00424d00
 150:	54415453 	strbpl	r5, [r1], #-1107	; 0x453
 154:	4441425f 	strbmi	r4, [r1], #-607	; 0x25f
 158:	4d4f435f 	stclmi	3, cr4, [pc, #-380]	; ffffffe4 <stack_top+0xe000e8d4>
 15c:	444e414d 	strbmi	r4, [lr], #-333	; 0x14d
 160:	75666500 	strbvc	r6, [r6, #-1280]!	; 0x500
 164:	775f6573 			; <UNDEFINED> instruction: 0x775f6573
 168:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0x972
 16c:	756f6300 	strbvc	r6, [pc, #-768]!	; fffffe74 <stack_top+0xe000e764>
 170:	6500746e 	strvs	r7, [r0, #-1134]	; 0x46e
 174:	65737566 	ldrbvs	r7, [r3, #-1382]!	; 0x566
 178:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 17c:	655f6574 	ldrbvs	r6, [pc, #-1396]	; fffffc10 <stack_top+0xe000e500>
 180:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
 184:	424d0065 	submi	r0, sp, #101	; 0x65
 188:	4154535f 	cmpmi	r4, pc, asr r3
 18c:	55535f54 	ldrbpl	r5, [r3, #-3924]	; 0xf54
 190:	53454343 	movtpl	r4, #21315	; 0x5343
 194:	66650053 			; <UNDEFINED> instruction: 0x66650053
 198:	5f657375 	svcpl	0x00657375
 19c:	64616572 	strbtvs	r6, [r1], #-1394	; 0x572
 1a0:	776f725f 			; <UNDEFINED> instruction: 0x776f725f
 1a4:	5f6f6e5f 	svcpl	0x006f6e5f
 1a8:	00636365 	rsbeq	r6, r3, r5, ror #6
 1ac:	706f6f6c 	rsbvc	r6, pc, ip, ror #30
 1b0:	66650073 			; <UNDEFINED> instruction: 0x66650073
 1b4:	5f657375 	svcpl	0x00657375
 1b8:	64616572 	strbtvs	r6, [r1], #-1394	; 0x572
 1bc:	5f424d00 	svcpl	0x00424d00
 1c0:	54415453 	strbpl	r5, [r1], #-1107	; 0x453
 1c4:	4441425f 	strbmi	r4, [r1], #-607	; 0x25f
 1c8:	4752415f 			; <UNDEFINED> instruction: 0x4752415f
 1cc:	4e454d55 	mcrmi	13, 2, r4, cr5, cr5, {2}
 1d0:	66650054 			; <UNDEFINED> instruction: 0x66650054
 1d4:	2e657375 	mcrcs	3, 3, r7, cr5, cr5, {3}
 1d8:	424d0063 	submi	r0, sp, #99	; 0x63
 1dc:	4154535f 	cmpmi	r4, pc, asr r3
 1e0:	414d5f54 	cmpmi	sp, r4, asr pc
 1e4:	64720058 	ldrbtvs	r0, [r2], #-88	; 0x58
 1e8:	7272655f 	rsbsvc	r6, r2, #398458880	; 0x17c00000
 1ec:	4d00726f 	sfmmi	f7, 4, [r0, #-444]	; 0xfffffe44
 1f0:	54535f42 	ldrbpl	r5, [r3], #-3906	; 0xf42
 1f4:	545f5441 	ldrbpl	r5, [pc], #-1089	; 1fc <_start-0x1ffefe04>
 1f8:	4f454d49 	svcmi	0x00454d49
 1fc:	74005455 	strvc	r5, [r0], #-1109	; 0x455
 200:	6f656d69 	svcvs	0x00656d69
 204:	73007475 	movwvc	r7, #1141	; 0x475
 208:	00307165 	eorseq	r7, r0, r5, ror #2
 20c:	31716573 	cmncc	r1, r3, ror r5
 210:	66666f00 	strbtvs	r6, [r6], -r0, lsl #30
 214:	00746573 	rsbseq	r6, r4, r3, ror r5
 218:	786f626d 	stmdavc	pc!, {r0, r2, r3, r5, r6, r9, sp, lr}^	; <UNPREDICTABLE>
 21c:	6174735f 	cmnvs	r4, pc, asr r3
 220:	00737574 	rsbseq	r7, r3, r4, ror r5
 224:	655f7277 	ldrbvs	r7, [pc, #-631]	; ffffffb5 <stack_top+0xe000e8a5>
 228:	726f7272 	rsbvc	r7, pc, #536870919	; 0x20000007
 22c:	5f424d00 	svcpl	0x00424d00
 230:	54415453 	strbpl	r5, [r1], #-1107	; 0x453
 234:	5f57485f 	svcpl	0x0057485f
 238:	4f525245 	svcmi	0x00525245
 23c:	424d0052 	submi	r0, sp, #82	; 0x52
 240:	5f504f5f 	svcpl	0x00504f5f
 244:	44414552 	strbmi	r4, [r1], #-1362	; 0x552
 248:	72616e00 	rsbvc	r6, r1, #0
 24c:	6d007367 	stcvs	3, cr7, [r0, #-412]	; 0xfffffe64
 250:	5f786f62 	svcpl	0x00786f62
 254:	6973706f 	ldmdbvs	r3!, {r0, r1, r2, r3, r5, r6, ip, sp, lr}^
 258:	4d00657a 	cfstr32mi	mvfx6, [r0, #-488]	; 0xfffffe18
 25c:	504f5f42 	subpl	r5, pc, r2, asr #30
 260:	325f5a53 	subscc	r5, pc, #339968	; 0x53000
 264:	00423635 	subeq	r3, r2, r5, lsr r6
 268:	4f5f424d 	svcmi	0x005f424d
 26c:	52575f50 	subspl	r5, r7, #320	; 0x140
 270:	00455449 	subeq	r5, r5, r9, asr #8
 274:	615f7277 	cmpvs	pc, r7, ror r2	; <UNPREDICTABLE>
 278:	00736772 	rsbseq	r6, r3, r2, ror r7
 27c:	4f5f424d 	svcmi	0x005f424d
 280:	5f5a5350 	svcpl	0x005a5350
 284:	524f5744 	subpl	r5, pc, #17825792	; 0x1100000
 288:	78650044 	stmdavc	r5!, {r2, r6}^
 28c:	74706563 	ldrbtvc	r6, [r0], #-1379	; 0x563
 290:	5f6e6f69 	svcpl	0x006e6f69
 294:	646e6168 	strbtvs	r6, [lr], #-360	; 0x168
 298:	0072656c 	rsbseq	r6, r2, ip, ror #10
 29c:	4f5f424d 	svcmi	0x005f424d
 2a0:	5f5a5350 	svcpl	0x005a5350
 2a4:	0058414d 	subseq	r4, r8, sp, asr #2
 2a8:	5f646d63 	svcpl	0x00646d63
 2ac:	63657865 	cmnvs	r5, #6619136	; 0x650000
 2b0:	00657475 	rsbeq	r7, r5, r5, ror r4
 2b4:	7a73706f 	bvc	1cdc478 <_start-0x1e313b88>
 2b8:	69616d00 	stmdbvs	r1!, {r8, sl, fp, sp, lr}^
 2bc:	626d006e 	rsbvs	r0, sp, #110	; 0x6e
 2c0:	6174735f 	cmnvs	r4, pc, asr r3
 2c4:	78650074 	stmdavc	r5!, {r2, r4, r5, r6}^
 2c8:	74706563 	ldrbtvc	r6, [r0], #-1379	; 0x563
 2cc:	006e6f69 	rsbeq	r6, lr, r9, ror #30
 2d0:	786f626d 	stmdavc	pc!, {r0, r2, r3, r5, r6, r9, sp, lr}^	; <UNPREDICTABLE>
 2d4:	00706f5f 	rsbseq	r6, r0, pc, asr pc
 2d8:	4f5f424d 	svcmi	0x005f424d
 2dc:	5f5a5350 	svcpl	0x005a5350
 2e0:	00544942 	subseq	r4, r4, r2, asr #18
 2e4:	6e69616d 	powvsez	f6, f1, #5.0
 2e8:	6400632e 	strvs	r6, [r0], #-814	; 0x32e
 2ec:	796d6d75 	stmdbvc	sp!, {r0, r2, r4, r5, r6, r8, sl, fp, sp, lr}^
 2f0:	5f424d00 	svcpl	0x00424d00
 2f4:	5a53504f 	bpl	14d4438 <_start-0x1eb1bbc8>
 2f8:	524f575f 	subpl	r5, pc, #24903680	; 0x17c0000
 2fc:	424d0044 	submi	r0, sp, #68	; 0x44
 300:	5f504f5f 	svcpl	0x00504f5f
 304:	0058414d 	subseq	r4, r8, sp, asr #2
 308:	4f5f424d 	svcmi	0x005f424d
 30c:	5f5a5350 	svcpl	0x005a5350
 310:	45545942 	ldrbmi	r5, [r4, #-2370]	; 0x942
 314:	6f626d00 	svcvs	0x00626d00
 318:	65735f78 	ldrbvs	r5, [r3, #-3960]!	; 0xf78
 31c:	7200646e 	andvc	r6, r0, #1845493760	; 0x6e000000
 320:	78655f78 	stmdavc	r5!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 324:	6d007469 	cfstrsvs	mvf7, [r0, #-420]	; 0xfffffe5c
 328:	2e786f62 	cdpcs	15, 7, cr6, cr8, cr2, {3}
 32c:	626d0063 	rsbvs	r0, sp, #99	; 0x63
 330:	725f786f 	subsvc	r7, pc, #7274496	; 0x6f0000
 334:	69656365 	stmdbvs	r5!, {r0, r2, r5, r6, r8, r9, sp, lr}^
 338:	Address 0x0000000000000338 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	1fff00d8 	svcne	0x00ff00d8
  1c:	00000014 	andeq	r0, r0, r4, lsl r0
  20:	00000014 	andeq	r0, r0, r4, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	1fff00ec 	svcne	0x00ff00ec
  2c:	000000d8 	ldrdeq	r0, [r0], -r8
  30:	8e080e42 	cdphi	14, 0, cr0, cr8, cr2, {2}
  34:	00028401 	andeq	r8, r2, r1, lsl #8
  38:	0000000c 	andeq	r0, r0, ip
  3c:	00000000 	andeq	r0, r0, r0
  40:	1fff01c4 	svcne	0x00ff01c4
  44:	00000014 	andeq	r0, r0, r4, lsl r0
  48:	00000014 	andeq	r0, r0, r4, lsl r0
  4c:	00000000 	andeq	r0, r0, r0
  50:	1fff01d8 	svcne	0x00ff01d8
  54:	00000028 	andeq	r0, r0, r8, lsr #32
  58:	8e080e41 	cdphi	14, 0, cr0, cr8, cr1, {2}
  5c:	00028301 	andeq	r8, r2, r1, lsl #6
  60:	0000000c 	andeq	r0, r0, ip
  64:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  68:	7c020001 	stcvc	0, cr0, [r2], {1}
  6c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  70:	0000001c 	andeq	r0, r0, ip, lsl r0
  74:	00000060 	andeq	r0, r0, r0, rrx
  78:	1fff0200 	svcne	0x00ff0200
  7c:	000000ac 	andeq	r0, r0, ip, lsr #1
  80:	8e180e41 	cdphi	14, 1, cr0, cr8, cr1, {2}
  84:	86028701 	strhi	r8, [r2], -r1, lsl #14
  88:	84048503 	strhi	r8, [r4], #-1283	; 0x503
  8c:	00068305 	andeq	r8, r6, r5, lsl #6
  90:	00000024 	andeq	r0, r0, r4, lsr #32
  94:	00000060 	andeq	r0, r0, r0, rrx
  98:	1fff02ac 	svcne	0x00ff02ac
  9c:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
  a0:	8e280e43 	cdphi	14, 2, cr0, cr8, cr3, {2}
  a4:	89028a01 	stmdbhi	r2, {r0, r9, fp, pc}
  a8:	87048803 	strhi	r8, [r4, -r3, lsl #16]
  ac:	85068605 	strhi	r8, [r6, #-1541]	; 0x605
  b0:	81088407 	tsthi	r8, r7, lsl #8
  b4:	000a8009 	andeq	r8, sl, r9
  b8:	00000024 	andeq	r0, r0, r4, lsr #32
  bc:	00000060 	andeq	r0, r0, r0, rrx
  c0:	1fff037c 	svcne	0x00ff037c
  c4:	0000023c 	andeq	r0, r0, ip, lsr r2
  c8:	8e240e42 	cdphi	14, 2, cr0, cr4, cr2, {2}
  cc:	8a028b01 	bhi	a2cd8 <_start-0x1ff4d328>
  d0:	88048903 	stmdahi	r4, {r0, r1, r8, fp, pc}
  d4:	86068705 	strhi	r8, [r6], -r5, lsl #14
  d8:	84088507 	strhi	r8, [r8], #-1287	; 0x507
  dc:	480e4209 	stmdami	lr, {r0, r3, r9, lr}
  e0:	0000000c 	andeq	r0, r0, ip
  e4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  e8:	7c020001 	stcvc	0, cr0, [r2], {1}
  ec:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  f0:	0000001c 	andeq	r0, r0, ip, lsl r0
  f4:	000000e0 	andeq	r0, r0, r0, ror #1
  f8:	1fff05b8 	svcne	0x00ff05b8
  fc:	00000098 	muleq	r0, r8, r0
 100:	8e140e43 	cdphi	14, 1, cr0, cr4, cr3, {2}
 104:	86028701 	strhi	r8, [r2], -r1, lsl #14
 108:	84048503 	strhi	r8, [r4], #-1283	; 0x503
 10c:	00000005 	andeq	r0, r0, r5
 110:	00000018 	andeq	r0, r0, r8, lsl r0
 114:	000000e0 	andeq	r0, r0, r0, ror #1
 118:	1fff06cc 	svcne	0x00ff06cc
 11c:	0000003c 	andeq	r0, r0, ip, lsr r0
 120:	8e080e41 	cdphi	14, 0, cr0, cr8, cr1, {2}
 124:	41028401 	tstmi	r2, r1, lsl #8
 128:	0000500e 	andeq	r5, r0, lr
 12c:	0000000c 	andeq	r0, r0, ip
 130:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 134:	7c020001 	stcvc	0, cr0, [r2], {1}
 138:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 13c:	0000000c 	andeq	r0, r0, ip
 140:	0000012c 	andeq	r0, r0, ip, lsr #2
 144:	1fff0650 	svcne	0x00ff0650
 148:	00000048 	andeq	r0, r0, r8, asr #32
 14c:	00000018 	andeq	r0, r0, r8, lsl r0
 150:	0000012c 	andeq	r0, r0, ip, lsr #2
 154:	1fff0698 	svcne	0x00ff0698
 158:	00000034 	andeq	r0, r0, r4, lsr r0
 15c:	8e0c0e41 	cdphi	14, 0, cr0, cr12, cr1, {2}
 160:	84028501 	strhi	r8, [r2], #-1281	; 0x501
 164:	00000003 	andeq	r0, r0, r3
